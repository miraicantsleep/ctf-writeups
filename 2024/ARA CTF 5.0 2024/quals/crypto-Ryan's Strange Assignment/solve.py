from Crypto.Util.number import inverse, long_to_bytes

# Provided public key
e = 114886333760015985036554090542783661670178316083
N = 656667633925034928565265657029754592125612174887

# found through factor db
p = 750654204080680317868433
q = 874793787013089568682039

# Ciphertext values
c = [388470564545595079878104053981025526531939606859, 453176023391532805708302460105667157725589851094, 388470564545595079878104053981025526531939606859, 75802357989074313293245504745464495672586500194, 530636545397020801879048076629625949622834349271, 375102954800183654669573725068164483048779280257, 99671660668837563905250376816639356715569135661, 375102954800183654669573725068164483048779280257, 375102954800183654669573725068164483048779280257, 548590315496515548263582684646962335108239338721, 375102954800183654669573725068164483048779280257, 140887375510816447108962772482031766699016216554, 140212787491282887085498898710330206078088868768, 242179089744385364312781540147541186854680604100, 398044336768077716652000929266760922026198523016, 328163223491055229981745557826815118704798556561, 548590315496515548263582684646962335108239338721, 203670039431684285409927419369078161781353023554, 140887375510816447108962772482031766699016216554, 140212787491282887085498898710330206078088868768, 28246179230356600933428735985618279268854527152, 352317776039632073723207591355488816387781272693, 548590315496515548263582684646962335108239338721, 245693816302915231385429799263018906306181844928, 328163223491055229981745557826815118704798556561, 284701600970156838561135032032260883397153054123, 443620019394148520237590263606896913967512611950]

# Calculate phi(N)
phi_N = (p - 1) * (q - 1)

# Calculate the modular multiplicative inverse d
d = inverse(e, phi_N)

# Decrypt each ciphertext value and print the plaintext
for item in c:
    plaintext = pow(item, d, N)
    decrypted_bytes = long_to_bytes(plaintext)
    print(decrypted_bytes.decode(), end="")
