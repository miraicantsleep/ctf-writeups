


Gadgets
=======


0x0000000000423b9d: adc ah, bh; ret; 
0x000000000045c7ee: adc al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1188; cmovne rax, rdx; ret; 
0x00000000004299f2: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429a47: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000464e81: adc al, 0; add byte ptr [rax], al; syscall; 
0x0000000000450ef6: adc al, 0; add dh, dh; ret 0xf40; 
0x000000000043ae21: adc al, 0x11; mov qword ptr [rax + 8], rdx; ret; 
0x000000000043ab5b: adc al, 0x11; test edx, edx; jne 0x3ab68; ret; 
0x000000000042e805: adc al, 0x16; sub eax, edx; ret; 
0x000000000042f7d0: adc al, 0x16; test r8d, r8d; je 0x2f7d8; xchg edx, eax; sub eax, edx; ret; 
0x0000000000434d15: adc al, 0x16; test r8d, r8d; je 0x34d1d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000408e7c: adc al, 0x24; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000408f9e: adc al, 0x24; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x000000000047614f: adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760fc: adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000408eef: adc al, 0x24; mov rsi, rbx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000438511: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x38529; add rsp, 0x28; ret; 
0x0000000000439051: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390e0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439181: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a7: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a396: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a62b: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000044ae45: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af0e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4af1e; add rsp, 0xd8; ret; 
0x000000000045019a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000458ff0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e923: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea76: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000046972b: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004698f9: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a23: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469aef: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469bdf: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046bcfd: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706dd: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707af: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x707bc; add rsp, 0x38; ret; 
0x000000000047081f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470905: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x70912; add rsp, 0x38; ret; 
0x000000000047096a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b53: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5de: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6ad: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb3e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xfb4e; add rsp, 0xd8; ret; 
0x0000000000468232: adc al, 0x36; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000425930: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x00000000004754a6: adc al, 0x48; lea edx, [rip + 0x36f82]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x0000000000417193: adc al, 0x48; mov dword ptr [rip + 0x909fd], ebx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x000000000041596b: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000401a7c: adc al, 0x48; mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000437ceb: adc al, 0x48; sub esp, 8; call rax; 
0x000000000046b463: adc al, 0x48; test edx, edx; jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000413ead: adc al, 0x4c; mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x000000000041ea08: adc al, 0x52; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000468280: adc al, 0x8a; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000468241: adc al, 0x8a; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000468236: adc al, 0x90; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000040384b: adc al, 0x91; add rdx, rcx; jmp rdx; 
0x000000000042aee0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042990e: adc al, 0x91; sub eax, edx; ret; 
0x000000000042e973: adc al, 0xa; sub eax, edx; ret; 
0x00000000004393cb: adc al, 0xb8; or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000043ae12: adc al, 0xbf; lea rcx, [rip + 0x6ad85]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000045c7c8: adc al, 0xc; add byte ptr [rax], al; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x00000000004215e4: adc al, 0xe; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000429901: adc al, 0xe; lea rcx, [rip + 0x55f16]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042eb91: adc al, 0xe; sub eax, edx; ret; 
0x0000000000478655: adc al, 0xee; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x0000000000475512: adc al, 0xf7; ret; 
0x000000000045b0e1: adc al, 0xf; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000469930: adc al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x00000000004540b1: adc al, 1; lea rax, [rip + 0x4dd66]; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b6: adc al, 1; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2ab: adc al, 1; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454147: adc al, 6; lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454022: adc al, 6; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e459: adc al, 6; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e35b: adc al, 6; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000453587: adc al, 7; lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e303: adc al, 7; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000423b96: adc al, bh; ret; 
0x000000000044e395: adc al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x83; ret; 
0x0000000000459f8d: adc al, byte ptr [rbp + 0xf5e74c0]; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000045d40d: adc al, byte ptr [rbp + 0xf6e74c0]; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000041ed44: adc al, byte ptr [rcx]; add bh, dh; ret 0; 
0x00000000004495fa: adc al, byte ptr [rdi]; add byte ptr [rax], al; nop; ret; 
0x0000000000457bb2: adc al, byte ptr [rdx + 5]; add cl, al; call 0x1e5fec7; mov dword ptr [rip + 0x5000e], eax; ret; 
0x0000000000468d28: adc al, ch; add ah, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004684f0: adc al, ch; cmp ch, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043b3b0: adc al, ch; retf 0xfe1e; dec dword ptr [rax - 0x77]; ret; 
0x0000000000422fe7: adc al, dh; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000423b95: adc al, r15b; ret; 
0x0000000000472825: adc bh, bh; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000449d07: adc bh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000423b7c: adc bh, bh; ret; 
0x0000000000465fe5: adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000466077: adc bh, byte ptr [rcx]; ret 0xc74; 
0x0000000000401a9d: adc bh, byte ptr [rdx + 0x3c]; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000046a112: adc bl, ch; jno 0x6a15f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000425906: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425926: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000430936: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430926: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000425987: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430997: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004258c7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000425a88: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a98: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000047312b: adc bl, dh; movups xmm0, xmmword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x0000000000425905: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425925: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000430935: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430925: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000425986: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430996: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004258c6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000436aee: adc byte ptr [r11 + 0x418901c0], al; adc byte ptr [rdi], cl; nop; ret; 
0x0000000000414238: adc byte ptr [r11 + 0x4c], sil; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000414216: adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000458f01: adc byte ptr [r13 + 0x531974c0], r8b; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000046f73d: adc byte ptr [r13 + 0x9840fc0], al; add al, 0; add byte ptr [rax + 1], cl; ret; 
0x000000000045acdf: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045e1ef: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000416452: adc byte ptr [r15], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000436af4: adc byte ptr [r15], cl; nop; ret; 
0x0000000000423edd: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000421f30: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224ee: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000046982f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000041188a: adc byte ptr [r8 + 1], r9b; ret; 
0x000000000041722f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x000000000043e3c6: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000045f0b3: adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000466f29: adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467636: adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e29: adc byte ptr [r9 + 3], cl; add al, 0x24; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c1: adc byte ptr [r9 + 3], cl; add al, 0x24; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000044df07: adc byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000411794: adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x000000000043074a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x4be3b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256aa: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x56c6f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000417227: adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x000000000040ed9f: adc byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000409810: adc byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x000000000043a20d: adc byte ptr [rax + 0x39], cl; ret 0xd72; 
0x000000000043c606: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x000000000041b7c2: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000046fed4: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x0000000000469830: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000042b1c0: adc byte ptr [rax + 1], cl; clc; xtest; jne 0x2b1cd; vzeroupper; ret; 
0x0000000000410fcc: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000041188b: adc byte ptr [rax + 1], cl; ret; 
0x0000000000467159: adc byte ptr [rax + 3], cl; push rcx; or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000046b7e4: adc byte ptr [rax - 0x39], cl; add eax, 0x404d8; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046ba86: adc byte ptr [rax - 0x73], cl; adc eax, 0x132; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000041ed66: adc byte ptr [rax - 0x73], cl; adc eax, 0x172e2; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000045c86a: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffc714e; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000043ab6c: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000043ab6b: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000415f47: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000441e19: adc byte ptr [rax - 0x75], cl; je 0x41e42; cmp byte ptr [rax - 0x75], cl; jl 0x41e47; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e96: adc byte ptr [rax - 0x75], cl; je 0x45ebf; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000439847: adc byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; and al, 0x18; call rax; 
0x0000000000475677: adc byte ptr [rax - 0x77], cl; mov ah, 0xd7; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000043b199: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000456ae9: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000456aae: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x000000000045374a: adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000416dfc: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000418a4b: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000417230: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x000000000041288a: adc byte ptr [rax - 0x77], cl; ret; 
0x000000000041b51f: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test bl, ah; add al, 0; add dh, dh; ret 0xf0f; 
0x000000000046dc31: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000041cdba: adc byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000047729c: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000043c928: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000466a4c: adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000402ff2: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000476282: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x00000000004733ed: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rdx], edx; pop rbx; ret; 
0x000000000041e707: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xfff; cmovne rax, rdx; ret; 
0x0000000000464c2b: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x000000000042ed80: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x0000000000429c6d: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000429e32: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429e87: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004448e0: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045f0b4: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x000000000041894d: adc byte ptr [rax], al; add byte ptr [rax], al; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x0000000000464032: adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000439066: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000410839: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004019e1: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000418785: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045eb20: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000043a36c: adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000045891b: adc byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000004577d6: adc byte ptr [rbp + 0x494575f6], al; lea eax, [rax + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000458f02: adc byte ptr [rbp + 0x531974c0], al; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000046f73e: adc byte ptr [rbp + 0x9840fc0], al; add al, 0; add byte ptr [rax + 1], cl; ret; 
0x00000000004225e7: adc byte ptr [rbp + 0xf], al; adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000043078f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; stc; mov ebp, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000436aef: adc byte ptr [rbx + 0x418901c0], al; adc byte ptr [rdi], cl; nop; ret; 
0x0000000000414239: adc byte ptr [rbx + 0x4c], dh; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045e67e: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000040892d: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000046613f: adc byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004259e7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x259f6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004309f7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x30a06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a07: adc byte ptr [rbx + 0xff3184e], cl; jg 0x25a16; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a17: adc byte ptr [rbx + 0xff3184e], cl; jg 0x30a26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000414217: adc byte ptr [rbx + 6], dh; movzx eax, byte ptr [rax]; ret; 
0x0000000000416e52: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000045e98c: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043b617: adc byte ptr [rbx - 0x51], dh; xor eax, eax; ret; 
0x000000000041632f: adc byte ptr [rcx + 0x807448], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x000000000040247c: adc byte ptr [rcx + 0x9411788], al; ret 0x58b; 
0x0000000000422ff1: adc byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], ebp; ret; 
0x000000000046d208: adc byte ptr [rcx + 0xf], al; adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x00000000004556ac: adc byte ptr [rcx + 3], bh; add byte ptr [rbx + 0xb], dh; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000046675c: adc byte ptr [rcx + 3], cl; add al, 0x24; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x0000000000466f2a: adc byte ptr [rcx + 3], cl; add al, 0x24; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467637: adc byte ptr [rcx + 3], cl; add al, 0x24; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e2a: adc byte ptr [rcx + 3], cl; add al, 0x24; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c2: adc byte ptr [rcx + 3], cl; add al, 0x24; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000046675b: adc byte ptr [rcx + 3], r9b; add al, 0x24; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x000000000043ba2e: adc byte ptr [rcx + rcx*4 + 0x48], cl; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000436616: adc byte ptr [rcx + rcx*4 - 0x19], cl; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000457843: adc byte ptr [rcx - 0x73], cl; add al, 0x80; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000469191: adc byte ptr [rcx - 0x77], al; ret 0xc141; 
0x000000000044a75f: adc byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x0000000000438730: adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x00000000004189af: adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000004299f8: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000040cd21: adc byte ptr [rcx - 5], al; jg 0xcd38; test byte ptr [rdx - 0x7c000008], bh; ret; 
0x00000000004361ae: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045bb09: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ba49: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000041a13f: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000408927: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000045bb08: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ba48: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000475f7f: adc byte ptr [rdi + 1], bh; jmp rax; 
0x00000000004359c6: adc byte ptr [rdi + rbp*8 - 0x3c], dh; ret 0xf3a0; 
0x0000000000422036: adc byte ptr [rdi + rcx + 0x11], al; add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000422a07: adc byte ptr [rdi + rcx + 0x11], al; push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000045b943: adc byte ptr [rdi + rdx + 0x10], cl; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000040318b: adc byte ptr [rdi + rsi - 9], dh; ret 0; 
0x0000000000416453: adc byte ptr [rdi], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000423ede: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004220a1: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000421f31: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224ef: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000436af5: adc byte ptr [rdi], cl; nop; ret; 
0x000000000042b8c3: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000434361: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434451: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434271: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434cb9: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000434811: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000433fa1: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x00000000004349f1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434181: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000434bd1: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434ae1: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434423: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434513: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434333: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434091: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000434243: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434063: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434153: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000433f73: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000476aec: adc byte ptr [rdx + 0xbe9fff8], ch; stosb byte ptr [rdi], al; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000041ee51: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x8d05a; add dword ptr [rax - 0x73], ecx; adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x000000000041eb31: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x8d37a; add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x0000000000435c56: adc byte ptr [rdx], al; jne 0x35c70; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d06: adc byte ptr [rdx], al; jne 0x35d20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x0000000000435c55: adc byte ptr [rdx], r8b; jne 0x35c70; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d05: adc byte ptr [rdx], r8b; jne 0x35d20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x000000000047312e: adc byte ptr [rip + 0x218c4], al; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x000000000042b893: adc byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000419c40: adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000045b946: adc byte ptr [rsi + 0xf], ah; je 0x5b913; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x0000000000427c37: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042d59b: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000045ace0: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045e1f0: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000042248d: adc byte ptr [rsi + rdx - 0x10], bh; cmp rdx, 0x20; ja 0x22500; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000422251: adc byte ptr [rsi + rdx - 0x10], bl; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421e6b: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000421f27: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224e5: adc byte ptr [rsi + rdx - 0x20], dl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042076a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004309d7: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000429e86: adc byte ptr ss:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000454b20: adc ch, cl; sal esi, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000459faa: adc cl, byte ptr [rax + 1]; clc; ret; 
0x000000000046f3ac: adc cl, byte ptr [rax + 1]; ret 0x8d49; 
0x000000000040aa85: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c38; 
0x00000000004754fd: adc cl, byte ptr [rax - 0x75]; or al, 0xf7; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000417245: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000044e262: adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000043c225: adc cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp + rcx + 0x48], cl; lea edi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004253d5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000040aa88: adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c38; 
0x000000000046bb89: adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000041ee53: adc dh, dh; add eax, 0x8d05a; add dword ptr [rax - 0x73], ecx; adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x000000000041eb33: adc dh, dh; add eax, 0x8d37a; add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x0000000000423b7b: adc dil, r15b; ret; 
0x0000000000416ef0: adc dword ptr [rax + 0x10], eax; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x00000000004225e5: adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422fef: adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004225ea: adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422ff4: adc dword ptr [rax + 0x20], ebp; ret; 
0x000000000046ff9e: adc dword ptr [rax + 0x2a0], eax; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x00000000004225ef: adc dword ptr [rax + 0x30], edi; ret; 
0x0000000000407b78: adc dword ptr [rax + 0x39], ecx; ret; 
0x00000000004571bf: adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000457de6: adc dword ptr [rax + 0x48], edx; lea edi, [rip + 0x230e1]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x000000000045d42d: adc dword ptr [rax + 1], ecx; clc; ret; 
0x000000000043c087: adc dword ptr [rax + rax], eax; mov eax, 0x15; syscall; 
0x0000000000422fe5: adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000044a30d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004188ed: adc dword ptr [rax - 0x3f], ecx; call 0x508ed0f9; add dword ptr [rax - 0x77], ecx; adc eax, 0x8c8ab; ret; 
0x000000000040f83e: adc dword ptr [rax - 0x73], ecx; adc eax, 0x6ae1a; add rax, rdx; ret; 
0x000000000046ddb1: adc dword ptr [rax - 0x75], ecx; or byte ptr [rcx + rcx*4 - 0x16], cl; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000044a3d9: adc dword ptr [rax - 0x75], ecx; push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044e4df: adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000435918: adc dword ptr [rax - 0x77], ecx; ret 0xe281; 
0x0000000000435a87: adc dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000429cc5: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429d1a: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045ead4: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045ead4: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x000000000044cbe9: adc dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; cmp byte ptr [r13 - 0x77], r9b; ret; 
0x0000000000422feb: adc dword ptr [rax], eax; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000456aef: adc dword ptr [rax], eax; ret; 
0x0000000000456ab4: adc dword ptr [rax], ecx; ret; 
0x00000000004015be: adc dword ptr [rax], edi; test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x00000000004187d4: adc dword ptr [rbp - 0x2c], esi; and edx, 0x3b; cmp edx, 0xa; je 0x187ee; xor eax, eax; ret; 
0x0000000000434d8e: adc dword ptr [rbp - 0xc928b40], eax; bsf eax, eax; vzeroupper; ret; 
0x0000000000417abf: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dbf: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000457941: adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000417ac3: adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dc3: adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x000000000043b93e: adc dword ptr [rbx + 0x2d8], eax; syscall; 
0x000000000041591e: adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x0000000000401838: adc dword ptr [rbx + 0x6c7401e8], eax; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000412dbb: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041417c: adc dword ptr [rbx + 8], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004134b2: adc dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000045f0ba: adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000416451: adc dword ptr [rcx + 0x10], eax; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416455: adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a0a: adc dword ptr [rcx + 0x20], edx; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416459: adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a0f: adc dword ptr [rcx + 0x30], ecx; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041645d: adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a14: adc dword ptr [rcx + 0x40], eax; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000422a18: adc dword ptr [rcx + 0x50], edi; ret; 
0x0000000000420a39: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a40: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a47: adc dword ptr [rcx + 7], edi; ret; 
0x000000000046d210: adc dword ptr [rcx - 0x10], ecx; cmp r10, r11; jne 0x6d1a0; ret; 
0x000000000046d20b: adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x00000000004206e2: adc dword ptr [rcx - 1], ebx; ret; 
0x00000000004206a6: adc dword ptr [rcx - 1], edi; ret; 
0x00000000004206db: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004208d9: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000042069f: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208d2: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420698: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208cb: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420691: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043b930: adc dword ptr [rcx], eax; add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000042203c: adc dword ptr [rcx], eax; ret; 
0x0000000000423edc: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000042209f: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000421f2f: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224ed: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000423ee0: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004220a3: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423ee4: adc dword ptr [rdi + 0x30], eax; ret; 
0x00000000004220a7: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000041639c: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000416286: adc dword ptr [rdi + 0xa0], eax; ret; 
0x00000000004206d4: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237d1: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000415838: adc dword ptr [rdi + 8], eax; ret; 
0x00000000004157fd: adc dword ptr [rdi + 8], ecx; ret; 
0x000000000045745a: adc dword ptr [rdi + rdi*8 - 1], -1; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423e09: adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000423e68: adc dword ptr [rdi + rdx - 0x10], eax; ret; 
0x0000000000422265: adc dword ptr [rdi + rdx - 0x10], ebx; ret; 
0x0000000000421e73: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x000000000042249b: adc dword ptr [rdi + rdx - 0x10], edi; ret; 
0x0000000000421f33: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000421f8c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000421f91: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000421f38: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x0000000000422260: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004224f1: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042225b: adc dword ptr [rdi + rdx - 0x30], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f96: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000422256: adc dword ptr [rdi + rdx - 0x40], eax; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f9b: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000423e75: adc dword ptr [rdi - 0x10], eax; ret; 
0x0000000000423e71: adc dword ptr [rdi - 0x20], eax; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000420b94: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b9b: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba2: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba9: adc dword ptr [rdi - 8], edi; ret; 
0x000000000046b820: adc dword ptr [rdi], eax; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x0000000000423ed9: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000421f2c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224ea: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042209c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423e65: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000421e70: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000422498: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000423e0e: adc dword ptr [rdi], eax; ret; 
0x00000000004206ce: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237cb: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237ec: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000422034: adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000422030: adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000042202c: adc dword ptr [rdx + 0x30], ebp; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000045781b: adc dword ptr [rdx + 8], eax; ret; 
0x00000000004220ac: adc dword ptr [rdx + rdi - 0x10], eax; ret; 
0x0000000000422039: adc dword ptr [rdx], eax; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000043b88f: adc dword ptr [rip + 0x7044b], eax; ret; 
0x000000000043b87f: adc dword ptr [rip + 0x7046b], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000044e01e: adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000423911: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000423918: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042391f: adc dword ptr [rsi + 3], edx; ret; 
0x00000000004239ae: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b5: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239bc: adc dword ptr [rsi + 7], edx; ret; 
0x00000000004237be: adc dword ptr [rsi - 1], edx; ret; 
0x00000000004237b7: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237b0: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237a9: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041a0e9: adc dword ptr [rsi], eax; add al, ch; out dx, eax; mov bh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000042390b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041e705: adc eax, 0x1076; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041ed34: adc eax, 0x11667; cmove rax, rdx; ret; 
0x000000000041ee09: adc eax, 0x11dd2; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000046ba89: adc eax, 0x132; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000045c7ec: adc eax, 0x144f; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ee5d: adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x0000000000436744: adc eax, 0x1557; cmove rax, rdx; ret; 
0x000000000041eef9: adc eax, 0x15e62; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041e857: adc eax, 0x1664; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ed69: adc eax, 0x172e2; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041e757: adc eax, 0x17a4; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e657: adc eax, 0x18a4; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ea9: adc eax, 0x1ca2; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597ff: adc eax, 0x207c; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x00000000004705a6: adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041e8b5: adc eax, 0x2516; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b5: adc eax, 0x2646; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b5: adc eax, 0x2746; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e5: adc eax, 0x2d66; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e5: adc eax, 0x2e96; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e5: adc eax, 0x2f96; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000045c631: adc eax, 0x31b7a; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000041e895: adc eax, 0x35a6; cmove rax, rdx; ret; 
0x000000000041e795: adc eax, 0x36b6; cmove rax, rdx; ret; 
0x00000000004754a9: adc eax, 0x36f82; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x000000000041e695: adc eax, 0x37b6; cmove rax, rdx; ret; 
0x000000000046bd8b: adc eax, 0x40648; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004225ae: adc eax, 0x40d; add rdx, r8; jmp rdx; 
0x0000000000435ad2: adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000464e0a: adc eax, 0x441f0f; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000438478: adc eax, 0x44727; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000438130: adc eax, 0x449b7; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000438000: adc eax, 0x44a0b; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045c84c: adc eax, 0x4804e580; lea eax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x00000000004597f9: adc eax, 0x4804e580; lea edx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041ec9e: adc eax, 0x4808e283; lea eax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000041e962: adc eax, 0x4ad9; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d4: adc eax, 0x4c27; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041e9bc: adc eax, 0x507f; cmovne rax, rdx; ret; 
0x000000000041ea00: adc eax, 0x527b; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e97c: adc eax, 0x545f; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000042af28: adc eax, 0x548f3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042af0e: adc eax, 0x5490d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea67: adc eax, 0x54d4; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x00000000004296d8: adc eax, 0x56143; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296be: adc eax, 0x5615d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea8c: adc eax, 0x592f; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000044a2e5: adc eax, 0x5c14e; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000041e260: adc eax, 0x5e033; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041eae4: adc eax, 0x6827; cmove rax, rdx; ret; 
0x000000000043aea6: adc eax, 0x6acf5; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043adf2: adc eax, 0x6ada9; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000040f841: adc eax, 0x6ae1a; add rax, rdx; ret; 
0x000000000043b07b: adc eax, 0x6bce8; mov rax, rdx; ret; 
0x000000000043af7a: adc eax, 0x6bde9; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000046b4f2: adc eax, 0x75f68548; sub bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000459787: adc eax, 0x7d4; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x00000000004220d1: adc eax, 0x84c22; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047788a: adc eax, 0x8948fffe; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000466a46: adc eax, 0x8b480000; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000040d4a2: adc eax, 0x8b480000; je 0xd4cd; or byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000045c734: adc eax, 0x8c7; cmove rax, rdx; ret; 
0x00000000004188f8: adc eax, 0x8c8ab; ret; 
0x0000000000408b7c: adc eax, 0x9eba7; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000408b2b: adc eax, 0x9ebf8; cmp edx, 1; jg 0x8c28; mov esi, r13d; mov rdi, r8; call rax; 
0x0000000000401a6f: adc eax, 0xaa1cc; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000401b39: adc eax, 0xaa302; pop rbx; ret; 
0x000000000041eb3d: adc eax, 0xabbe; cmove rax, rdx; ret; 
0x000000000045c7c7: adc eax, 0xc14; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000045ff9b: adc eax, 0xcafee801; sti; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000041ebb6: adc eax, 0xcc65; cmovne rax, rdx; ret; 
0x000000000041ec49: adc eax, 0xcef2; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000042e7fa: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000041e905: adc eax, 0xe36; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041ecab: adc eax, 0xe6d0; cmove rax, rdx; ret; 
0x0000000000476ae7: adc eax, 0xe9fff8aa; adc byte ptr [rdx + 0xbe9fff8], ch; stosb byte ptr [rdi], al; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000040681f: adc eax, 0xf000732; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000041e805: adc eax, 0xf76; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000044acba: adc eax, 0xf8830006; add dword ptr [rdi + 0x26], edi; xor eax, eax; add rsp, 8; ret; 
0x00000000004597ac: adc eax, 0xfcf; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000045c859: adc eax, 0xfffc6b62; cmove rax, rdx; ret; 
0x000000000045c86d: adc eax, 0xfffc714e; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041f6b1: adc eax, 0xfffffcea; cmove rax, rdx; ret; 
0x000000000040154e: adc eax, dword ptr [rax]; add ah, dh; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000043673f: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x1557; cmove rax, rdx; ret; 
0x0000000000429b62: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429bb7: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004396fd: adc eax, dword ptr [rbx + 0x94801e2]; ror byte ptr [rcx - 0x77], 1; add ebx, dword ptr [rbx + 0x5d]; ret; 
0x000000000043673e: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x1557; cmove rax, rdx; ret; 
0x000000000046b2d9: adc eax, eax; ret; 
0x000000000046b416: adc eax, edx; pop rbp; pop rbx; ret; 
0x0000000000416dd1: adc ebp, ebx; ret; 
0x0000000000469c12: adc ebp, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000045d707: adc ecx, dword ptr [rax + 1]; clc; ret; 
0x0000000000408af1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004751f7: adc ecx, dword ptr [rbp - 0x77]; clc; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000045c643: adc ecx, edi; add al, 0; ret; 
0x000000000040157c: adc edi, dword ptr [rax]; test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x0000000000478933: adc edi, ebp; dec dword ptr [rax - 0x7d]; ret; 
0x000000000043b6ac: adc edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000451121: adc edx, dword ptr [rbx + 0x16e80002]; sbb edi, esp; jmp qword ptr [rsi + 0xf]; 
0x000000000046a6aa: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000470031: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000459bd1: adc esi, edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000436b4b: adc esi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000418e02: adc esi, esi; ret 0x740f; 
0x0000000000459e69: adc esp, dword ptr [rip - 0x2e770000]; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000442d0f: adc esp, edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000420a38: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a3f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a46: adc qword ptr [rcx + 7], rdi; ret; 
0x00000000004206e1: adc qword ptr [rcx - 1], rbx; ret; 
0x00000000004206a5: adc qword ptr [rcx - 1], rdi; ret; 
0x00000000004206da: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004208d8: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000042069e: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208d1: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420697: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208ca: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420690: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004206d3: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237d0: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000420b93: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b9a: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba1: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba8: adc qword ptr [rdi - 8], rdi; ret; 
0x00000000004206cd: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237ca: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237eb: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000423910: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000423917: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042391e: adc qword ptr [rsi + 3], rdx; ret; 
0x00000000004239ad: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b4: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239bb: adc qword ptr [rsi + 7], rdx; ret; 
0x00000000004237bd: adc qword ptr [rsi - 1], rdx; ret; 
0x00000000004237b6: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237af: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237a8: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042390a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000470030: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000468d27: adc r8b, bpl; add ah, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004684ef: adc r8b, bpl; cmp ch, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000046b415: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000046a6a9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000423b9c: adc spl, r15b; ret; 
0x0000000000401942: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000004019f3: add ah, bh; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x0000000000401955: add ah, bh; inc dword ptr [rbx]; ret; 
0x0000000000452404: add ah, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000042d115: add ah, byte ptr [rdx - 0x1d]; and byte ptr [rip + 0x62de037e], r12b; mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x00000000004210f0: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x210fb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000421046: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jp 0x2104f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000042391a: add ah, byte ptr [rdx - 0xf]; jl 0x23967; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000468d2a: add ah, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000401550: add ah, dh; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000046ba84: add al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x132; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x0000000000450cc4: add al, 0; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000046145e: add al, 0; add byte ptr [rax + 1], cl; ret 0xba41; 
0x000000000046f744: add al, 0; add byte ptr [rax + 1], cl; ret; 
0x0000000000437ffb: add al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x44a0b; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000044f3aa: add al, 0; add byte ptr [rax - 0x73], cl; add al, 0x83; ret; 
0x0000000000472bf3: add al, 0; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000042f34d: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042aa07: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042f371: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046966d: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000046b7ea: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045d221: add al, 0; add byte ptr [rax], al; ret; 
0x000000000045e903: add al, 0; add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004225b0: add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x0000000000444983: add al, 0; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000411323: add al, 0; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000463940: add al, 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000043c2f0: add al, 0; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x00000000004188c6: add al, 0; add byte ptr [rsi + 5], dh; ret; 
0x000000000043817d: add al, 0; add cl, ch; ret; 
0x000000000043c9fa: add al, 0; add dh, dh; ret 0x7402; 
0x000000000041b526: add al, 0; add dh, dh; ret 0xf0f; 
0x000000000046440f: add al, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000459092: add al, 0; add rsp, 8; ret; 
0x000000000046bd8e: add al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043a3d9: add al, 0; call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000043a419: add al, 0; call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x0000000000438fbd: add al, 0; call 0x3ef0; call 0x3ad90; nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000043d276: add al, 0; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000459087: add al, 0; call 0x5e840; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000417b45: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000046b9bb: add al, 0; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x0000000000464515: add al, 0; cmp rcx, rdi; je 0x64520; ret; 
0x000000000046bd85: add al, 0; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000469645: add al, 0; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x69658; ret; 
0x000000000043d26f: add al, 0; lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000453bd5: add al, 0; mov dword ptr [rsp + 0x30], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043c088: add al, 0; mov eax, 0x15; syscall; 
0x00000000004540b8: add al, 0; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000464408: add al, 0; mov qword ptr [rip + 0x47e7f], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004556b7: add al, 0; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000045358e: add al, 0; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000453945: add al, 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000438003: add al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000430697: add al, 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045c728: add al, 0; or byte ptr [rax - 0x73], cl; add eax, 0xb0e; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x0000000000457b67: add al, 0; ret; 
0x000000000043ab72: add al, 0x11; ret; 
0x00000000004019a8: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000436030: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x000000000042f5db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f1cb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000042ecd7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f4e7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ef5b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f29b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000042f5b7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f687: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f43b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ec2b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042f02b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042f50b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042ecfb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042ed9d: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f0fb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042f36b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042edc1: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042af0a: add al, 0x17; lea rdx, [rip + 0x5490d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296ba: add al, 0x17; lea rdx, [rip + 0x5615d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042e801: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042527e: add al, 0x17; ret; 
0x000000000042e79a: add al, 0x17; sub eax, ecx; ret; 
0x0000000000424a8e: add al, 0x17; vzeroupper; ret; 
0x000000000046675f: add al, 0x24; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x0000000000472bf8: add al, 0x24; add rsp, 0x38; ret; 
0x000000000040119c: add al, 0x24; and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000472bef: add al, 0x24; call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000466f2d: add al, 0x24; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x000000000046763a: add al, 0x24; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e2d: add al, 0x24; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c5: add al, 0x24; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000464030: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000418783: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044a34a: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046b111: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6b15e; leave; ret; 
0x000000000045ca66: add al, 0x39; bnd je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x000000000043c730: add al, 0x39; cld; dec dword ptr [rax - 0x77]; add eax, 0x6f5ed; add rsp, 0x1a8; ret; 
0x000000000041662f: add al, 0x3a; ret; 
0x000000000045464b: add al, 0x3d; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x76fffffc], ebx; ret 0xc083; 
0x0000000000478aaf: add al, 0x48; cmp dword ptr [rdi + rdx + 0x18], 0; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000043d301: add al, 0x48; cmp eax, 0x16; ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000044ad7f: add al, 0x48; cmp edx, 0xf; ja 0x4ad68; mov rcx, rax; mov rax, rcx; ret; 
0x000000000042579b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000041ebac: add al, 0x48; lea eax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000045c84f: add al, 0x48; lea eax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x00000000004188f1: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000041ee06: add al, 0x48; lea edx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eef6: add al, 0x48; lea edx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000459ea6: add al, 0x48; lea edx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597fc: add al, 0x48; lea edx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041ea64: add al, 0x48; lea edx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000459784: add al, 0x48; lea edx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c7c4: add al, 0x48; lea edx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041ec46: add al, 0x48; lea edx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000043b5cc: add al, 0x48; mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x00000000004355e4: add al, 0x48; xor eax, eax; ret; 
0x00000000004225a1: add al, 0x49; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000043b612: add al, 0x4c; cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000436367: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000407a48: add al, 0x56; add dword ptr [rax], eax; nop dword ptr [rax]; ret; 
0x000000000042b4d7: add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000420757: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000046088c: add al, 0x75; fld dword ptr [rbx + 0x7505087a]; rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000041ebde: add al, 0x75; leave; ret; 
0x000000000041eb74: add al, 0x75; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000423b5c: add al, 0x7d; cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423f0c: add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x000000000045780f: add al, 0x80; mov qword ptr [rdx + 0x40], rsi; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577dd: add al, 0x80; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x000000000040fe5c: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000043603a: add al, 0x81; je 0x36020; ret; 
0x000000000042990b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000436036: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x000000000042aee3: add al, 0x81; sub eax, edx; ret; 
0x000000000040fdac: add al, 0x82; add rax, rdx; jmp rax; 
0x00000000004296c7: add al, 0x82; sub eax, ecx; ret; 
0x000000000043d30a: add al, 0x83; add rax, rbx; jmp rax; 
0x0000000000426f8f: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b4f: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042727b: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044e39b: add al, 0x83; ret; 
0x000000000045ca6a: add al, 0x85; sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000405a88: add al, 0x86; add rax, rsi; jmp rax; 
0x000000000045d9b8: add al, 0x87; ret; 
0x000000000045db96: add al, 0x87; vzeroupper; ret; 
0x000000000040193a: add al, 0x8d; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000404005: add al, 0x91; add rax, rcx; jmp rax; 
0x000000000040196d: add al, 0x96; add rax, rsi; jmp rax; 
0x0000000000438007: add al, 0x9a; add rax, rdx; jmp rax; 
0x0000000000401b34: add al, 0xa3; or al, byte ptr [rax]; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000415c9f: add al, 0xa8; add dword ptr [rsp + rbp - 0x77], esi; ret 0xc883; 
0x0000000000456b27: add al, 0xa8; or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x00000000004674ae: add al, 0xae; add rax, rsi; jmp rax; 
0x0000000000466c6d: add al, 0xaf; add rax, rdi; jmp rax; 
0x00000000004018f8: add al, 0xb7; add rax, rdi; jmp rax; 
0x000000000045c638: add al, 0xba; add rax, rdx; jmp rax; 
0x000000000040db53: add al, 0xc6; jmp rax; 
0x000000000044e53b: add al, 0xc7; add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000040e2b6: add al, 0xd0; jmp rax; 
0x000000000044afbc: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004488f9: add al, 0xe0; test rax, rax; je 0x48902; call rax; 
0x00000000004488ee: add al, 0xe6; lea rax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x0000000000478659: add al, 0xe8; test rax, rax; je 0x78662; call rax; 
0x0000000000455c93: add al, 0xe9; ret; 
0x00000000004556bb: add al, 0xf8; ret; 
0x0000000000426f87: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ce56: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c396: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042cfe6: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042eb8d: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000476cc1: add al, 0xf; test dword ptr [rsi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004765e1: add al, 0xf; test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004589a1: add al, 1; je 0x588f0; xor eax, eax; ret; 
0x0000000000458bfe: add al, 1; je 0x58bbd; mov eax, 0x83; ret; 
0x0000000000401c93: add al, 2; add byte ptr [rax], al; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x000000000043b5cf: add al, 2; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043aeb1: add al, 2; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000045393e: add al, 6; lea rsi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b824: add al, 7; add al, ch; hlt; ret; 
0x000000000043b8d9: add al, 7; add byte ptr [rax - 0x73], cl; mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x000000000043b882: add al, 7; add byte ptr [rsi + 0x48], ah; movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000042b64d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000040db4f: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000042c198: add al, 7; ret; 
0x000000000045b5ba: add al, 7; sub eax, ecx; ret; 
0x000000000045ae5a: add al, 7; sub eax, ecx; vzeroupper; ret; 
0x000000000045b25a: add al, 7; sub eax, ecx; xtest; jne 0x5b267; vzeroupper; ret; 
0x000000000042e96f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000401a07: add al, bh; jg 0x1a02; int1; mov eax, eax; ret; 
0x000000000040ee56: add al, bpl; ret; 
0x00000000004423f9: add al, byte ptr [r8]; add byte ptr [rax - 0x75], cl; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004705a8: add al, byte ptr [r8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004031bd: add al, byte ptr [rax + 0xf]; test byte ptr [rbx - 0x9fffffb], bh; ret 0xf20; 
0x00000000004253d1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x000000000043d275: add al, byte ptr [rax + rax]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x00000000004031b7: add al, byte ptr [rax - 0x7f]; stc; add byte ptr [rax], al; add al, byte ptr [rax + 0xf]; test byte ptr [rbx - 0x9fffffb], bh; ret 0xf20; 
0x000000000046097c: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041379b: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000046cadc: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004496ee: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0xbe; add rcx, rsi; jmp rcx; 
0x000000000043b8e0: add al, byte ptr [rax]; add byte ptr [rax + 0xda], bh; syscall; 
0x00000000004588cc: add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000045aad2: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000043812b: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x449b7; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000445dfb: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000445326: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004423fa: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000401c94: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0xaa0c2; pop rbx; ret; 
0x0000000000465113: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x1b9; 
0x0000000000477008: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x0000000000467df1: add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 5; ret 0x154; 
0x000000000042ac92: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f511: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044a2d2: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000046b4f9: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000417c8c: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000417eee: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000403d76: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca7: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000412b5c: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, r9d; syscall; 
0x0000000000417c36: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046833e: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000458ec0: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x00000000004394f6: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x000000000045d211: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000046c496: add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x3fb03], 0x40; jne 0x6cb50; ret; 
0x000000000043a3ff: add al, byte ptr [rax]; add byte ptr [rax], al; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x000000000045e49a: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000458261: add al, byte ptr [rax]; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000463939: add al, byte ptr [rax]; add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000046157a: add al, byte ptr [rax]; add byte ptr [rbp - 0x77], al; ret; 
0x000000000046e004: add al, byte ptr [rax]; add byte ptr [rcx + 0x148b48d8], cl; ret 0xb60f; 
0x0000000000418028: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x840f; 
0x0000000000458a13: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x850f; 
0x000000000044e31e: add al, byte ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3de9; 
0x000000000041e944: add al, byte ptr [rax]; add dh, dh; ret 0x7420; 
0x000000000044c6c9: add al, byte ptr [rax]; add dh, dh; ret 0xf40; 
0x000000000044e0cb: add al, byte ptr [rax]; add dh, dh; ret 0xf50; 
0x0000000000457ded: add al, byte ptr [rax]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000418b97: add al, byte ptr [rax]; cmp eax, 1; je 0x18ba8; add rsp, 8; ret; 
0x0000000000473132: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x0000000000425258: add al, byte ptr [rax]; lea rax, [rdi + 2]; ret; 
0x0000000000424a58: add al, byte ptr [rax]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000478651: add al, byte ptr [rax]; mov qword ptr [r14 + rbp*8], rdx; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x0000000000447f07: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000466c69: add al, byte ptr [rax]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000004705a9: add al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004674aa: add al, byte ptr [rax]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x0000000000418b83: add al, byte ptr [rax]; nop dword ptr [rax]; ret; 
0x000000000043c5c4: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; ret; 
0x0000000000415574: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x00000000004302f8: add al, byte ptr [rax]; ret; 
0x00000000004783d0: add al, byte ptr [rax]; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x000000000042fb28: add al, byte ptr [rax]; vzeroupper; ret; 
0x0000000000472973: add al, byte ptr [rax]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x000000000045d532: add al, byte ptr [rbp - 0x7c968a40]; ret 0xf40; 
0x00000000004592ea: add al, byte ptr [rbp - 4]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000457a8e: add al, byte ptr [rbx + 0x14740afa]; mov eax, esi; ret; 
0x0000000000409dd8: add al, byte ptr [rcx - 0x42]; sldt word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000407406: add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x000000000045d1d6: add al, byte ptr [rdx + rdx*8 - 0x1d7cf98c]; pcmpeqb mm2, qword ptr [rax]; ret; 
0x000000000046b563: add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000004592e8: add al, ch; add al, byte ptr [rbp - 4]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000464577: add al, ch; and eax, dword ptr [rbp + 0x3948fffb]; ret; 
0x0000000000418808: add al, ch; bnd ja 0x187cb; jmp qword ptr [rsi - 0x70]; 
0x000000000045d426: add al, ch; clc; ja 0x5d464; ret 0x117e; 
0x0000000000460290: add al, ch; cmp al, cl; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000046e590: add al, ch; cmp bl, dh; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004088b0: add al, ch; cmp dh, byte ptr [rsi - 0x3fce0001]; ret; 
0x0000000000436710: add al, ch; fcmovbe st(0), st(7); cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000046cdee: add al, ch; fdivr st(5), st(0); cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442d0c: add al, ch; ficom word ptr [rcx]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000044330c: add al, ch; fimul word ptr [rbx]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000046e10f: add al, ch; fistp dword ptr [rbp - 7]; jmp qword ptr [rsi + 0x66]; 
0x000000000046000b: add al, ch; fistp qword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000046170c: add al, ch; fisub word ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000043b826: add al, ch; hlt; ret; 
0x0000000000417f26: add al, ch; inc byte ptr fs:[rcx]; add byte ptr [rcx + 0x44c789ea], cl; mov esi, esi; mov eax, 0xea; syscall; 
0x000000000043b6a9: add al, ch; int1; adc edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000436fc4: add al, ch; iretd; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000470428: add al, ch; jb 0x703f2; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000043c76b: add al, ch; jg 0x3c7e6; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000047074f: add al, ch; jnp 0x7070f; cld; jmp qword ptr [rsi + 0x66]; 
0x00000000004657ca: add al, ch; jo 0x657f3; std; call qword ptr [rbp + 0x48]; 
0x0000000000458870: add al, ch; jp 0x5882a; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045043d: add al, ch; lodsd eax, dword ptr [rsi]; cmp bh, bl; jmp qword ptr [rsi + 0x66]; 
0x0000000000459088: add al, ch; mov dl, 0x57; add byte ptr [rax], al; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000443a2b: add al, ch; mov edi, 0xe8fffc04; pop rdx; jae 0x43a34; jmp qword ptr [rsi + 0x2e]; 
0x0000000000469583: add al, ch; mov esi, 0x8b4cffff; call 0x41d7a; jmp qword ptr [rsi + 0xf]; 
0x0000000000456fc7: add al, ch; movabs dword ptr [0x894cfe8944fffbbc], eax; out dx, eax; call qword ptr [rbx + 0x18]; 
0x000000000041a0eb: add al, ch; out dx, eax; mov bh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000040c94d: add al, ch; pop rbp; sbb al, 1; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000441b90: add al, ch; pop rdx; and edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x000000000046e578: add al, ch; push rdx; fdivp st(4); jmp qword ptr [rsi - 0x70]; 
0x0000000000401738: add al, ch; ret 0x8e; 
0x0000000000408b58: add al, ch; ret 0xf0; 
0x0000000000403c70: add al, ch; ret 0xffd3; 
0x000000000040ee57: add al, ch; ret; 
0x00000000004789ce: add al, ch; sbb al, 0xb5; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046ffd0: add al, ch; sbb bh, byte ptr [rdi]; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000441c3c: add al, ch; scasb al, byte ptr [rdi]; and bh, ah; jmp qword ptr [rsi + 0x66]; 
0x00000000004606ec: add al, ch; scasb al, byte ptr [rdi]; ret; 
0x000000000044503f: add al, ch; stosd dword ptr [rdi], eax; out dx, al; sti; jmp qword ptr [rsi + 0x66]; 
0x000000000043e4c0: add al, ch; sub bl, byte ptr [rdx - 4]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004414a8: add al, ch; sub dil, spl; jmp qword ptr [rsi - 0x70]; 
0x000000000046e244: add al, ch; xchg cl, ah; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000439904: add al, ch; xchg esi, eax; xor esi, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000477887: add al, ch; xor edx, dword ptr [rip - 0x76b70002]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046b736: add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x0000000000451b07: add ax, word ptr [rax]; add byte ptr [rax - 0x90043], al; jmp qword ptr [rax]; 
0x000000000046b561: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x0000000000458ebd: add bh, al; add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x00000000004533d9: add bh, al; and al, 0x30; and byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000453bd6: add bh, al; and al, 0x30; and byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040d675: add bh, al; and al, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x000000000040bd19: add bh, al; test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000408aef: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000410fc2: add bh, bh; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000044ab11: add bh, bh; jmp qword ptr [rsi + 0x66]; 
0x00000000004110cb: add bh, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000402fef: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000475383: add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x0000000000466e32: add bh, bh; ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000046b540: add bh, byte ptr [rax + 1]; ret; 
0x0000000000408779: add bh, byte ptr [rax - 1]; pop rbx; ret; 
0x0000000000437d33: add bh, byte ptr [rax - 1]; ret; 
0x00000000004244af: add bh, ch; jmp qword ptr [rsi + 0x66]; 
0x0000000000403185: add bh, dh; ret 0; 
0x0000000000435ad0: add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000043b63d: add bl, ch; cmovs ebp, dword ptr [rcx]; ret; 
0x0000000000414356: add bl, ch; lodsd eax, dword ptr [rsi]; nop dword ptr [rax]; ret; 
0x0000000000436a26: add bl, ch; ret; 
0x000000000045a4f1: add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x000000000045d44f: add bl, dh; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043501f: add bl, dh; bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000045a11f: add bl, dh; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004370ef: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x00000000004370cf: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004377cf: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377bf: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000043539f: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000043538f: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043537f: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000043536f: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377df: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000042452f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045db9f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x00000000004242af: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242bf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242cf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045a98f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000045a99f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000045da1f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da2f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da3f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da4f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045de7f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045d9b1: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045db8f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000045b5af: add bl, dh; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000437096: add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000434ddf: add bl, dh; bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000434dcf: add bl, dh; bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000434daf: add bl, dh; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000430f0f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f1f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f2f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f3f: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045ceaf: add bl, dh; bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000045a1af: add bl, dh; bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042404f: add bl, dh; bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000043555f: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043556f: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379df: add bl, dh; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379bf: add bl, dh; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000042ce4f: add bl, dh; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000473133: add bl, dh; divps xmm0, xmmword ptr [rip + 0x218c0]; ret; 
0x00000000004308ef: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043090f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043098f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043094f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043096f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000430a2f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004258af: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308df: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043537e: add bl, sil; bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000045db9e: add bl, sil; bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000045db8e: add bl, sil; bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x0000000000434dae: add bl, sil; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000430f0e: add bl, sil; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceae: add bl, sil; bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000043555e: add bl, sil; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004379de: add bl, sil; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004308ee: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043090e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043098e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043096e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045d56e: add bpl, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000470d44: add byte ptr [r11 + 0x48], r11b; add eax, dword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000040e079: add byte ptr [r11 - 0x78f0d008], r8b; mov esp, 0x8900000c; ret 0xc083; 
0x000000000043b651: add byte ptr [r8 + 0x39], r9b; ret; 
0x000000000043915c: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000448334: add byte ptr [r8 - 0x77], r9b; ret; 
0x000000000046a70c: add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000041e9dd: add byte ptr [r8], al; cmovne rax, rdx; ret; 
0x00000000004696cf: add byte ptr [r8], r8b; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000045ea5b: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000045e8fb: add byte ptr [r9 + rdi - 0x80], sil; cmp eax, 0x47172; add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042ba6e: add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000043c089: add byte ptr [rax + 0x15], bh; syscall; 
0x0000000000417fcf: add byte ptr [rax + 0x16], bh; ret; 
0x000000000043947f: add byte ptr [rax + 0x1c], bh; syscall; 
0x000000000043947f: add byte ptr [rax + 0x1c], bh; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x000000000046b452: add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000044e835: add byte ptr [rax + 0x21], cl; ret 0xf983; 
0x0000000000418467: add byte ptr [rax + 0x23], bh; ret; 
0x0000000000470c2f: add byte ptr [rax + 0x26], bh; syscall; 
0x0000000000470c2f: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x0000000000470c2e: add byte ptr [rax + 0x26], dil; syscall; 
0x0000000000470c2e: add byte ptr [rax + 0x26], dil; syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x0000000000437d8f: add byte ptr [rax + 0x27], bh; syscall; 
0x0000000000437d8f: add byte ptr [rax + 0x27], bh; syscall; ret; 
0x0000000000460b50: add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x00000000004609b5: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000040176f: add byte ptr [rax + 0x29], cl; ret; 
0x000000000045e342: add byte ptr [rax + 0x39480000], al; ret; 
0x000000000045431d: add byte ptr [rax + 0x39], cl; bnd jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453754: add byte ptr [rax + 0x39], cl; bnd jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040dbf3: add byte ptr [rax + 0x39], cl; bnd jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043927d: add byte ptr [rax + 0x39], cl; clc; jb 0x39290; xor eax, eax; ret; 
0x000000000046dd2f: add byte ptr [rax + 0x39], cl; jg 0x6dd5c; je 0x6dd40; ret; 
0x0000000000466219: add byte ptr [rax + 0x39], cl; ret 0x5172; 
0x000000000041379d: add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000419c47: add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000044e541: add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000041766c: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040c5aa: add byte ptr [rax + 0x39], cl; ret; 
0x00000000004760b0: add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000045ff81: add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000464516: add byte ptr [rax + 0x39], cl; stc; je 0x64520; ret; 
0x0000000000439069: add byte ptr [rax + 0x48], bh; syscall; 
0x000000000044a71f: add byte ptr [rax + 0x5b3513d], al; add byte ptr [rax], al; je 0x4a740; mov eax, 0x13e; syscall; 
0x000000000043a68f: add byte ptr [rax + 0x63], bh; syscall; 
0x000000000043a68f: add byte ptr [rax + 0x63], bh; syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x0000000000403848: add byte ptr [rax + 0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x000000000040feb0: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000041e264: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000404002: add byte ptr [rax + 0x63], cl; add al, 0x91; add rax, rcx; jmp rax; 
0x0000000000438004: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000004018f5: add byte ptr [rax + 0x63], cl; add al, 0xb7; add rax, rdi; jmp rax; 
0x000000000045c635: add byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x000000000040b396: add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000455843: add byte ptr [rax + 0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x00000000004496f0: add byte ptr [rax + 0x63], cl; or al, 0xbe; add rcx, rsi; jmp rcx; 
0x00000000004576af: add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000004740a3: add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000040ae04: add byte ptr [rax + 0x63], cl; ret; 
0x000000000043a68e: add byte ptr [rax + 0x63], dil; syscall; 
0x000000000043a68e: add byte ptr [rax + 0x63], dil; syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000043878f: add byte ptr [rax + 0x6d2e13d], al; add byte ptr [rax], al; je 0x387b0; mov eax, 1; syscall; 
0x00000000004386ef: add byte ptr [rax + 0x6d3813d], al; add byte ptr [rax], al; je 0x38710; xor eax, eax; syscall; 
0x000000000041ec6b: add byte ptr [rax + 0x74], al; leave; ret; 
0x00000000004253cf: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000041e9ac: add byte ptr [rax + 0x75], al; fadd qword ptr [rax - 0x72b7fd1a]; add eax, 0x5026; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000042573f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000041420e: add byte ptr [rax + 0x8478b48], dl; cmp rax, qword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x000000000045e77f: add byte ptr [rax + 0x8f], bh; syscall; 
0x000000000045e77f: add byte ptr [rax + 0x8f], bh; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7af: add byte ptr [rax + 0x90], bh; syscall; 
0x000000000045e7af: add byte ptr [rax + 0x90], bh; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7df: add byte ptr [rax + 0x91], bh; syscall; 
0x000000000045e7df: add byte ptr [rax + 0x91], bh; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e80f: add byte ptr [rax + 0x92], bh; syscall; 
0x000000000045e80f: add byte ptr [rax + 0x92], bh; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e83f: add byte ptr [rax + 0x93], bh; syscall; 
0x000000000045e83f: add byte ptr [rax + 0x93], bh; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x000000000043944f: add byte ptr [rax + 0xa], bh; syscall; 
0x000000000043944f: add byte ptr [rax + 0xa], bh; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000417f4f: add byte ptr [rax + 0xba], bh; syscall; 
0x000000000043926f: add byte ptr [rax + 0xc], bh; syscall; 
0x000000000043926e: add byte ptr [rax + 0xc], dil; syscall; 
0x0000000000458923: add byte ptr [rax + 0xca], bh; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417c3e: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458f42: add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x0000000000417cdc: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000417c8f: add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x000000000044a5d7: add byte ptr [rax + 0xd], bh; syscall; 
0x000000000043b8e2: add byte ptr [rax + 0xda], bh; syscall; 
0x0000000000437cff: add byte ptr [rax + 0xe4], bh; syscall; 
0x0000000000403cbd: add byte ptr [rax + 0xe7], bh; syscall; 
0x0000000000401194: add byte ptr [rax + 0xe], bh; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000417ea4: add byte ptr [rax + 0xe], bh; syscall; 
0x00000000004754ad: add byte ptr [rax + 0xf08323c], al; test dword ptr [rbx], edx; sar al, 0xff; mov rax, qword ptr [rax]; ret; 
0x0000000000414e2e: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x00000000004099b7: add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x000000000043fa6f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480173; ret; 
0x0000000000417b46: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000043535f: add byte ptr [rax + 0xf], cl; stosd dword ptr [rdi], eax; tzcnt eax, eax; ret; 
0x0000000000472c9b: add byte ptr [rax + 1], bh; add rsp, 0x38; ret; 
0x0000000000403d79: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403caa: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x75841]; syscall; 
0x000000000046b55c: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000478acb: add byte ptr [rax + 1], bh; pop rbx; ret; 
0x00000000004588ce: add byte ptr [rax + 1], bh; ret; 
0x000000000045aad4: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000461460: add byte ptr [rax + 1], cl; ret 0xba41; 
0x0000000000404de3: add byte ptr [rax + 1], cl; ret; 
0x000000000046b632: add byte ptr [rax + 2], bh; ret; 
0x0000000000438fcf: add byte ptr [rax + 3], bh; syscall; 
0x0000000000438fcf: add byte ptr [rax + 3], bh; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x000000000044975d: add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x000000000043e327: add byte ptr [rax + 8], bh; ret; 
0x000000000043882f: add byte ptr [rax + 8], bh; syscall; 
0x000000000043882f: add byte ptr [rax + 8], bh; syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x000000000041c5bf: add byte ptr [rax + 9], cl; ret 0x8d49; 
0x000000000043817c: add byte ptr [rax + rax], al; add cl, ch; ret; 
0x0000000000417b44: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000043d26e: add byte ptr [rax + rax], al; lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000439299: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041d7e0: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041baa9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041877f: add byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043915d: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044bd54: add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004593b9: add byte ptr [rax - 0x15], al; ret; 
0x000000000041ecc7: add byte ptr [rax - 0x188af71b], al; lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x000000000045c755: add byte ptr [rax - 0x1d8af71a], al; lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x0000000000436765: add byte ptr [rax - 0x1d8af71a], al; lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000041ee85: add byte ptr [rax - 0x248af71a], al; lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x000000000041eb65: add byte ptr [rax - 0x248af71a], al; lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x00000000004584cb: add byte ptr [rax - 0x2d], cl; call 0xffffffff8414867b; ret 0xfffb; 
0x0000000000435675: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x000000000041884e: add byte ptr [rax - 0x38f874b8], dl; add eax, 0x8c92b; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000401199: add byte ptr [rax - 0x39], cl; add al, 0x24; and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000041720a: add byte ptr [rax - 0x39], cl; add eax, 0x90982; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040a8ae: add byte ptr [rax - 0x39], cl; ret 0x6520; 
0x000000000045557e: add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x000000000046ff95: add byte ptr [rax - 0x39], cl; ret 0xd230; 
0x000000000040876f: add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000041ef63: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000043c437: add byte ptr [rax - 0x39], cl; ret; 
0x000000000044a50f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004363af: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x000000000043928f: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041ba9f: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043856f: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000044a4e7: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000455577: add byte ptr [rax - 0x39], cl; shl dword ptr [rax], 0x65; add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x0000000000408912: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000044801c: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000046b537: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000436771: add byte ptr [rax - 0x428afb1b], al; ret; 
0x000000000046b558: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000041eb71: add byte ptr [rax - 0x528afb1b], al; ret; 
0x00000000004756ee: add byte ptr [rax - 0x5e1f00d], dl; ret; 
0x000000000040e227: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000045c867: add byte ptr [rax - 0x72b7ef1b], al; adc eax, 0xfffc714e; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041e6ff: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x1076; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e8ff: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xe36; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e7ff: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xf76; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000046827d: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000046823e: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000041ed31: add byte ptr [rax - 0x73], cl; adc eax, 0x11667; cmove rax, rdx; ret; 
0x0000000000436741: add byte ptr [rax - 0x73], cl; adc eax, 0x1557; cmove rax, rdx; ret; 
0x000000000045c62e: add byte ptr [rax - 0x73], cl; adc eax, 0x31b7a; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000041e892: add byte ptr [rax - 0x73], cl; adc eax, 0x35a6; cmove rax, rdx; ret; 
0x000000000041e792: add byte ptr [rax - 0x73], cl; adc eax, 0x36b6; cmove rax, rdx; ret; 
0x000000000041e692: add byte ptr [rax - 0x73], cl; adc eax, 0x37b6; cmove rax, rdx; ret; 
0x000000000043812d: add byte ptr [rax - 0x73], cl; adc eax, 0x449b7; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000437ffd: add byte ptr [rax - 0x73], cl; adc eax, 0x44a0b; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000041e9b9: add byte ptr [rax - 0x73], cl; adc eax, 0x507f; cmovne rax, rdx; ret; 
0x000000000041eae1: add byte ptr [rax - 0x73], cl; adc eax, 0x6827; cmove rax, rdx; ret; 
0x000000000045c731: add byte ptr [rax - 0x73], cl; adc eax, 0x8c7; cmove rax, rdx; ret; 
0x000000000041ebb3: add byte ptr [rax - 0x73], cl; adc eax, 0xcc65; cmovne rax, rdx; ret; 
0x000000000041eca8: add byte ptr [rax - 0x73], cl; adc eax, 0xe6d0; cmove rax, rdx; ret; 
0x000000000041f6ae: add byte ptr [rax - 0x73], cl; adc eax, 0xfffffcea; cmove rax, rdx; ret; 
0x0000000000436363: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000044e397: add byte ptr [rax - 0x73], cl; add al, 0x83; ret; 
0x000000000042b64a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000445dfd: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000045c7f0: add byte ptr [rax - 0x73], cl; add eax, 0x1188; cmovne rax, rdx; ret; 
0x000000000041ed6d: add byte ptr [rax - 0x73], cl; add eax, 0x11d3b; cmove rax, rdx; ret; 
0x000000000041ee1f: add byte ptr [rax - 0x73], cl; add eax, 0x120b9; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ee0d: add byte ptr [rax - 0x73], cl; add eax, 0x1224b; cmove rax, rdx; ret; 
0x000000000045978b: add byte ptr [rax - 0x73], cl; add eax, 0x12bd; cmove rax, rdx; ret; 
0x000000000041ee9f: add byte ptr [rax - 0x73], cl; add eax, 0x13019; test edx, 0x40000000; je 0x1ee7f; ret; 
0x0000000000459803: add byte ptr [rax - 0x73], cl; add eax, 0x1575; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041e85b: add byte ptr [rax - 0x73], cl; add eax, 0x161d; cmovne rax, rdx; ret; 
0x000000000041ef0f: add byte ptr [rax - 0x73], cl; add eax, 0x16409; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000041eefd: add byte ptr [rax - 0x73], cl; add eax, 0x166db; cmove rax, rdx; ret; 
0x000000000041e75b: add byte ptr [rax - 0x73], cl; add eax, 0x172d; cmovne rax, rdx; ret; 
0x000000000045c7cb: add byte ptr [rax - 0x73], cl; add eax, 0x175d; cmove rax, rdx; ret; 
0x000000000041e65b: add byte ptr [rax - 0x73], cl; add eax, 0x182d; cmovne rax, rdx; ret; 
0x0000000000459ebf: add byte ptr [rax - 0x73], cl; add eax, 0x21c9; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041e8b9: add byte ptr [rax - 0x73], cl; add eax, 0x24bf; cmovne rax, rdx; ret; 
0x0000000000459ead: add byte ptr [rax - 0x73], cl; add eax, 0x24cb; cmove rax, rdx; ret; 
0x000000000041e7b9: add byte ptr [rax - 0x73], cl; add eax, 0x25cf; cmovne rax, rdx; ret; 
0x000000000041e6b9: add byte ptr [rax - 0x73], cl; add eax, 0x26cf; cmovne rax, rdx; ret; 
0x000000000041e8e9: add byte ptr [rax - 0x73], cl; add eax, 0x2d0f; cmovne rax, rdx; ret; 
0x000000000041e7e9: add byte ptr [rax - 0x73], cl; add eax, 0x2e1f; cmovne rax, rdx; ret; 
0x000000000041e6e9: add byte ptr [rax - 0x73], cl; add eax, 0x2f1f; cmovne rax, rdx; ret; 
0x000000000041e966: add byte ptr [rax - 0x73], cl; add eax, 0x4a82; cmovne rax, rdx; ret; 
0x000000000041e9d8: add byte ptr [rax - 0x73], cl; add eax, 0x4bd0; cmovne rax, rdx; ret; 
0x000000000041ea04: add byte ptr [rax - 0x73], cl; add eax, 0x5214; cmovne rax, rdx; ret; 
0x000000000041e980: add byte ptr [rax - 0x73], cl; add eax, 0x54b8; cmove rax, rdx; ret; 
0x000000000041ea90: add byte ptr [rax - 0x73], cl; add eax, 0x57a8; cmovne rax, rdx; ret; 
0x000000000041ea6b: add byte ptr [rax - 0x73], cl; add eax, 0x5add; cmove rax, rdx; ret; 
0x000000000043d27f: add byte ptr [rax - 0x73], cl; add eax, 0x689b9; ret; 
0x000000000045c76f: add byte ptr [rax - 0x73], cl; add eax, 0x709; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000043aeb9: add byte ptr [rax - 0x73], cl; add eax, 0x70d8f; ret; 
0x000000000041eb7f: add byte ptr [rax - 0x73], cl; add eax, 0x8369; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000046ba8d: add byte ptr [rax - 0x73], cl; add eax, 0xb; cmove rax, rdx; ret; 
0x000000000041ebe7: add byte ptr [rax - 0x73], cl; add eax, 0xc7d1; test edx, 0x40000000; je 0x1ebc9; ret; 
0x00000000004597b0: add byte ptr [rax - 0x73], cl; add eax, 0xd08; cmovne rax, rdx; ret; 
0x000000000041ec5f: add byte ptr [rax - 0x73], cl; add eax, 0xd2d9; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ec4d: add byte ptr [rax - 0x73], cl; add eax, 0xd4fb; cmove rax, rdx; ret; 
0x000000000041e909: add byte ptr [rax - 0x73], cl; add eax, 0xdef; cmovne rax, rdx; ret; 
0x000000000041ecdf: add byte ptr [rax - 0x73], cl; add eax, 0xe139; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000041e809: add byte ptr [rax - 0x73], cl; add eax, 0xeff; cmovne rax, rdx; ret; 
0x000000000043677f: add byte ptr [rax - 0x73], cl; add eax, 0xfd9; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000041e709: add byte ptr [rax - 0x73], cl; add eax, 0xfff; cmovne rax, rdx; ret; 
0x000000000045c9fc: add byte ptr [rax - 0x73], cl; add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x28; call rbx; 
0x0000000000460737: add byte ptr [rax - 0x73], cl; call 0x4162489b; pop rbp; pop rbp; ret; 
0x0000000000466c63: add byte ptr [rax - 0x73], cl; cmp eax, 0x28775; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000043d270: add byte ptr [rax - 0x73], cl; cmp eax, 0x40208; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x000000000044ace7: add byte ptr [rax - 0x73], cl; cmp eax, 0x614f1; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x00000000004088a9: add byte ptr [rax - 0x73], cl; cmp eax, 0x7193c; call 0x3ef0; xor eax, eax; ret; 
0x0000000000407c7e: add byte ptr [rax - 0x73], cl; cmp eax, 0x720fa; mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004018ee: add byte ptr [rax - 0x73], cl; cmp eax, 0x777ca; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000469646: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x69658; ret; 
0x0000000000464035: add byte ptr [rax - 0x73], cl; js 0x64056; mov eax, 0xca; syscall; 
0x000000000046f2dc: add byte ptr [rax - 0x73], cl; js 0x6f2fd; mov eax, 0xca; syscall; 
0x000000000046f4f8: add byte ptr [rax - 0x73], cl; js 0x6f519; mov eax, 0xca; syscall; 
0x0000000000472a51: add byte ptr [rax - 0x73], cl; js 0x72a72; mov eax, 0xca; syscall; 
0x0000000000403425: add byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000043b8db: add byte ptr [rax - 0x73], cl; mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x0000000000455896: add byte ptr [rax - 0x73], cl; or eax, 0x38506; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000414504: add byte ptr [rax - 0x73], cl; or eax, 0x92194; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000042eb85: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000040863b: add byte ptr [rax - 0x73], cl; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78f8c], eax; ret 0xfff0; 
0x000000000043995f: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000044ef51: add byte ptr [rax - 0x73], cl; push rsi; add al, 0x83; ret; 
0x000000000047785f: add byte ptr [rax - 0x73], cl; sub byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbp + 0x48], 0x8b; push rax; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000045702f: add byte ptr [rax - 0x73], cl; test al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004088a2: add byte ptr [rax - 0x73], cl; xor eax, 0x71936; lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x0000000000403d7e: add byte ptr [rax - 0x73], cl; xor eax, 0x75742; syscall; 
0x0000000000403caf: add byte ptr [rax - 0x73], cl; xor eax, 0x75841; syscall; 
0x000000000046fc77: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000466a48: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000401a6c: add byte ptr [rax - 0x75], cl; adc eax, 0xaa1cc; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000472bf5: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000453946: add byte ptr [rax - 0x75], cl; add al, 0xc6; jmp rax; 
0x000000000040e2b3: add byte ptr [rax - 0x75], cl; add al, 0xd0; jmp rax; 
0x00000000004556b8: add byte ptr [rax - 0x75], cl; add al, 0xf8; ret; 
0x000000000045c6ef: add byte ptr [rax - 0x75], cl; add eax, 0x4f859; ret; 
0x000000000045c6df: add byte ptr [rax - 0x75], cl; add eax, 0x4f861; ret; 
0x000000000045c6cf: add byte ptr [rax - 0x75], cl; add eax, 0x4f869; ret; 
0x000000000045c6bf: add byte ptr [rax - 0x75], cl; add eax, 0x4f871; ret; 
0x000000000045c6af: add byte ptr [rax - 0x75], cl; add eax, 0x4f879; ret; 
0x000000000045c69f: add byte ptr [rax - 0x75], cl; add eax, 0x4f881; ret; 
0x000000000045c68f: add byte ptr [rax - 0x75], cl; add eax, 0x4f889; ret; 
0x000000000045c67f: add byte ptr [rax - 0x75], cl; add eax, 0x4f891; ret; 
0x000000000045c66f: add byte ptr [rax - 0x75], cl; add eax, 0x4f899; ret; 
0x000000000045c65f: add byte ptr [rax - 0x75], cl; add eax, 0x4f8a1; ret; 
0x000000000045c64f: add byte ptr [rax - 0x75], cl; add eax, 0x4f8a9; ret; 
0x000000000044771f: add byte ptr [rax - 0x75], cl; add eax, 0x648f9; ret; 
0x000000000043b0df: add byte ptr [rax - 0x75], cl; add eax, 0x6bc61; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000043e43f: add byte ptr [rax - 0x75], cl; add eax, 0x6db99; ret; 
0x000000000043e42f: add byte ptr [rax - 0x75], cl; add eax, 0x6dba1; ret; 
0x000000000041712f: add byte ptr [rax - 0x75], cl; add eax, 0x8da09; ret; 
0x0000000000408e4f: add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax - 0x7d]; in eax, dx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000043c4f7: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000438750: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x0000000000411fcc: add byte ptr [rax - 0x75], cl; and cl, r13b; ret; 
0x0000000000401a73: add byte ptr [rax - 0x75], cl; je 0x1a9c; sbb byte ptr [rbx + 0x4814247c], cl; mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000453745: add byte ptr [rax - 0x75], cl; je 0x5376e; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000045430e: add byte ptr [rax - 0x75], cl; je 0x54337; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040d4a4: add byte ptr [rax - 0x75], cl; je 0xd4cd; or byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000040dbe4: add byte ptr [rax - 0x75], cl; je 0xdc0d; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004388d1: add byte ptr [rax - 0x75], cl; jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x000000000040d87f: add byte ptr [rax - 0x75], cl; jl 0xd8a8; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000046a34b: add byte ptr [rax - 0x75], cl; movabs al, byte ptr [0x348087d8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x0000000000472f82: add byte ptr [rax - 0x75], cl; or al, 0x24; add rsp, 0x38; mov rax, rcx; ret; 
0x000000000045fc3f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x000000000046968f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046c4f7: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000044d03f: add byte ptr [rax - 0x75], cl; or cl, byte ptr [rcx - 0x77]; ror dword ptr [rbp - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4d08; 
0x0000000000401758: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000403fb9: add byte ptr [rax - 0x75], cl; pop rsp; ret; 
0x00000000004189a7: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000439bef: add byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0x7401; 
0x000000000047409f: add byte ptr [rax - 0x75], cl; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000414f67: add byte ptr [rax - 0x75], cl; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000041721f: add byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x75], r9b; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000445328: add byte ptr [rax - 0x75], cl; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004423fc: add byte ptr [rax - 0x75], cl; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000044332d: add byte ptr [rax - 0x75], cl; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000456fef: add byte ptr [rax - 0x75], cl; xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x00000000004106ae: add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000436ae7: add byte ptr [rax - 0x75], cl; xor dh, byte ptr [rbx + rdi - 0x75]; adc byte ptr [r11 + 0x418901c0], al; adc byte ptr [rdi], cl; nop; ret; 
0x000000000044a2e2: add byte ptr [rax - 0x77], cl; adc eax, 0x5c14e; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x0000000000472bec: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000044a2db: add byte ptr [rax - 0x77], cl; add eax, 0x5c14d; mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000041890f: add byte ptr [rax - 0x77], cl; add eax, 0x8c8a1; ret; 
0x000000000041888c: add byte ptr [rax - 0x77], cl; add eax, 0x8c8ac; ret; 
0x000000000041885c: add byte ptr [rax - 0x77], cl; add eax, 0x8c8e4; ret; 
0x000000000041881c: add byte ptr [rax - 0x77], cl; add eax, 0x8c92c; ret; 
0x0000000000401c96: add byte ptr [rax - 0x77], cl; add eax, 0xaa0c2; pop rbx; ret; 
0x000000000046547f: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x64d70; add rsp, 0xd8; ret; 
0x000000000045eb14: add byte ptr [rax - 0x77], cl; and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000449507: add byte ptr [rax - 0x77], cl; and byte ptr [r11 + r9*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000414177: add byte ptr [rax - 0x77], cl; call 0x844528e; pop rbx; pop rbp; pop r12; ret; 
0x000000000041715f: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000407f0d: add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000407f82: add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000043ae6c: add byte ptr [rax - 0x77], cl; cmp eax, 0x70dfc; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x0000000000414613: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043c2b0: add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x0000000000418333: add byte ptr [rax - 0x77], cl; fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x000000000043b972: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000458e36: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000411bf4: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000045ef60: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x24e8; 
0x000000000045ef00: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x84e8; 
0x0000000000412e24: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000419eaf: add byte ptr [rax - 0x77], cl; fucompi st(0); push -0x14000023; ret 0xf66; 
0x0000000000458524: add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x0000000000464c2d: add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x0000000000448cd1: add byte ptr [rax - 0x77], cl; jae 0x48c56; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x0000000000419b16: add byte ptr [rax - 0x77], cl; je 0x19b3f; or al, ch; jmp rax; 
0x0000000000403c93: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000468287: add byte ptr [rax - 0x77], cl; nop; and byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000043b8d0: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; add eax, 0x70414; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000464409: add byte ptr [rax - 0x77], cl; or eax, 0x47e7f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041861a: add byte ptr [rax - 0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000465115: add byte ptr [rax - 0x77], cl; ret 0x1b9; 
0x000000000041085f: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000040bace: add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x000000000047700a: add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x000000000043bcaf: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000044e4cf: add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x000000000040342d: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000456f57: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000044e24f: add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x0000000000413330: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000041b64c: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041b9c4: add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000046b11f: add byte ptr [rax - 0x77], cl; ret 0x98e8; 
0x0000000000445e17: add byte ptr [rax - 0x77], cl; ret 0xb6eb; 
0x000000000046e0b6: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000417b36: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000453df5: add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x000000000046bd5d: add byte ptr [rax - 0x77], cl; ret 0xd8b; 
0x000000000043c2fb: add byte ptr [rax - 0x77], cl; ret 0xff85; 
0x00000000004032ef: add byte ptr [rax - 0x77], cl; ret; 
0x000000000042ed82: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x0000000000429c6f: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x00000000004465c9: add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x000000000046b60f: add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x0000000000472427: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x000000000043c417: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; ret 0xade8; 
0x00000000004696d1: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004783ca: add byte ptr [rax - 0x77], cl; sbb eax, 0x2f79e; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x000000000043b99f: add byte ptr [rax - 0x77], cl; sbb eax, 0x67a61; mov qword ptr fs:[0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000004032e7: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043af7e: add byte ptr [rax - 0x77], cl; xchg edi, eax; js 0x3af88; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004451d2: add byte ptr [rax - 0x77], cl; xchg esp, eax; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000474dfd: add byte ptr [rax - 0x7af0b7c6], al; imul edi, edi, 0xb948ffff; mov eax, 0xf; syscall; 
0x0000000000437a6f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000045f716: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp - 0x60]; pop rbx; pop rbp; pop r12; ret; 
0x000000000046b507: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp - 0xf]; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x0000000000460484: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x0000000000439f2f: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39f40; ret; 
0x0000000000439f4f: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39f60; ret; 
0x0000000000457036: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000439f6f: add byte ptr [rax - 0x7b], cl; push qword ptr [rbx + rcx - 0x17]; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000405f37: add byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rsi*2 - 0x18]; xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x000000000046b627: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x13], cl; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000475593: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000046c341: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rdx + 0x4c], 0x39; call 0xffffffff8b5097c3; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000043c9ed: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or byte ptr [rcx + 0x40893], cl; add dh, dh; ret 0x7402; 
0x0000000000464507: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rsi*8 + 0x31], 0xc0; ret; 
0x000000000046dc28: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000040100a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000467df3: add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 5; ret 0x154; 
0x000000000044e537: add byte ptr [rax - 0x7d], cl; call 0x3005ac43; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000041c8d1: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rax + rcx + 0x48]; add esp, 8; ret; 
0x0000000000423e5d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x1c], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423c32: add byte ptr [rax - 0x7d], cl; cli; ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000043ae73: add byte ptr [rax - 0x7d], cl; cmp eax, 0x70ddc; add byte ptr [rdx + riz + 0x48], dh; lea eax, [rip + 0x70dcb]; ret; 
0x0000000000449090: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000041cea4: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000041bc27: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000435c4f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000004368bf: add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x0000000000435b3f: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000043601f: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x0000000000435987: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004299f4: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041c706: add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x00000000004078fc: add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x000000000043e2f7: add byte ptr [rax - 0x7d], cl; ret 0xc701; 
0x0000000000459a48: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000429a49: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000434637: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004359b7: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000405018: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042e8af: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000043571f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000442288: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000442e8e: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044a2d4: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000418d3a: add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000477d97: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x74]; 
0x00000000004110fb: add byte ptr [rax - 0x80], al; std; add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x0000000000417cef: add byte ptr [rax - 0x80], al; test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000417cef: add byte ptr [rax - 0x80], al; test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000458c77: add byte ptr [rax - 0x80], al; test byte ptr [rdi + 0x31d23145], 0xd2; mov eax, 0xca; syscall; 
0x0000000000451b0a: add byte ptr [rax - 0x90043], al; jmp qword ptr [rax]; 
0x000000000044ab6d: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c0f: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000041281d: add byte ptr [rax - 1], bh; ret; 
0x0000000000468302: add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x000000000041a131: add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x000000000041d09e: add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000442291: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000417c3b: add byte ptr [rax], 0; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458e33: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000458521: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x00000000004465c6: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x000000000042471b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042473b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000044a71b: add byte ptr [rax], 0; add byte ptr [rax], al; cmp byte ptr [rip + 0x5b351], 0; je 0x4a740; mov eax, 0x13e; syscall; 
0x0000000000415cdb: add byte ptr [rax], 0; add byte ptr [rax], al; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x0000000000418463: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x23; ret; 
0x0000000000438fcb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000040a73b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, ecx; ret; 
0x000000000041650b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000004308db: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042fb0b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000041435b: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000004377cb: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377bb: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000043539b: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000043538b: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043536b: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377db: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x0000000000423b6b: add byte ptr [rax], 0; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000046fbbb: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000468343: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000457b27: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x00000000004428f8: add byte ptr [rax], 0; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000442401: add byte ptr [rax], 0; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000423a52: add byte ptr [rax], 0; add byte ptr [rdi + 0x68], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000045c136: add byte ptr [rax], ah; ret; 
0x0000000000403189: add byte ptr [rax], al; adc byte ptr [rdi + rsi - 9], dh; ret 0; 
0x00000000004031bb: add byte ptr [rax], al; add al, byte ptr [rax + 0xf]; test byte ptr [rbx - 0x9fffffb], bh; ret 0xf20; 
0x00000000004592e6: add byte ptr [rax], al; add al, ch; add al, byte ptr [rbp - 4]; dec dword ptr [rax - 0x77]; ret; 
0x000000000046028e: add byte ptr [rax], al; add al, ch; cmp al, cl; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000046e58e: add byte ptr [rax], al; add al, ch; cmp bl, dh; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000470426: add byte ptr [rax], al; add al, ch; jb 0x703f2; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000047074d: add byte ptr [rax], al; add al, ch; jnp 0x7070f; cld; jmp qword ptr [rsi + 0x66]; 
0x00000000004657c8: add byte ptr [rax], al; add al, ch; jo 0x657f3; std; call qword ptr [rbp + 0x48]; 
0x0000000000401736: add byte ptr [rax], al; add al, ch; ret 0x8e; 
0x0000000000419515: add byte ptr [rax], al; add al, ch; ret; 
0x00000000004606ea: add byte ptr [rax], al; add al, ch; scasb al, byte ptr [rdi]; ret; 
0x000000000046e242: add byte ptr [rax], al; add al, ch; xchg cl, ah; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000439902: add byte ptr [rax], al; add al, ch; xchg esi, eax; xor esi, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000046b734: add byte ptr [rax], al; add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000046b55f: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000004533d7: add byte ptr [rax], al; add bh, al; and al, 0x30; and byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000475381: add byte ptr [rax], al; add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x0000000000435ace: add byte ptr [rax], al; add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000414354: add byte ptr [rax], al; add bl, ch; lodsd eax, dword ptr [rsi]; nop dword ptr [rax]; ret; 
0x000000000045a4ef: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x00000000004377cd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377bd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000043539d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000043538d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043536d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377dd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000045da1d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045dc2d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045d9af: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000437094: add byte ptr [rax], al; add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004308dd: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045ea59: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042ba6c: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x0000000000418465: add byte ptr [rax], al; add byte ptr [rax + 0x23], bh; ret; 
0x0000000000437d8d: add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; 
0x0000000000437d8d: add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; ret; 
0x0000000000460b4e: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x00000000004609b3: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x00000000004502b5: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000044e53f: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000041766a: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000441db4: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004760ae: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000045ff7f: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000439067: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x000000000044a71d: add byte ptr [rax], al; add byte ptr [rax + 0x5b3513d], al; add byte ptr [rax], al; je 0x4a740; mov eax, 0x13e; syscall; 
0x00000000004576ad: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000465057: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004386ed: add byte ptr [rax], al; add byte ptr [rax + 0x6d3813d], al; add byte ptr [rax], al; je 0x38710; xor eax, eax; syscall; 
0x000000000041ec69: add byte ptr [rax], al; add byte ptr [rax + 0x74], al; leave; ret; 
0x000000000042573d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000045e77d: add byte ptr [rax], al; add byte ptr [rax + 0x8f], bh; syscall; 
0x000000000045e77d: add byte ptr [rax], al; add byte ptr [rax + 0x8f], bh; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x0000000000417f4d: add byte ptr [rax], al; add byte ptr [rax + 0xba], bh; syscall; 
0x0000000000458921: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417c3c: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458f40: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x0000000000417cda: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000417c8d: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x000000000044a5d5: add byte ptr [rax], al; add byte ptr [rax + 0xd], bh; syscall; 
0x0000000000403cbb: add byte ptr [rax], al; add byte ptr [rax + 0xe7], bh; syscall; 
0x0000000000401192: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000417eef: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000409edd: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x0000000000472c99: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x38; ret; 
0x0000000000403d77: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca8: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000478ac9: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; ret; 
0x000000000046b46c: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000046b630: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000438fcd: add byte ptr [rax], al; add byte ptr [rax + 3], bh; syscall; 
0x0000000000438fcd: add byte ptr [rax], al; add byte ptr [rax + 3], bh; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x000000000041c5bd: add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8d49; 
0x000000000041877d: add byte ptr [rax], al; add byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004584c9: add byte ptr [rax], al; add byte ptr [rax - 0x2d], cl; call 0xffffffff8414867b; ret 0xfffb; 
0x0000000000401197: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add al, 0x24; and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000417208: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x90982; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040a8ac: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x6520; 
0x000000000040876d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000041ef61: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000455575: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shl dword ptr [rax], 0x65; add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x0000000000408910: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000044801a: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000046b556: add byte ptr [rax], al; add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000004756ec: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; ret; 
0x000000000040e225: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041e6fd: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x1076; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e8fd: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xe36; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e7fd: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xf76; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000045c62c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x31b7a; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000042b648: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000041ee9d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x13019; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000045c76d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x709; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000041eb7d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8369; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000043677d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xfd9; test edx, 0x40000000; je 0x3675f; ret; 
0x0000000000464033: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x64056; mov eax, 0xca; syscall; 
0x000000000046f2da: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x6f2fd; mov eax, 0xca; syscall; 
0x000000000046f4f6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x6f519; mov eax, 0xca; syscall; 
0x0000000000472a4f: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x72a72; mov eax, 0xca; syscall; 
0x0000000000455894: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x38506; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000414502: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x92194; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000403d7c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x75742; syscall; 
0x0000000000403cad: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x75841; syscall; 
0x000000000046fc75: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000453bdc: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xc6; jmp rax; 
0x00000000004540bc: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xd0; jmp rax; 
0x000000000045c6ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f859; ret; 
0x000000000045c6dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f861; ret; 
0x000000000045c6cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f869; ret; 
0x000000000045c6bd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f871; ret; 
0x000000000045c6ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f879; ret; 
0x000000000045c69d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f881; ret; 
0x000000000045c68d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f889; ret; 
0x000000000045c67d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f891; ret; 
0x000000000045c66d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f899; ret; 
0x000000000045c65d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f8a1; ret; 
0x000000000045c64d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f8a9; ret; 
0x000000000044771d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x648f9; ret; 
0x000000000043e43d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x6db99; ret; 
0x000000000043e42d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x6dba1; ret; 
0x0000000000408e4d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax - 0x7d]; in eax, dx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000043c4f5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000411fca: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and cl, r13b; ret; 
0x0000000000453743: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0x5376e; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000045430c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0x54337; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040dbe2: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0xdc0d; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040d87d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jl 0xd8a8; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000401756: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000047409d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000041721d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x75], r9b; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x00000000004106ac: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x000000000041888a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c8ac; ret; 
0x000000000041885a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c8e4; ret; 
0x000000000041881a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c92c; ret; 
0x000000000046547d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x64d70; add rsp, 0xd8; ret; 
0x000000000041715d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000407f0b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000407f80: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000043c2ae: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x0000000000418331: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x000000000043b970: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000458e34: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000411bf2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000045ef5e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x24e8; 
0x000000000045eefe: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x84e8; 
0x0000000000412e22: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000458522: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x0000000000403c91: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000418618: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041085d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000043bcad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000044e4cd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x000000000040342b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000041b9c2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x00000000004032ed: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004465c7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000472425: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x00000000004032e5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000474dfb: add byte ptr [rax], al; add byte ptr [rax - 0x7af0b7c6], al; imul edi, edi, 0xb948ffff; mov eax, 0xf; syscall; 
0x0000000000460482: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x0000000000439f4d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39f60; ret; 
0x0000000000457034: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000439f6d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbx + rcx - 0x17]; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000046c33f: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rdx + 0x4c], 0x39; call 0xffffffff8b5097c3; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000401008: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000041cea2: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000041bc25: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000435c4d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000463bbd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042ae02: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004078fa: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x0000000000434cbd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000409ddc: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042e8ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000418d38: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000417ced: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044ab6b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c0d: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000041281b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041d09c: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000045da1b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045dc2b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000042ba6a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x0000000000437d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; 
0x0000000000437d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x27], bh; syscall; ret; 
0x00000000004576ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x000000000042573b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000045e77b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8f], bh; syscall; 
0x0000000000417f4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xba], bh; syscall; 
0x000000000041c5bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret 0x8d49; 
0x000000000040876b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x00000000004756ea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; ret; 
0x000000000045c6eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f859; ret; 
0x000000000045c6db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f861; ret; 
0x000000000045c6cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f869; ret; 
0x000000000045c6bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f871; ret; 
0x000000000045c6ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f879; ret; 
0x000000000045c69b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f881; ret; 
0x000000000045c68b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f889; ret; 
0x000000000045c67b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f891; ret; 
0x000000000045c66b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f899; ret; 
0x000000000045c65b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f8a1; ret; 
0x000000000045c64b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x4f8a9; ret; 
0x000000000044771b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x648f9; ret; 
0x000000000043e43b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x6db99; ret; 
0x000000000043e42b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x6dba1; ret; 
0x000000000047409b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000041715b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000043bcab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000044e4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x0000000000419687: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000435c4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000463bbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000417e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042e8ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000411c0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000415d9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000416465: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043081b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000040bd3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x0000000000435e8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000457a9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x760f142a], cl; ret 0xceeb; 
0x000000000042ebeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042d50b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004171d7: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x909ae05], al; add byte ptr [rbx + 0x97f01f8], al; ret; 
0x000000000042472b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000046b949: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x76b80000], ecx; ret 0x8348; 
0x000000000045672b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043c27b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x0000000000457ad9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; and edi, 2; je 0x57af0; ret; 
0x000000000041c8f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c69: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004307e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000439419: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x0000000000417109: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000004391f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 1; syscall; 
0x0000000000438589: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000417149: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adc9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000424299: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2b9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000041cc0e: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043e495: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046966f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000042471c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042472c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042473c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042bf9c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044a71c: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip + 0x5b351], 0; je 0x4a740; mov eax, 0x13e; syscall; 
0x00000000004386ec: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip + 0x6d381], 0; je 0x38710; xor eax, eax; syscall; 
0x0000000000415cdc: add byte ptr [rax], al; add byte ptr [rax], al; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x000000000047551c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042baec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042bafc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042ba8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042ba9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042baac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042babc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042bacc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042badc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042b647: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000041ee9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x13019]; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000045c76c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x709]; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000041eb7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x8369]; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000043677c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0xfd9]; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000042573c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307dc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000040d67a: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x00000000004307fc: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004533d6: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsp + 0x30], 0x20; jmp rax; 
0x000000000042574c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000418464: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x23; ret; 
0x0000000000437d8c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x0000000000437d8c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x000000000045e77c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8f; syscall; 
0x0000000000417f4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x0000000000411c0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415d9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000478ac8: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; pop rbx; ret; 
0x000000000046b46b: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000046b62f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000438fcc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 3; syscall; 
0x000000000040a73c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; ret; 
0x000000000043081c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000045672c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043c27c: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x00000000004163a7: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000417207: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x90982], 0; ret; 
0x0000000000470bec: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000045eacc: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000044a33c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041650c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046967c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000457e1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x000000000041882c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c94b], 1; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x000000000041886c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x000000000041891c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x000000000041889c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000045c6ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f859]; ret; 
0x000000000045c6dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f861]; ret; 
0x000000000045c6cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f869]; ret; 
0x000000000045c6bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f871]; ret; 
0x000000000045c6ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f879]; ret; 
0x000000000045c69c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f881]; ret; 
0x000000000045c68c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f889]; ret; 
0x000000000045c67c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f891]; ret; 
0x000000000045c66c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f899]; ret; 
0x000000000045c65c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c64c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a9]; ret; 
0x000000000044771c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x648f9]; ret; 
0x000000000043e43c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6db99]; ret; 
0x000000000043e42c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x000000000043c4f4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000041877c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000041715c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000401755: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043085c: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043ba8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004308dc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004571ba: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000415919: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000045f0b5: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000433d6c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004302ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb0c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000046dd27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x0000000000439477: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e807: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e837: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439447: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000424709: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043a688: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000439268: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x000000000044a508: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044a378: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000044a358: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000417128: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x0000000000401558: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000435ff9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000457ada: add byte ptr [rax], al; add byte ptr [rax], al; nop; and edi, 2; je 0x57af0; ret; 
0x000000000041c8fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c6a: add byte ptr [rax], al; add byte ptr [rax], al; nop; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004756eb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042ba6b: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba5b: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000004307ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004384ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x18; syscall; 
0x000000000043941a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x000000000041710a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000004391fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 1; syscall; 
0x0000000000416e1b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000043858a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041714a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adca: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000042429a: add byte ptr [rax], al; add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2ba: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000042b89b: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x000000000046b555: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000004134bc: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040193c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000436ce0: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000416f59: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041435c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004164e2: add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rbx], 0x80; jne 0x16500; pop rbx; ret; 
0x000000000041557c: add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x0000000000401007: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; 
0x000000000040157e: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015c0: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x00000000004377cc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377bc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000043539c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000043538c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043536c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377dc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000045da1c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045dc2c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000423b6c: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044af46: add byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x00000000004171d8: add byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rip + 0x909ae], eax; cmp eax, 1; jg 0x171f0; ret; 
0x0000000000458cfc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000412d0c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000438514: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000044ae48: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x38; ret; 
0x000000000045eb90: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; mov eax, edx; add rsp, 0x38; ret; 
0x000000000043a399: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x1018; ret; 
0x00000000004367dc: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000045e440: add byte ptr [rax], al; add byte ptr [rbp + 0x24], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000453655: add byte ptr [rax], al; add byte ptr [rbp + 0x29], cl; dec byte ptr [rax - 0x77]; ret 0x8148; 
0x0000000000469be2: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; add rsp, 0x38; ret; 
0x00000000004361a6: add byte ptr [rax], al; add byte ptr [rbp + 0x2d], dh; add rsp, 0x110; pop rbx; ret; 
0x000000000046972e: add byte ptr [rax], al; add byte ptr [rbp + 0x2d], dh; add rsp, 0x38; ret; 
0x00000000004698fc: add byte ptr [rax], al; add byte ptr [rbp + 0x2d], dh; add rsp, 0x58; ret; 
0x0000000000457b1e: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000458f33: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045e734: add byte ptr [rax], al; add byte ptr [rbp + 0x39], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000046bd00: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; add rsp, 0x118; ret; 
0x000000000040fc81: add byte ptr [rax], al; add byte ptr [rbp + 0x3e], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000004394f7: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x000000000044fe4c: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000041e403: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000044a6a5: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; mov eax, edx; add rsp, 0x148; ret; 
0x0000000000439184: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x00000000004390e3: add byte ptr [rax], al; add byte ptr [rbp + 0x43], dh; add rsp, 0x18; ret; 
0x000000000043c4dd: add byte ptr [rax], al; add byte ptr [rbp + 0x44], dh; add rsp, 0x110; pop rbx; ret; 
0x0000000000470637: add byte ptr [rax], al; add byte ptr [rbp + 0x44], dh; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000045ea79: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000046b114: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; leave; ret; 
0x000000000043a62e: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x58; ret; 
0x0000000000439054: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x0000000000458ff3: add byte ptr [rax], al; add byte ptr [rbp + 0x6f], dh; add rsp, 0x98; ret; 
0x000000000044c3f2: add byte ptr [rax], al; add byte ptr [rbp + 0x7a850fc9], al; or dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000472b56: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x28; ret; 
0x000000000043a4c7: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000004393aa: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x00000000004706e0: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000457c6d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000004697e5: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000004195ed: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004732c9: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x000000000040a5e1: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000045ea1c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x00000000004699a6: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x38; ret; 
0x000000000041e009: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000004502ad: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000040ee7b: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x35], cl; push rbx; mov ch, 6; add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x0000000000401934: add byte ptr [rax], al; add byte ptr [rbp - 0x38], dh; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000043a400: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; add rsp, 8; ret; 
0x000000000043a578: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000040193d: add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x000000000043585b: add byte ptr [rax], al; add byte ptr [rbx + 0x29493fe2], al; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000042577d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043081d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000457bad: add byte ptr [rax], al; add byte ptr [rbx + 0x5421205], cl; add cl, al; call 0x1e5fec7; mov dword ptr [rip + 0x5000e], eax; ret; 
0x0000000000403a24: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040fc8a: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040db45: add byte ptr [rax], al; add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047059e: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7f7bd], cl; adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000457c91: add byte ptr [rax], al; add byte ptr [rbx - 0x78f0fe06], al; ret; 
0x000000000040bd3d: add byte ptr [rax], al; add byte ptr [rbx - 0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x00000000004251a1: add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x00000000004117ff: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000452439: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x000000000041e29d: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x00000000004133c3: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000447846: add byte ptr [rax], al; add byte ptr [rcx + 0x5c415bd0], cl; ret; 
0x0000000000450f32: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x0000000000450ebf: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000435e8d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000466136: add byte ptr [rax], al; add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x0000000000402b7b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3d], cl; ret; 
0x00000000004161da: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x63], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408b36: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], al; mov rdi, r8; call rax; 
0x000000000041083a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000417e98: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x00000000004594e7: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412b5d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000457b28: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000456edc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 2], al; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000413f9a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041467d: add byte ptr [rax], al; add byte ptr [rcx - 0x38b78f89], cl; ret 0x6520; 
0x000000000041efc9: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000044a5cf: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000460a0b: add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000465fe0: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000457a9d: add byte ptr [rax], al; add byte ptr [rcx - 0x760f142a], cl; ret 0xceeb; 
0x0000000000407955: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x000000000040c752: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x000000000040cfd1: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x00000000004035e6: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xcfe8; 
0x00000000004035f3: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000436a45: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4917; 
0x000000000042ebed: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000427bbd: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000004428f9: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000041b98d: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf0f; 
0x0000000000441caf: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000423cc4: add byte ptr [rax], al; add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000042629c: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x840f; 
0x000000000044eead: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd089; 
0x0000000000414b3c: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf883; 
0x0000000000426406: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf9c5; 
0x0000000000426354: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xfac5; 
0x000000000045e1ca: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000045acba: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000041ccc1: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000417ee5: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046d45b: add byte ptr [rax], al; add byte ptr [rcx], dh; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x0000000000464778: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rcx - 0x7d], 0xc2; xor byte ptr [rbp + 0x63], cl; ret; 
0x000000000044af47: add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x4af58; ret; 
0x0000000000423a53: add byte ptr [rax], al; add byte ptr [rdi + 0x68], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004171d9: add byte ptr [rax], al; add byte ptr [rdi + 0x909ae05], al; add byte ptr [rbx + 0x97f01f8], al; ret; 
0x0000000000415101: add byte ptr [rax], al; add byte ptr [rdi + 0x92a8605], al; add byte ptr [rbx + 0x317f01f8], al; add rsp, 8; ret; 
0x0000000000408b78: add byte ptr [rax], al; add byte ptr [rdi + 0x9eba715], al; add byte ptr [rbx + 0x5a7f01fa], al; call rax; 
0x00000000004049d3: add byte ptr [rax], al; add byte ptr [rdi + 0xa2c2405], al; add byte ptr [rbx - 0x70f0fe08], al; add dword ptr [rcx], 0; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000047537c: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000403d72: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca3: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x000000000046b63d: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x43], cl; ret 0x40b9; 
0x0000000000421e67: add byte ptr [rax], al; add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004571bb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000041591a: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000045f0b6: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000423e05: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000437d02: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x000000000042fb0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000004302ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x0000000000406d55: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000443100: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x50; dec dword ptr [rbp - 0x77]; ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x0000000000409bc5: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000433d6d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042473d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042472d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000045ad2d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000042bccd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000042471d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000046b94b: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x76b80000], ecx; ret 0x8348; 
0x000000000045464e: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x76fffffc], ebx; ret 0xc083; 
0x000000000045672d: add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004146c2: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x00000000004358ad: add byte ptr [rax], al; add byte ptr [rdx - 0xe], ah; jge 0x358fc; js 0x358ca; jae 0x294b989c; ret 0xc748; 
0x000000000045ea54: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x5ea88; mov eax, 0x101; syscall; 
0x0000000000417c37: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000046833f: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x0000000000417cd5: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000417cd5: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x000000000043c27d: add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x0000000000416f5a: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000045ac22: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000458c4d: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov eax, 0xca; syscall; 
0x0000000000418936: add byte ptr [rax], al; add byte ptr [rsi + 5], dh; ret; 
0x0000000000457adb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; and edi, 2; je 0x57af0; ret; 
0x000000000041c8fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004307eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043941b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x000000000041710b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000004391fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 1; syscall; 
0x000000000043858b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041714b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043933b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x000000000042589b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043adcb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; ret; 
0x000000000042429b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000457129: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000042254b: add byte ptr [rax], al; add cl, al; loope 0x22557; add rcx, r9; jmp rcx; 
0x00000000004495f6: add byte ptr [rax], al; add cl, ch; adc al, byte ptr [rdi]; add byte ptr [rax], al; nop; ret; 
0x0000000000430bbd: add byte ptr [rax], al; add cl, ch; mov edx, dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000454722: add byte ptr [rax], al; add cl, ch; pop rdi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004511a6: add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x000000000044bf4d: add byte ptr [rax], al; add cl, ch; ret; 
0x00000000004785ad: add byte ptr [rax], al; add cl, ch; wait; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000046c497: add byte ptr [rax], al; add dh, dh; add eax, 0x3fb03; jne 0x6cb50; ret; 
0x000000000043ca06: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000418409: add byte ptr [rax], al; add dh, dh; ret 0x7502; 
0x0000000000434db8: add byte ptr [rax], al; add eax, ecx; vzeroupper; ret; 
0x000000000045aad3: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000046ddfe: add byte ptr [rax], al; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004225b1: add byte ptr [rax], al; add rdx, r8; jmp rdx; 
0x000000000041ce72: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043b9ae: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000000411b54: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004123fb: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000472c9f: add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000469af9: add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000045c8ce: add byte ptr [rax], al; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000043862f: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000045e92d: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x0000000000455e7f: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041357a: add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000447840: add byte ptr [rax], al; add rsp, 0xb8; mov eax, edx; pop rbx; pop r12; ret; 
0x00000000004560be: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004560a0: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000046459e: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000043e497: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040879e: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000418274: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000045c866: add byte ptr [rax], al; and ch, 0x10; lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041e6fe: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x1076]; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e8fe: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0xe36]; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e7fe: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0xf76]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041eb70: add byte ptr [rax], al; and ch, 4; jne 0x1eb24; ret; 
0x0000000000436770: add byte ptr [rax], al; and ch, 4; jne 0x36734; ret; 
0x000000000045c760: add byte ptr [rax], al; and ch, 4; jne 0x5c724; ret; 
0x0000000000422582: add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000041ed26: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead6: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x0000000000458927: add byte ptr [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042471e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bcce: add byte ptr [rax], al; bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042b45e: add byte ptr [rax], al; bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x2b42c; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042472e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042473e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042bf9e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ba5e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b6ee: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045b96e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ad2e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x5ad70; add rax, rdi; ret; 
0x00000000004310e0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000437b21: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x000000000042e78e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000456fc6: add byte ptr [rax], al; call 0x12c70; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000457011: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000402fee: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x0000000000408aee: add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000475201: add byte ptr [rax], al; call rax; 
0x000000000040e226: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000401a06: add byte ptr [rax], al; clc; jg 0x1a02; int1; mov eax, eax; ret; 
0x000000000041894f: add byte ptr [rax], al; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x0000000000470d97: add byte ptr [rax], al; cmove edx, eax; call 0x61f30; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000041e698: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000459809: add byte ptr [rax], al; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041e661: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044a71e: add byte ptr [rax], al; cmp byte ptr [rip + 0x5b351], 0; je 0x4a740; mov eax, 0x13e; syscall; 
0x00000000004386ee: add byte ptr [rax], al; cmp byte ptr [rip + 0x6d381], 0; je 0x38710; xor eax, eax; syscall; 
0x0000000000457b9e: add byte ptr [rax], al; cmp dword ptr [rdi], 1; je 0x57bb0; ret; 
0x0000000000458973: add byte ptr [rax], al; cmp eax, 0x21; je 0x589d0; mov eax, 0x16; ret; 
0x000000000041ea33: add byte ptr [rax], al; cmp ecx, 0x120; je 0x1ea40; ret; 
0x0000000000459753: add byte ptr [rax], al; cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c793: add byte ptr [rax], al; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ec13: add byte ptr [rax], al; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041edd3: add byte ptr [rax], al; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eec3: add byte ptr [rax], al; cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000459e73: add byte ptr [rax], al; cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000430254: add byte ptr [rax], al; cmp edx, 1; ja 0x302f0; je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x0000000000456ff5: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x000000000046dd2e: add byte ptr [rax], al; cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x0000000000415cde: add byte ptr [rax], al; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x000000000041ca80: add byte ptr [rax], al; cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x0000000000423e5c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x23e80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423c31: add byte ptr [rax], al; cmp rdx, 0x40; ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004239f1: add byte ptr [rax], al; cmp rdx, 0x80; ja 0x23ac9; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x00000000004760af: add byte ptr [rax], al; cmp rdx, rcx; jb 0x760bb; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000047760e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77620; ret; 
0x000000000047793e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77950; ret; 
0x000000000047551e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040154f: add byte ptr [rax], al; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000420e14: add byte ptr [rax], al; ja 0x20ef0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000423a54: add byte ptr [rax], al; ja 0x23ac0; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004239f8: add byte ptr [rax], al; ja 0x23ac9; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000431590: add byte ptr [rax], al; ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x0000000000432265: add byte ptr [rax], al; ja 0x3200e; xor eax, eax; ret; 
0x000000000045b0de: add byte ptr [rax], al; jb 0x5b0f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045b4de: add byte ptr [rax], al; jb 0x5b4f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004188c7: add byte ptr [rax], al; jbe 0x188d0; ret; 
0x0000000000418907: add byte ptr [rax], al; jbe 0x18910; ret; 
0x0000000000418937: add byte ptr [rax], al; jbe 0x18940; ret; 
0x0000000000412804: add byte ptr [rax], al; je 0x12810; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x12810; ret; 
0x0000000000412c76: add byte ptr [rax], al; je 0x12c7b; ret; 
0x000000000041ea39: add byte ptr [rax], al; je 0x1ea40; ret; 
0x000000000041eb8a: add byte ptr [rax], al; je 0x1eb5f; ret; 
0x000000000041ebf2: add byte ptr [rax], al; je 0x1ebc9; ret; 
0x000000000041ec19: add byte ptr [rax], al; je 0x1ec20; ret; 
0x000000000041ec6a: add byte ptr [rax], al; je 0x1ec38; ret; 
0x000000000041ecea: add byte ptr [rax], al; je 0x1ecc1; ret; 
0x000000000041edd9: add byte ptr [rax], al; je 0x1ede0; ret; 
0x000000000041ee2a: add byte ptr [rax], al; je 0x1edf8; ret; 
0x000000000041eeaa: add byte ptr [rax], al; je 0x1ee7f; ret; 
0x000000000041eec9: add byte ptr [rax], al; je 0x1eed0; ret; 
0x000000000041ef1a: add byte ptr [rax], al; je 0x1eee8; ret; 
0x00000000004249bd: add byte ptr [rax], al; je 0x24a40; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x00000000004251bd: add byte ptr [rax], al; je 0x25240; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000042fa8d: add byte ptr [rax], al; je 0x2fb10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000043025d: add byte ptr [rax], al; je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x000000000043678a: add byte ptr [rax], al; je 0x3675f; ret; 
0x00000000004386f5: add byte ptr [rax], al; je 0x38710; xor eax, eax; syscall; 
0x0000000000438795: add byte ptr [rax], al; je 0x387b0; mov eax, 1; syscall; 
0x000000000043ae7a: add byte ptr [rax], al; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000044a725: add byte ptr [rax], al; je 0x4a740; mov eax, 0x13e; syscall; 
0x0000000000458cf6: add byte ptr [rax], al; je 0x58d10; mov dword ptr [rdi], 0; xor eax, eax; add rsp, 8; ret; 
0x0000000000459759: add byte ptr [rax], al; je 0x59760; ret; 
0x0000000000459e79: add byte ptr [rax], al; je 0x59e80; ret; 
0x0000000000459eca: add byte ptr [rax], al; je 0x59e98; ret; 
0x000000000045c77a: add byte ptr [rax], al; je 0x5c74f; ret; 
0x000000000045c799: add byte ptr [rax], al; je 0x5c7a0; ret; 
0x000000000045d1e5: add byte ptr [rax], al; je 0x5d1f8; add rax, 2; ret; 
0x000000000045e904: add byte ptr [rax], al; je 0x5e965; mov eax, 0x101; syscall; 
0x0000000000466137: add byte ptr [rax], al; je 0x6613c; lock inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x0000000000472c4d: add byte ptr [rax], al; je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000472c94: add byte ptr [rax], al; je 0x72d52; mov eax, 1; add rsp, 0x38; ret; 
0x00000000004533e0: add byte ptr [rax], al; jmp rax; 
0x0000000000411b4e: add byte ptr [rax], al; jne 0x11bd8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004123f5: add byte ptr [rax], al; jne 0x124ea; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000413574: add byte ptr [rax], al; jne 0x13687; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000416e41: add byte ptr [rax], al; jne 0x16e50; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000401935: add byte ptr [rax], al; jne 0x1901; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x00000000004195ee: add byte ptr [rax], al; jne 0x195f9; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041c905: add byte ptr [rax], al; jne 0x1c910; ret; 
0x000000000041e00a: add byte ptr [rax], al; jne 0x1e017; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000004361a7: add byte ptr [rax], al; jne 0x361d8; add rsp, 0x110; pop rbx; ret; 
0x00000000004367dd: add byte ptr [rax], al; jne 0x36804; add rsp, 0x20; pop rbx; ret; 
0x0000000000438515: add byte ptr [rax], al; jne 0x38529; add rsp, 0x28; ret; 
0x0000000000438629: add byte ptr [rax], al; jne 0x386e3; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000439055: add byte ptr [rax], al; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390e4: add byte ptr [rax], al; jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439185: add byte ptr [rax], al; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393ab: add byte ptr [rax], al; jne 0x393b4; add rsp, 0x28; ret; 
0x00000000004393c8: add byte ptr [rax], al; jne 0x393e0; mov eax, 9; syscall; 
0x000000000043a39a: add byte ptr [rax], al; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a4c8: add byte ptr [rax], al; jne 0x3a4d6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000043a558: add byte ptr [rax], al; jne 0x3a566; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000043a62f: add byte ptr [rax], al; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000043b075: add byte ptr [rax], al; jne 0x3b088; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x000000000043c4de: add byte ptr [rax], al; jne 0x3c526; add rsp, 0x110; pop rbx; ret; 
0x000000000044a6a6: add byte ptr [rax], al; jne 0x4a6eb; mov eax, edx; add rsp, 0x148; ret; 
0x000000000044ae49: add byte ptr [rax], al; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af12: add byte ptr [rax], al; jne 0x4af1e; add rsp, 0xd8; ret; 
0x000000000045019e: add byte ptr [rax], al; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000457c6e: add byte ptr [rax], al; jne 0x57c78; add rsp, 0x10; pop rbx; ret; 
0x0000000000457e8c: add byte ptr [rax], al; jne 0x57e96; add rsp, 0x10; pop rbx; ret; 
0x0000000000458ff4: add byte ptr [rax], al; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045b155: add byte ptr [rax], al; jne 0x5ae50; ret; 
0x000000000045b555: add byte ptr [rax], al; jne 0x5b250; ret; 
0x000000000045e441: add byte ptr [rax], al; jne 0x5e469; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000045e735: add byte ptr [rax], al; jne 0x5e772; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000045e927: add byte ptr [rax], al; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea1d: add byte ptr [rax], al; jne 0x5ea29; movzx eax, al; add rsp, 0x58; ret; 
0x000000000045ea7a: add byte ptr [rax], al; jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000045eb91: add byte ptr [rax], al; jne 0x5ebb3; mov eax, edx; add rsp, 0x38; ret; 
0x000000000046972f: add byte ptr [rax], al; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004697e6: add byte ptr [rax], al; jne 0x697f0; add rsp, 0x20; pop rbx; ret; 
0x00000000004698fd: add byte ptr [rax], al; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a7: add byte ptr [rax], al; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a27: add byte ptr [rax], al; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469af3: add byte ptr [rax], al; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469be3: add byte ptr [rax], al; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046b115: add byte ptr [rax], al; jne 0x6b15e; leave; ret; 
0x000000000046bd01: add byte ptr [rax], al; jne 0x6bd40; add rsp, 0x118; ret; 
0x0000000000470296: add byte ptr [rax], al; jne 0x7038a; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000470638: add byte ptr [rax], al; jne 0x70680; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004706e1: add byte ptr [rax], al; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707b3: add byte ptr [rax], al; jne 0x707bc; add rsp, 0x38; ret; 
0x0000000000470823: add byte ptr [rax], al; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470909: add byte ptr [rax], al; jne 0x70912; add rsp, 0x38; ret; 
0x000000000047096e: add byte ptr [rax], al; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b57: add byte ptr [rax], al; jne 0x72b65; add rsp, 0x28; ret; 
0x00000000004732ca: add byte ptr [rax], al; jne 0x732d5; cmp qword ptr [r9 + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x000000000040a5e2: add byte ptr [rax], al; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6b1: add byte ptr [rax], al; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb42: add byte ptr [rax], al; jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000040fc82: add byte ptr [rax], al; jne 0xfcc4; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000042bfae: add byte ptr [rax], al; kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000422545: add byte ptr [rax], al; lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000401842: add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000042baee: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042bafe: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb0e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb1e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb2e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba4d: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000042ba7e: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042ba8e: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042ba9e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042baae: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042babe: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042b9fa: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000042bace: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042bade: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042b649: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045c7ef: add byte ptr [rax], al; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ee1e: add byte ptr [rax], al; lea rax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000045978a: add byte ptr [rax], al; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000041ee9e: add byte ptr [rax], al; lea rax, [rip + 0x13019]; test edx, 0x40000000; je 0x1ee7f; ret; 
0x0000000000459802: add byte ptr [rax], al; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041e85a: add byte ptr [rax], al; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ef0e: add byte ptr [rax], al; lea rax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000041e75a: add byte ptr [rax], al; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000045c7ca: add byte ptr [rax], al; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041e65a: add byte ptr [rax], al; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ebe: add byte ptr [rax], al; lea rax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041e8b8: add byte ptr [rax], al; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x0000000000459eac: add byte ptr [rax], al; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x000000000041e7b8: add byte ptr [rax], al; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b8: add byte ptr [rax], al; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e8: add byte ptr [rax], al; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e8: add byte ptr [rax], al; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e8: add byte ptr [rax], al; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000041e965: add byte ptr [rax], al; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d7: add byte ptr [rax], al; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041ea03: add byte ptr [rax], al; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e97f: add byte ptr [rax], al; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000041ea8f: add byte ptr [rax], al; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041ea6a: add byte ptr [rax], al; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x000000000045c76e: add byte ptr [rax], al; lea rax, [rip + 0x709]; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000041eb7e: add byte ptr [rax], al; lea rax, [rip + 0x8369]; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000046ba8c: add byte ptr [rax], al; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000041ebe6: add byte ptr [rax], al; lea rax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x00000000004597af: add byte ptr [rax], al; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041ec5e: add byte ptr [rax], al; lea rax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ec4c: add byte ptr [rax], al; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041e908: add byte ptr [rax], al; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041ecde: add byte ptr [rax], al; lea rax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000041e808: add byte ptr [rax], al; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000043677e: add byte ptr [rax], al; lea rax, [rip + 0xfd9]; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000041e708: add byte ptr [rax], al; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000042eb84: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000455895: add byte ptr [rax], al; lea rcx, [rip + 0x38506]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000414503: add byte ptr [rax], al; lea rcx, [rip + 0x92194]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000464034: add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000466c62: add byte ptr [rax], al; lea rdi, [rip + 0x28775]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000044ace6: add byte ptr [rax], al; lea rdi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x0000000000407c7d: add byte ptr [rax], al; lea rdi, [rip + 0x720fa]; mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004018ed: add byte ptr [rax], al; lea rdi, [rip + 0x777ca]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000046827c: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000046823d: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000436740: add byte ptr [rax], al; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000045c62d: add byte ptr [rax], al; lea rdx, [rip + 0x31b7a]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000041e891: add byte ptr [rax], al; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e791: add byte ptr [rax], al; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e691: add byte ptr [rax], al; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000043812c: add byte ptr [rax], al; lea rdx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000437ffc: add byte ptr [rax], al; lea rdx, [rip + 0x44a0b]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000041e9b8: add byte ptr [rax], al; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041eae0: add byte ptr [rax], al; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000045c730: add byte ptr [rax], al; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000041ebb2: add byte ptr [rax], al; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000041eca7: add byte ptr [rax], al; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x00000000004088a1: add byte ptr [rax], al; lea rsi, [rip + 0x71936]; lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x0000000000403d7d: add byte ptr [rax], al; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403cae: add byte ptr [rax], al; lea rsi, [rip + 0x75841]; syscall; 
0x000000000046b735: add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000042fe23: add byte ptr [rax], al; mov byte ptr [rdi], 0; xtest; jne 0x2fe31; vzeroupper; ret; 
0x000000000042573e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307de: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000042356e: add byte ptr [rax], al; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040d67c: add byte ptr [rax], al; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x000000000042575e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004307fe: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000045e38a: add byte ptr [rax], al; mov dword ptr [rax + 0x28], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047065b: add byte ptr [rax], al; mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x0000000000414538: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000458ebc: add byte ptr [rax], al; mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000046b560: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000045908c: add byte ptr [rax], al; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x000000000041883b: add byte ptr [rax], al; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x00000000004533d8: add byte ptr [rax], al; mov dword ptr [rsp + 0x30], 0x20; jmp rax; 
0x000000000040d674: add byte ptr [rax], al; mov dword ptr [rsp + 0x40], 0; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x000000000042574e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000401752: add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004187e6: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000043947e: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x000000000043947e: add byte ptr [rax], al; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x0000000000418466: add byte ptr [rax], al; mov eax, 0x23; ret; 
0x0000000000437d8e: add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x0000000000437d8e: add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x0000000000439068: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000045e77e: add byte ptr [rax], al; mov eax, 0x8f; syscall; 
0x000000000045e77e: add byte ptr [rax], al; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7ae: add byte ptr [rax], al; mov eax, 0x90; syscall; 
0x000000000045e7ae: add byte ptr [rax], al; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7de: add byte ptr [rax], al; mov eax, 0x91; syscall; 
0x000000000045e7de: add byte ptr [rax], al; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e80e: add byte ptr [rax], al; mov eax, 0x92; syscall; 
0x000000000045e80e: add byte ptr [rax], al; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e83e: add byte ptr [rax], al; mov eax, 0x93; syscall; 
0x000000000045e83e: add byte ptr [rax], al; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x000000000043944e: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x000000000043944e: add byte ptr [rax], al; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000417f4e: add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x0000000000458922: add byte ptr [rax], al; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417c3d: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000458f41: add byte ptr [rax], al; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x0000000000417cdb: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x0000000000417c8e: add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000044a5d6: add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x000000000043b8e1: add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x0000000000403cbc: add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000401193: add byte ptr [rax], al; mov eax, 0xe; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000417ef0: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000044ab6c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c0e: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041281c: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000472c9a: add byte ptr [rax], al; mov eax, 1; add rsp, 0x38; ret; 
0x0000000000403d78: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca9: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000478aca: add byte ptr [rax], al; mov eax, 1; pop rbx; ret; 
0x00000000004588cd: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000046b631: add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000438fce: add byte ptr [rax], al; mov eax, 3; syscall; 
0x0000000000438fce: add byte ptr [rax], al; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x000000000043e326: add byte ptr [rax], al; mov eax, 8; ret; 
0x000000000047059f: add byte ptr [rax], al; mov eax, dword ptr [rbx + 8]; lea rdx, [rip + 0x2416d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045778e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000457bae: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x54212]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000043a56e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x7172a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000418a9e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x9316e]; test eax, eax; jne 0x18ab0; ret; 
0x000000000041049a: add byte ptr [rax], al; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041e29e: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000040a73e: add byte ptr [rax], al; mov eax, ecx; ret; 
0x0000000000447847: add byte ptr [rax], al; mov eax, edx; pop rbx; pop r12; ret; 
0x0000000000437d56: add byte ptr [rax], al; mov eax, edx; syscall; 
0x00000000004594e8: add byte ptr [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457b29: add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000412b5e: add byte ptr [rax], al; mov eax, r9d; syscall; 
0x0000000000423cc5: add byte ptr [rax], al; mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000042577e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043081e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000043030e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043082e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000043ab66: add byte ptr [rax], al; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000041ea2b: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x1ea40; ret; 
0x000000000045974b: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c78b: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ec0b: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x0000000000459e6b: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x000000000047537d: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000403d73: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca4: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000408a80: add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000045672e: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000403d6e: add byte ptr [rax], al; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x00000000004146c3: add byte ptr [rax], al; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x00000000004302fe: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000417c38: add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000468340: add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000417cd6: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd6: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000043c27e: add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x000000000045712a: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000458c4e: add byte ptr [rax], al; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000408b37: add byte ptr [rax], al; mov esi, r13d; mov rdi, r8; call rax; 
0x0000000000456edd: add byte ptr [rax], al; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000468286: add byte ptr [rax], al; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000046ffa2: add byte ptr [rax], al; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x00000000004163a9: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000470628: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000040beef: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c627: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040cc24: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c204: add byte ptr [rax], al; mov qword ptr [rbp - 0x8b8], r8; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004696d0: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000470992: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000470ab6: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004161db: add byte ptr [rax], al; mov qword ptr [rbx + 0x40], r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000043e490: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b69e: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000423f1e: add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004106b4: add byte ptr [rax], al; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000043b8cf: add byte ptr [rax], al; mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x70414], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004783c9: add byte ptr [rax], al; mov qword ptr [rip + 0x2f79e], rbx; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x000000000044a2da: add byte ptr [rax], al; mov qword ptr [rip + 0x5c14d], rax; mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000041888b: add byte ptr [rax], al; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x000000000041885b: add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041881b: add byte ptr [rax], al; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x0000000000417209: add byte ptr [rax], al; mov qword ptr [rip + 0x90982], 0; ret; 
0x0000000000401c95: add byte ptr [rax], al; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x000000000046b480: add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x0000000000403c92: add byte ptr [rax], al; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046547e: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x64d70; add rsp, 0xd8; ret; 
0x000000000045eb13: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004094f6: add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov r15, rdi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000401198: add byte ptr [rax], al; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000472beb: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000470bee: add byte ptr [rax], al; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000044a3e9: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045eace: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000044a5d0: add byte ptr [rax], al; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000044a31e: add byte ptr [rax], al; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000043928e: add byte ptr [rax], al; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000043856e: add byte ptr [rax], al; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000044a33e: add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041650e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000000411bfe: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416335: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x000000000041ca79: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000046967e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000046968e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x00000000004540bd: add byte ptr [rax], al; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000456fee: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x00000000004188be: add byte ptr [rax], al; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x188d0; ret; 
0x000000000041892e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000457e1e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000457b8e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b7e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b6e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x000000000041887e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x000000000041882e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c94b], 1; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x000000000041886e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000457e2e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x000000000041891e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x00000000004188ae: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c89e], rax; ret; 
0x000000000041889e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000045c6ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f859]; ret; 
0x000000000045c6de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f861]; ret; 
0x000000000045c6ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f869]; ret; 
0x000000000045c6be: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f871]; ret; 
0x000000000045c6ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f879]; ret; 
0x000000000045c69e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f881]; ret; 
0x000000000045c68e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f889]; ret; 
0x000000000045c67e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f891]; ret; 
0x000000000045c66e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f899]; ret; 
0x000000000045c65e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c64e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a9]; ret; 
0x000000000044771e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x648f9]; ret; 
0x000000000043b0de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6bc61]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000043e43e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6db99]; ret; 
0x000000000043e42e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x0000000000453bdd: add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043c4f6: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000044a782: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000472bf4: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041877e: add byte ptr [rax], al; mov rax, qword ptr fs:[0x10]; ret; 
0x00000000004756cd: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000414612: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472eeb: add byte ptr [rax], al; mov rax, rcx; add rsp, 0x38; ret; 
0x000000000041715e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000046b60e: add byte ptr [rax], al; mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000464c2c: add byte ptr [rax], al; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000401757: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423a90: add byte ptr [rax], al; mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041f7fe: add byte ptr [rax], al; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004257ce: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043085e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043086e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000472f81: add byte ptr [rax], al; mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000436cd3: add byte ptr [rax], al; mov rdi, qword ptr [rbx]; call 0x1d050; mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000004094c3: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004388d0: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x0000000000418619: add byte ptr [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004146c8: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x00000000004101af: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000043b971: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000458e35: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000412e23: add byte ptr [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000411bf3: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000418332: add byte ptr [rax], al; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000046ff94: add byte ptr [rax], al; mov rdx, 0x46d230; movups xmmword ptr [rax + 0x2a0], xmm0; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x000000000040876e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffb8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000437d26: add byte ptr [rax], al; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043875e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004106ad: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000047628e: add byte ptr [rax], al; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000401a6b: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xaa1cc]; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000043ba8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000043084e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000417e99: add byte ptr [rax], al; mov rdx, r12; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x000000000040dbfb: add byte ptr [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046df2e: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000040d896: add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453670: add byte ptr [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045375c: add byte ptr [rax], al; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413f9b: add byte ptr [rax], al; mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040d944: add byte ptr [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454325: add byte ptr [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000408e72: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [r15]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040d4a3: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x00000000004095de: add byte ptr [rax], al; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000041083b: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043c2af: add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000439165: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000430a2e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004308de: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043b932: add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000040b395: add byte ptr [rax], al; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000004496ef: add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rdi*4]; add rcx, rsi; jmp rcx; 
0x0000000000421e68: add byte ptr [rax], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004571bc: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000041591b: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000045f0b7: add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000423e06: add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000414e2d: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000415ace: add byte ptr [rax], al; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045393a: add byte ptr [rax], al; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000433d6e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042524e: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x00000000004302ee: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb1e: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000045401e: add byte ptr [rax], al; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000424a3e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000042fb0e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000004701d1: add byte ptr [rax], al; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000046dd29: add byte ptr [rax], al; nop dword ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x0000000000439479: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e809: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e839: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439449: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000437a69: add byte ptr [rax], al; nop dword ptr [rax + rax]; test rsi, rsi; jne 0x37a79; xor rax, rax; ret; 
0x0000000000401aa1: add byte ptr [rax], al; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042470b: add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043a68a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x000000000043926a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x0000000000438fc7: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 3; syscall; 
0x0000000000430bc3: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000044a50a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044a4e3: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a37a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000044a35a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041712a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x000000000040adea: add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000412b53: add byte ptr [rax], al; nop dword ptr [rax]; mov rsi, r12; mov edi, 2; mov eax, r9d; syscall; 
0x000000000042e7ab: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040155a: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000435ffb: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000043a680: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000457adc: add byte ptr [rax], al; nop; and edi, 2; je 0x57af0; ret; 
0x000000000041c8fc: add byte ptr [rax], al; nop; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c6c: add byte ptr [rax], al; nop; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755ac: add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004756ed: add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042ba6d: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba5d: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000004307ec: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004384ad: add byte ptr [rax], al; nop; mov eax, 0x18; syscall; 
0x000000000043941c: add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x000000000041710c: add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000004391fc: add byte ptr [rax], al; nop; mov eax, 1; syscall; 
0x0000000000416e1d: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000043858c: add byte ptr [rax], al; nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041714c: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000041884d: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c92b], 1; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000043933c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x000000000042589c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043adcc: add byte ptr [rax], al; nop; ret; 
0x000000000042429c: add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2bc: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000042b89d: add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000466248: add byte ptr [rax], al; or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x0000000000403191: add byte ptr [rax], al; or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x000000000046b557: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000004134be: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000045ac49: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004394f8: add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x000000000044fe4d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x000000000041e404: add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000040193e: add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x000000000041e3fe: add byte ptr [rax], al; pop rbx; mov eax, 0x16; pop rbp; pop r12; ret; 
0x00000000004161fe: add byte ptr [rax], al; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000459525: add byte ptr [rax], al; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000475102: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000403a25: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000040fc8b: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000004019b9: add byte ptr [rax], al; pop rbx; ret; 
0x0000000000416f5b: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000401616: add byte ptr [rax], al; ret; 
0x0000000000475539: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000435674: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x000000000045b0ee: add byte ptr [rax], al; sbb eax, eax; or eax, 1; ret; 
0x000000000042254c: add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000407f08: add byte ptr [rax], al; sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000040db46: add byte ptr [rax], al; sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004355c3: add byte ptr [rax], al; sub eax, ecx; cmp rsi, rax; ja 0x353c7; mov eax, esi; ret; 
0x0000000000437a46: add byte ptr [rax], al; sub eax, ecx; cmp rsi, rax; ja 0x37807; mov eax, esi; ret; 
0x00000000004576d6: add byte ptr [rax], al; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000416636: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x0000000000431589: add byte ptr [rax], al; sub rdx, 0x80; ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x000000000043225e: add byte ptr [rax], al; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000478bf6: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000046b776: add byte ptr [rax], al; sub rsp, 8; call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x000000000046625e: add byte ptr [rax], al; sub rsp, 8; call 0x3b720; xor eax, eax; add rsp, 8; ret; 
0x00000000004011a0: add byte ptr [rax], al; syscall; 
0x0000000000438596: add byte ptr [rax], al; syscall; cmp eax, 0xfffff000; ja 0x385a8; xor eax, eax; ret; 
0x000000000043879c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38800; ret; 
0x0000000000438833: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x0000000000438fd3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x0000000000439203: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x00000000004393cf: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x39400; ret; 
0x000000000044a72c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x4a790; ret; 
0x0000000000458f46: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x000000000045e59f: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000045ead6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000470c33: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x00000000004384b3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x384c0; ret; 
0x0000000000439423: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x0000000000439453: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000439483: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x000000000043a693: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000045e783: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7b3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7e3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e813: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e843: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x0000000000417ce0: add byte ptr [rax], al; syscall; ret; 
0x0000000000437d03: add byte ptr [rax], al; syscall; test eax, eax; jne 0x37d28; xor eax, eax; ret; 
0x000000000042ba44: add byte ptr [rax], al; test ah, 0x40; jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x000000000042b9f2: add byte ptr [rax], al; test al, 0x40; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x00000000004164e4: add byte ptr [rax], al; test byte ptr [rbx], 0x80; jne 0x16500; pop rbx; ret; 
0x000000000041557e: add byte ptr [rax], al; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000046c498: add byte ptr [rax], al; test byte ptr [rip + 0x3fb03], 0x40; jne 0x6cb50; ret; 
0x000000000041ebda: add byte ptr [rax], al; test ch, 4; jne 0x1ebaa; ret; 
0x000000000042b965: add byte ptr [rax], al; test dh, 0x40; jne 0x2b8a0; lea rax, [rdi + 0xf]; ret; 
0x000000000041ecd2: add byte ptr [rax], al; test dh, 4; jne 0x1ec8a; ret; 
0x000000000042b9ab: add byte ptr [rax], al; test dh, 4; jne 0x2b8a0; lea rax, [rdi + 0xb]; ret; 
0x000000000042b8e2: add byte ptr [rax], al; test dl, 0x40; jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x000000000042b910: add byte ptr [rax], al; test dl, 4; jne 0x2b8a0; lea rax, [rdi + 3]; ret; 
0x000000000043a401: add byte ptr [rax], al; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x000000000043a579: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x000000000043c498: add byte ptr [rax], al; test eax, eax; jne 0x3c510; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044a6f7: add byte ptr [rax], al; test eax, eax; jne 0x4a708; add rsp, 8; ret; 
0x0000000000472ee3: add byte ptr [rax], al; test eax, eax; jne 0x73028; mov rax, rcx; add rsp, 0x38; ret; 
0x0000000000408760: add byte ptr [rax], al; test eax, eax; jne 0x8770; pop rbx; ret; 
0x000000000041e9ce: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x4c27]; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041ece5: add byte ptr [rax], al; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000041eb85: add byte ptr [rax], al; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000041ebed: add byte ptr [rax], al; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ec65: add byte ptr [rax], al; test edx, 0x40000000; je 0x1ec38; ret; 
0x0000000000436785: add byte ptr [rax], al; test edx, 0x40000000; je 0x3675f; ret; 
0x0000000000459ec5: add byte ptr [rax], al; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000045c775: add byte ptr [rax], al; test edx, 0x40000000; je 0x5c74f; ret; 
0x0000000000401009: add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; 
0x0000000000401009: add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000401580: add byte ptr [rax], al; test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015c2: add byte ptr [rax], al; test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x0000000000475592: add byte ptr [rax], al; test rax, rax; je 0x7559e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000439f4e: add byte ptr [rax], al; test rdi, rdi; je 0x39f5a; test rsi, rsi; jne 0x39f60; ret; 
0x000000000046b626: add byte ptr [rax], al; test rdx, rdx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000460483: add byte ptr [rax], al; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x0000000000437a6e: add byte ptr [rax], al; test rsi, rsi; jne 0x37a79; xor rax, rax; ret; 
0x000000000045a4f0: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a11e: add byte ptr [rax], al; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004377ce: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377be: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000043539e: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000043538e: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043536e: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377de: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000042452e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004242ae: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242be: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242ce: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045da1e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da2e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da3e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da4e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045d9b0: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045b5ae: add byte ptr [rax], al; tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000437095: add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000430f1e: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f2e: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f3e: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045a1ae: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042404e: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042355e: add byte ptr [rax], al; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000420e6e: add byte ptr [rax], al; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000041f729: add byte ptr [rax], al; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000042162b: add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000423b6e: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000423c3b: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000420dae: add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004239fe: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000042354e: add byte ptr [rax], al; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000435950: add byte ptr [rax], al; vzeroupper; pop rbx; pop r12; pop rbp; ret; 
0x000000000044af48: add byte ptr [rax], al; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x00000000004171da: add byte ptr [rax], al; xchg dword ptr [rip + 0x909ae], eax; cmp eax, 1; jg 0x171f0; ret; 
0x0000000000415102: add byte ptr [rax], al; xchg dword ptr [rip + 0x92a86], eax; cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x0000000000408b79: add byte ptr [rax], al; xchg dword ptr [rip + 0x9eba7], edx; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000466251: add byte ptr [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x000000000041ccc2: add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000458cfe: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000043a36d: add byte ptr [rax], al; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004756dd: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041d7e3: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x00000000004134a9: add byte ptr [rax], al; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000040f84e: add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004391ce: add byte ptr [rax], al; xor eax, eax; syscall; 
0x00000000004391ce: add byte ptr [rax], al; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000401aa6: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c283: add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x000000000043923a: add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000043923a: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x39250; ret; 
0x0000000000417ee6: add byte ptr [rax], al; xor edx, edx; mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000408797: add byte ptr [rax], al; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x0000000000458f34: add byte ptr [rax], al; xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000457b1f: add byte ptr [rax], al; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000453580: add byte ptr [rax], al; xor r10d, r10d; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454140: add byte ptr [rax], al; xor r10d, r10d; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000458262: add byte ptr [rax], al; xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000417c93: add byte ptr [rax], al; xor sil, 0x80; syscall; 
0x00000000004182b4: add byte ptr [rax], al; xor sil, 0x81; syscall; 
0x0000000000417cee: add byte ptr [rax], al; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000401753: add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401ca7: add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000466249: add byte ptr [rax], cl; jne 0x66260; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x0000000000436739: add byte ptr [rax], cl; lea rax, [rip + 0x132e]; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000045c729: add byte ptr [rax], cl; lea rax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x00000000004731b2: add byte ptr [rax], cl; mov byte ptr [rip + 0x39285], 8; ret; 
0x00000000004731ab: add byte ptr [rax], cl; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x00000000004731a4: add byte ptr [rax], cl; mov byte ptr [rip + 0x39291], 8; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x000000000047319d: add byte ptr [rax], cl; mov byte ptr [rip + 0x39297], 8; mov byte ptr [rip + 0x39291], 8; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x00000000004731b9: add byte ptr [rax], cl; ret; 
0x000000000044e53d: add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000045e34f: add byte ptr [rax], dl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041eb30: add byte ptr [rax], dl; je 0x1eb46; test byte ptr [rip + 0x8d37a], 1; lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000041ee50: add byte ptr [rax], dl; je 0x1ee66; test byte ptr [rip + 0x8d05a], 1; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x000000000046ba85: add byte ptr [rax], dl; lea rdx, [rip + 0x132]; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000041ed65: add byte ptr [rax], dl; lea rdx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000045c135: add byte ptr [rax], r12b; ret; 
0x00000000004560bd: add byte ptr [rax], r8b; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004775dd: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000478545: add byte ptr [rax], r8b; add rsp, 8; ret; 
0x00000000004644cd: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000045c865: add byte ptr [rax], r8b; and ch, 0x10; lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041ed25: add byte ptr [rax], r8b; and ecx, 8; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead5: add byte ptr [rax], r8b; and ecx, 8; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000045ba5d: add byte ptr [rax], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042f7ed: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000456fc5: add byte ptr [rax], r8b; call 0x12c70; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000402fed: add byte ptr [rax], r8b; call qword ptr [rbx + 0x10]; 
0x0000000000408aed: add byte ptr [rax], r8b; call qword ptr [rbx]; 
0x0000000000457b9d: add byte ptr [rax], r8b; cmp dword ptr [rdi], 1; je 0x57bb0; ret; 
0x000000000046dd2d: add byte ptr [rax], r8b; cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x000000000045b0dd: add byte ptr [rax], r8b; jb 0x5b0f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045b4dd: add byte ptr [rax], r8b; jb 0x5b4f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041ee1d: add byte ptr [rax], r8b; lea rax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ef0d: add byte ptr [rax], r8b; lea rax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x0000000000459ebd: add byte ptr [rax], r8b; lea rax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041e9d6: add byte ptr [rax], r8b; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041ebe5: add byte ptr [rax], r8b; lea rax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ec5d: add byte ptr [rax], r8b; lea rax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ecdd: add byte ptr [rax], r8b; lea rax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000044ace5: add byte ptr [rax], r8b; lea rdi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x000000000042356d: add byte ptr [rax], r8b; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042575d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004187e5: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000043947d: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x000000000043947d: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x000000000045e7ad: add byte ptr [rax], r8b; mov eax, 0x90; syscall; 
0x000000000045e7ad: add byte ptr [rax], r8b; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7dd: add byte ptr [rax], r8b; mov eax, 0x91; syscall; 
0x000000000045e7dd: add byte ptr [rax], r8b; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e80d: add byte ptr [rax], r8b; mov eax, 0x92; syscall; 
0x000000000045e80d: add byte ptr [rax], r8b; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e83d: add byte ptr [rax], r8b; mov eax, 0x93; syscall; 
0x000000000045e83d: add byte ptr [rax], r8b; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x000000000043944d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000043944d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000416efd: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x000000000045d205: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x000000000043e325: add byte ptr [rax], r8b; mov eax, 8; ret; 
0x000000000043a56d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x7172a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000418a9d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x9316e]; test eax, eax; jne 0x18ab0; ret; 
0x0000000000437d55: add byte ptr [rax], r8b; mov eax, edx; syscall; 
0x000000000043ab65: add byte ptr [rax], r8b; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000403d6d: add byte ptr [rax], r8b; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x00000000004302fd: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000423f1d: add byte ptr [rax], r8b; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000044a31d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000456fed: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x00000000004188bd: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x188d0; ret; 
0x000000000041892d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000457b8d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b7d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b6d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x000000000041887d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000457e2d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x00000000004188ad: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c89e], rax; ret; 
0x000000000046b60d: add byte ptr [rax], r8b; mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x00000000004216fd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004257cd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043086d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000437d25: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043875d: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000047628d: add byte ptr [rax], r8b; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000043084d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000046df2d: add byte ptr [rax], r8b; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004095dd: add byte ptr [rax], r8b; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000042524d: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000042fb1d: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000401615: add byte ptr [rax], r8b; ret; 
0x000000000045b0ed: add byte ptr [rax], r8b; sbb eax, eax; or eax, 1; ret; 
0x00000000004576d5: add byte ptr [rax], r8b; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000416635: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x000000000046b775: add byte ptr [rax], r8b; sub rsp, 8; call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x000000000046b625: add byte ptr [rax], r8b; test rdx, rdx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000437a6d: add byte ptr [rax], r8b; test rsi, rsi; jne 0x37a79; xor rax, rax; ret; 
0x000000000045a11d: add byte ptr [rax], r8b; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042452d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004242ad: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242bd: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242cd: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045da2d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da3d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da4d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045b5ad: add byte ptr [rax], r8b; tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000430f1d: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f2d: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f3d: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045a1ad: add byte ptr [rax], r8b; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042355d: add byte ptr [rax], r8b; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000420e6d: add byte ptr [rax], r8b; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042354d: add byte ptr [rax], r8b; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x000000000040f84d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000401aa5: add byte ptr [rax], r8b; xor edi, edi; mov eax, edx; syscall; 
0x0000000000438516: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000044ae4a: add byte ptr [rbp + 0x10], dh; add rsp, 0x38; ret; 
0x00000000004754fb: add byte ptr [rbp + 0x12], dh; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x00000000004754a4: add byte ptr [rbp + 0x14], dh; lea rdx, [rip + 0x36f82]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x00000000004393c9: add byte ptr [rbp + 0x14], dh; mov eax, 9; syscall; 
0x0000000000417191: add byte ptr [rbp + 0x14], dh; mov qword ptr [rip + 0x909fd], rbx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x000000000046b461: add byte ptr [rbp + 0x14], dh; test rdx, rdx; jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000043b5c6: add byte ptr [rbp + 0x17], dh; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043af71: add byte ptr [rbp + 0x1c], dh; lea rdx, [r9 + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000045eb92: add byte ptr [rbp + 0x1e], dh; mov eax, edx; add rsp, 0x38; ret; 
0x000000000043a39b: add byte ptr [rbp + 0x1f], dh; add rsp, 0x1018; ret; 
0x0000000000411192: add byte ptr [rbp + 0x21], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004367de: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000045e442: add byte ptr [rbp + 0x24], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000040c10d: add byte ptr [rbp + 0x29], cl; call 0xfffffffffff956fe; inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000453657: add byte ptr [rbp + 0x29], cl; dec byte ptr [rax - 0x77]; ret 0x8148; 
0x0000000000469be4: add byte ptr [rbp + 0x29], dh; add rsp, 0x38; ret; 
0x00000000004361a8: add byte ptr [rbp + 0x2d], dh; add rsp, 0x110; pop rbx; ret; 
0x0000000000469730: add byte ptr [rbp + 0x2d], dh; add rsp, 0x38; ret; 
0x00000000004698fe: add byte ptr [rbp + 0x2d], dh; add rsp, 0x58; ret; 
0x0000000000457b20: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000458494: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000458263: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000458f35: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417ccf: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417ccf: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c47: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000447987: add byte ptr [rbp + 0x31], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419e79: add byte ptr [rbp + 0x34], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000045e736: add byte ptr [rbp + 0x39], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000046bd02: add byte ptr [rbp + 0x3b], dh; add rsp, 0x118; ret; 
0x000000000040fc83: add byte ptr [rbp + 0x3e], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000004394f9: add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x000000000044fe4e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000041e405: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000044a6a7: add byte ptr [rbp + 0x41], dh; mov eax, edx; add rsp, 0x148; ret; 
0x0000000000439186: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x00000000004390e5: add byte ptr [rbp + 0x43], dh; add rsp, 0x18; ret; 
0x000000000043c4df: add byte ptr [rbp + 0x44], dh; add rsp, 0x110; pop rbx; ret; 
0x0000000000470639: add byte ptr [rbp + 0x44], dh; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000045ea7b: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000046b116: add byte ptr [rbp + 0x45], dh; leave; ret; 
0x000000000046f2a5: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000044a6f8: add byte ptr [rbp + 0x480b75c0], al; add esp, 8; ret; 
0x000000000046b6bc: add byte ptr [rbp + 0x480f74f6], al; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000043c499: add byte ptr [rbp + 0x487275c0], al; mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000043a630: add byte ptr [rbp + 0x4a], dh; add rsp, 0x58; ret; 
0x0000000000439056: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000043a7d1: add byte ptr [rbp + 0x57], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408761: add byte ptr [rbp + 0x5b0a75c0], al; ret; 
0x000000000042b561: add byte ptr [rbp + 0x629a74c9], 0xb2; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000046393b: add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x0000000000458ff5: add byte ptr [rbp + 0x6f], dh; add rsp, 0x98; ret; 
0x000000000044c3f4: add byte ptr [rbp + 0x7a850fc9], al; or dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000472b58: add byte ptr [rbp + 0xa], dh; add rsp, 0x28; ret; 
0x0000000000470a02: add byte ptr [rbp + 0xa], dh; add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000043a4c9: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000046e424: add byte ptr [rbp + 0xa], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000416e42: add byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046b21f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000046a16f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000043b076: add byte ptr [rbp + 0xf], dh; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x000000000040951f: add byte ptr [rbp + 1], cl; out dx, al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000004393ac: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x00000000004706e2: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000457c6f: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000004697e7: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000004195ef: add byte ptr [rbp + 7], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004732cb: add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x000000000041c906: add byte ptr [rbp + 7], dh; ret; 
0x000000000040a5e3: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000045ea1e: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x000000000043a757: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004699a8: add byte ptr [rbp + 9], dh; add rsp, 0x38; ret; 
0x000000000041e00b: add byte ptr [rbp + 9], dh; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000045b8df: add byte ptr [rbp + 9], dh; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004385fd: add byte ptr [rbp + rbp*2 - 0x77], dh; fimul dword ptr [rax - 0x77]; out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000045e905: add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004502af: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000040ee7d: add byte ptr [rbp + rcx*4 + 0x35], cl; push rbx; mov ch, 6; add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x0000000000422546: add byte ptr [rbp + rcx*4 + 0xd], cl; jb 0x2254c; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004732d2: add byte ptr [rbp + rdx*2 + 0x48], dh; add esp, 0x18; ret; 
0x0000000000435997: add byte ptr [rbp - 0x12], dh; xor eax, eax; ret; 
0x000000000041a076: add byte ptr [rbp - 0x1b], dh; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000044df77: add byte ptr [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x000000000046089b: add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000401936: add byte ptr [rbp - 0x38], dh; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000424017: add byte ptr [rbp - 0x3a2b8b37], 0xfd; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000043a402: add byte ptr [rbp - 0x3dbbf040], al; add rsp, 8; ret; 
0x000000000043a57a: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000045f23a: add byte ptr [rbp - 0x427bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000468230: add byte ptr [rbp - 0x72b6c9ec], cl; adc al, 0x90; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000046da8f: add byte ptr [rbp - 0x75], cl; or dword ptr [rcx - 0x75], ecx; sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000044bc8d: add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x0000000000445f76: add byte ptr [rbp - 0x77], al; ret; 
0x0000000000418108: add byte ptr [rbp - 0x7b], al; rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000043be0f: add byte ptr [rbp - 0x7c], al; sal byte ptr [rdx + rbx + 0x41], 0xf; mov dh, 0x4a; add dword ptr [rcx - 0x7d], ecx; ret 0x4801; 
0x0000000000447f17: add byte ptr [rbp - 0x7cf78140], al; call 0x8470823; pop rbx; ret; 
0x0000000000411f62: add byte ptr [rbp - 1], bh; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000429909: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000415651: add byte ptr [rbx + 0x1d894803], cl; and eax, 0x83000925; ret 0x8901; 
0x000000000041c9bd: add byte ptr [rbx + 0x257f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000040193f: add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x000000000044acbc: add byte ptr [rbx + 0x267f01f8], al; xor eax, eax; add rsp, 8; ret; 
0x000000000043585d: add byte ptr [rbx + 0x29493fe2], al; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000046b9bc: add byte ptr [rbx + 0x2e7f01f8], al; pop rbx; ret; 
0x0000000000415109: add byte ptr [rbx + 0x317f01f8], al; add rsp, 8; ret; 
0x00000000004257af: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000043083f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000046606e: add byte ptr [rbx + 0x4625b05], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0xc74; 
0x000000000042577f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000043081f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000424a6f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 3]; vzeroupper; ret; 
0x0000000000470d45: add byte ptr [rbx + 0x48], bl; add eax, dword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000457baf: add byte ptr [rbx + 0x5421205], cl; add cl, al; call 0x1e5fec7; mov dword ptr [rip + 0x5000e], eax; ret; 
0x0000000000458974: add byte ptr [rbx + 0x567421f8], al; mov eax, 0x16; ret; 
0x000000000041d236: add byte ptr [rbx + 0x57f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408b80: add byte ptr [rbx + 0x5a7f01fa], al; call rax; 
0x0000000000459526: add byte ptr [rbx + 0x5d], bl; mov eax, r12d; pop r12; ret; 
0x000000000046acaa: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000475103: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000403a26: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040fc8c: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043a56f: add byte ptr [rbx + 0x7172a05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000046b79f: add byte ptr [rbx + 0x75c08507], cl; or cl, byte ptr [rdi]; add ebp, edx; xor eax, eax; ret; 
0x000000000041ecf5: add byte ptr [rbx + 0x8d1b80d], cl; add dh, dh; ret 0x7420; 
0x000000000041ea9f: add byte ptr [rbx + 0x8d32215], cl; add byte ptr [rbx + 0x8d4080d], cl; add dh, dh; ret 0x7420; 
0x000000000041eaa5: add byte ptr [rbx + 0x8d4080d], cl; add dh, dh; ret 0x7420; 
0x000000000041719a: add byte ptr [rbx + 0x909f205], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000041564b: add byte ptr [rbx + 0x9254215], cl; add byte ptr [rbx + 0x1d894803], cl; and eax, 0x83000925; ret 0x8901; 
0x00000000004171e1: add byte ptr [rbx + 0x97f01f8], al; ret; 
0x0000000000418b98: add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x0000000000457b9f: add byte ptr [rbx + 0xb74013f], al; ret; 
0x00000000004556af: add byte ptr [rbx + 0xb], dh; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000046bd86: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004220d5: add byte ptr [rbx + 8], dh; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000409d4e: add byte ptr [rbx + rcx*4 + 0x15], cl; ret 0x9aa; 
0x0000000000441e14: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x10; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e91: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x10; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a4e: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440698: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b3: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x18; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000044528d: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x18; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000443d04: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x30; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000442efa: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x40; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046b407: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000470167: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000409c23: add byte ptr [rbx + rcx*4 + 4], cl; ret 0x3145; 
0x00000000004428f3: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000040bc5a: add byte ptr [rbx - 0x4217d783], cl; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040db47: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040e3ae: add byte ptr [rbx - 0x67b7df18], al; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e451: add byte ptr [rbx - 0x67b7df18], al; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000408a78: add byte ptr [rbx - 0x70f0fe06], al; jle 0x8a81; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x0000000000408b2f: add byte ptr [rbx - 0x70f0fe06], al; out dx, eax; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], al; mov rdi, r8; call rax; 
0x00000000004049db: add byte ptr [rbx - 0x70f0fe08], al; add dword ptr [rcx], 0; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000041ed27: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x1174e; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead7: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x690e; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x00000000004705a0: add byte ptr [rbx - 0x72b7f7bd], cl; adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000456b1b: add byte ptr [rbx - 0x74b78bbd], cl; push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x000000000040e07a: add byte ptr [rbx - 0x78f0d008], al; mov esp, 0x8900000c; ret 0xc083; 
0x0000000000457c93: add byte ptr [rbx - 0x78f0fe06], al; ret; 
0x000000000040bd3f: add byte ptr [rbx - 0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x000000000045896b: add byte ptr [rbx - 0x7bf0ce08], al; add dword ptr [rcx], 0; add byte ptr [rbx + 0x567421f8], al; mov eax, 0x16; ret; 
0x000000000043fa3f: add byte ptr [rbx - 0x7cb769ec], cl; ret; 
0x000000000044fc47: add byte ptr [rbx - 0x7cb7fbbd], cl; ret; 
0x000000000042519a: add byte ptr [rbx - 0x7cf0f706], al; in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x00000000004251a3: add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000044bc88: add byte ptr [rbx - 0x7d], cl; cmp al, 0x29; add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000043ab67: add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000046e006: add byte ptr [rcx + 0x148b48d8], cl; ret 0xb60f; 
0x0000000000411887: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000411801: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000040ee84: add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x0000000000454c91: add byte ptr [rcx + 0x39], al; ret; 
0x00000000004682f7: add byte ptr [rcx + 0x39], cl; call 0x1f15fe73; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x0000000000468397: add byte ptr [rcx + 0x39], cl; call 0x1f15ff13; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x0000000000418fd0: add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x000000000043574f: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000041e29f: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000041049b: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000417f2b: add byte ptr [rcx + 0x44c789ea], cl; mov esi, esi; mov eax, 0xea; syscall; 
0x0000000000450063: add byte ptr [rcx + 0x5643e05], cl; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000447848: add byte ptr [rcx + 0x5c415bd0], cl; ret; 
0x0000000000471d4e: add byte ptr [rcx + 0x5c], al; pop r13; cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x00000000004255f8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040ddcf: add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x0000000000422fec: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000450f34: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x0000000000450ec1: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000004540b9: add byte ptr [rcx + 1], bh; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000435e8f: add byte ptr [rcx + 1], cl; ret; 
0x0000000000466138: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x00000000004225b2: add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x000000000045ea5c: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043cefd: add byte ptr [rcx + rcx*4 + 0x25], cl; ret; 
0x0000000000402b7d: add byte ptr [rcx + rcx*4 + 0x3d], cl; ret; 
0x00000000004161dc: add byte ptr [rcx + rcx*4 + 0x63], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408a81: add byte ptr [rcx + rcx*4 - 0x11], al; call rax; 
0x0000000000408b38: add byte ptr [rcx + rcx*4 - 0x12], al; mov rdi, r8; call rax; 
0x000000000041083c: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046df2f: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000412b57: add byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004095df: add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, r13; mov rdx, rbp; call rbx; 
0x0000000000417e9a: add byte ptr [rcx + rcx*4 - 0x1e], cl; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x000000000040dbfc: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004594e9: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000464610: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041e611: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000046d0c9: add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x0000000000412b5f: add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000457b2a: add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x000000000040c205: add byte ptr [rcx + rcx*4 - 0x7b], cl; idiv rdi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000436502: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rdi, r12; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x000000000040d897: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453671: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045375d: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000456ede: add byte ptr [rcx + rcx*4 - 2], al; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x000000000040adef: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000413f9c: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040d945: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454326: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043660e: add byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045e8fc: add byte ptr [rcx + rdi - 0x80], dh; cmp eax, 0x47172; add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000045761f: add byte ptr [rcx - 0x17f3db8c], cl; mov r14b, 0xfb; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000041467f: add byte ptr [rcx - 0x38b78f89], cl; ret 0x6520; 
0x00000000004049e4: add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000040bac7: add byte ptr [rcx - 0x39], cl; ror byte ptr [rax + 0x48004a6c], 0x89; ret 0x294d; 
0x000000000044a5d1: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000402834: add byte ptr [rcx - 0x67fdfe01], al; add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x00000000004682ff: add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x0000000000444985: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000041ac58: add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret; 
0x0000000000460a0d: add byte ptr [rcx - 0x73], cl; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000465fe2: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x0000000000466074: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0xc74; 
0x000000000040e076: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esp, 0x8900000c; ret 0xc083; 
0x000000000044cbeb: add byte ptr [rcx - 0x75], cl; cmp byte ptr [r13 - 0x77], r9b; ret; 
0x0000000000411325: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000457a9f: add byte ptr [rcx - 0x760f142a], cl; ret 0xceeb; 
0x0000000000478652: add byte ptr [rcx - 0x77], cl; adc al, 0xee; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x0000000000407957: add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000475844: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004091e4: add byte ptr [rcx - 0x77], cl; ret 0x11e9; 
0x000000000040c754: add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x00000000004061dc: add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x000000000040cfd3: add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x00000000004598ef: add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000004035e8: add byte ptr [rcx - 0x77], cl; ret 0xcfe8; 
0x00000000004035f5: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040be55: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax - 0x8a743], eax; jmp qword ptr [rax]; 
0x000000000040517f: add byte ptr [rcx - 0x7d], cl; mov dword ptr [rcx], 0x83480288; ret 0x4101; 
0x000000000046d085: add byte ptr [rcx - 0x7d], cl; ret 0x4801; 
0x0000000000436a47: add byte ptr [rcx - 0x7d], cl; ret 0x4917; 
0x000000000040fdbf: add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x000000000042ebef: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000427bbf: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000040b64e: add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004428fb: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000041b98f: add byte ptr [rcx - 0xa], al; ret 0xf0f; 
0x0000000000441cb1: add byte ptr [rcx - 0xa], al; ret; 
0x0000000000423cc6: add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000043abcc: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000401190: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000418888: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c8ac; ret; 
0x0000000000418858: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c8e4; ret; 
0x0000000000418818: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c92c; ret; 
0x000000000046c046: add byte ptr [rcx], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000408852: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ea55: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000045e8fa: add byte ptr [rcx], al; je 0x5e938; cmp byte ptr [rip + 0x47172], 0; je 0x5e965; mov eax, 0x101; syscall; 
0x000000000045ea5a: add byte ptr [rcx], al; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000041ee59: add byte ptr [rcx], al; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x000000000041eb39: add byte ptr [rcx], al; lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000040160f: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004171a0: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000463942: add byte ptr [rcx], al; ret 0x8348; 
0x0000000000465c76: add byte ptr [rcx], bh; ret 0x373; 
0x000000000041802a: add byte ptr [rcx], bh; ret 0x840f; 
0x0000000000458a15: add byte ptr [rcx], bh; ret 0x850f; 
0x000000000041a040: add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000403a6e: add byte ptr [rcx], bh; ret; 
0x000000000042629e: add byte ptr [rcx], ch; ret 0x840f; 
0x000000000044eeaf: add byte ptr [rcx], ch; ret 0xd089; 
0x0000000000414b3e: add byte ptr [rcx], ch; ret 0xf883; 
0x0000000000426408: add byte ptr [rcx], ch; ret 0xf9c5; 
0x0000000000426356: add byte ptr [rcx], ch; ret 0xfac5; 
0x00000000004514ea: add byte ptr [rcx], ch; ret; 
0x0000000000412819: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000043f57a: add byte ptr [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000041e3ef: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000045e1cc: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000045acbc: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000043c2f2: add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x000000000043a36e: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000041ccc3: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000044e321: add byte ptr [rcx], dh; ror byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3de9; 
0x0000000000417ee7: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004391cf: add byte ptr [rcx], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x391e0; ret; 
0x000000000046b72f: add byte ptr [rcx], dh; sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000046d45d: add byte ptr [rcx], dh; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x0000000000465f2e: add byte ptr [rcx], dh; shr al, 0xfa; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000046f2ef: add byte ptr [rcx], dh; shr bl, 0x9c; nop dword ptr [rax]; call rax; 
0x000000000045e76d: add byte ptr [rcx], dh; shr bl, 0xb4; call 0x3ad90; nop word ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x000000000046477a: add byte ptr [rcx], dh; test byte ptr [rcx - 0x7d], 0xc2; xor byte ptr [rbp + 0x63], cl; ret; 
0x000000000044af49: add byte ptr [rdi + 0x1f88307], al; jg 0x4af58; ret; 
0x0000000000423a55: add byte ptr [rdi + 0x68], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004171db: add byte ptr [rdi + 0x909ae05], al; add byte ptr [rbx + 0x97f01f8], al; ret; 
0x0000000000415103: add byte ptr [rdi + 0x92a8605], al; add byte ptr [rbx + 0x317f01f8], al; add rsp, 8; ret; 
0x0000000000408b7a: add byte ptr [rdi + 0x9eba715], al; add byte ptr [rbx + 0x5a7f01fa], al; call rax; 
0x00000000004049d5: add byte ptr [rdi + 0xa2c2405], al; add byte ptr [rbx - 0x70f0fe08], al; add dword ptr [rcx], 0; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000047537e: add byte ptr [rdi + 1], bh; call rax; 
0x0000000000403d74: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca5: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000472c46: add byte ptr [rdi + rbp + 0x48], dh; cmp eax, 0x7fff; je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x000000000045d1e6: add byte ptr [rdi + rcx + 0x48], dh; add eax, 2; ret; 
0x000000000046b63f: add byte ptr [rdi + rcx - 0x43], cl; ret 0x40b9; 
0x00000000004386f6: add byte ptr [rdi + rdx + 0x31], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x38760; ret; 
0x00000000004191d6: add byte ptr [rdi + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000438796: add byte ptr [rdi + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000421e69: add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000046ff9c: add byte ptr [rdi], cl; adc dword ptr [rax + 0x2a0], eax; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x00000000004571bd: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000041591c: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000045f0b8: add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000423e07: add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000423e6f: add byte ptr [rdi], cl; adc dword ptr [rdi - 0x20], eax; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000407f09: add byte ptr [rdi], cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000045d1e3: add byte ptr [rdi], cl; add byte ptr [rax], al; je 0x5d1f8; add rax, 2; ret; 
0x000000000043225c: add byte ptr [rdi], cl; add byte ptr [rax], al; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000437d04: add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x0000000000438597: add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 7]; xor eax, eax; ret; 
0x000000000042fe27: add byte ptr [rdi], cl; add esi, edx; jne 0x2fe31; vzeroupper; ret; 
0x000000000042523f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000424a3f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004302df: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000042fb0f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000042524f: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x00000000004302ef: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb1f: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000415acf: add byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000406d57: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000407917: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000408657: add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000443102: add byte ptr [rdi], cl; mov dh, 0x50; dec dword ptr [rbp - 0x77]; ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x0000000000406c87: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000045597f: add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000040fe56: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000405a82: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000042e7af: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042470f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042473f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042472f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000045a67f: add byte ptr [rdi], cl; mov esp, 0x80ea83c0; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad2f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad3f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb9f: add byte ptr [rdi], cl; mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000042bccf: add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000042bb8f: add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000045de1f: add byte ptr [rdi], cl; mov esp, 0xe0ea83c0; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000042471f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000040ddc9: add byte ptr [rdi], cl; test byte ptr [rax], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x0000000000472c95: add byte ptr [rdi], cl; test byte ptr [rsi - 0x48000000], dh; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000004429b8: add byte ptr [rdi], cl; test dl, ch; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000046b94d: add byte ptr [rdi], cl; test dword ptr [rax + rax - 0x76b80000], ecx; ret 0x8348; 
0x000000000040283a: add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x0000000000411b4f: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043862a: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], esi; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000454650: add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x76fffffc], ebx; ret 0xc083; 
0x000000000043c7cd: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000043cddd: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8d48; 
0x000000000043fbf9: add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x000000000043cdbc: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8d48; 
0x000000000046ff9b: add byte ptr [rdi], r9b; adc dword ptr [rax + 0x2a0], eax; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x0000000000410837: add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045b0df: add byte ptr [rdx + 0x14], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000403d6f: add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x00000000004674ab: add byte ptr [rdx + 0x63], cl; add al, 0xae; add rax, rsi; jmp rax; 
0x0000000000466c6a: add byte ptr [rdx + 0x63], cl; add al, 0xaf; add rax, rdi; jmp rax; 
0x0000000000477a57: add byte ptr [rdx + 0x63], cl; je 0x77a5d; or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000043a575: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x00000000004146c4: add byte ptr [rdx + 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000417243: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x000000000043c223: add byte ptr [rdx + rdx + 0x48], dh; test edx, edx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000043ae7b: add byte ptr [rdx + riz + 0x48], dh; lea eax, [rip + 0x70dcb]; ret; 
0x0000000000423b85: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x23bd0; adc bh, bh; ret; 
0x0000000000423d95: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x23de0; adc bh, bh; ret; 
0x00000000004488f6: add byte ptr [rdx - 0x75], cl; add al, 0xe0; test rax, rax; je 0x48902; call rax; 
0x00000000004358af: add byte ptr [rdx - 0xe], ah; jge 0x358fc; js 0x358ca; jae 0x294b989c; ret 0xc748; 
0x000000000046c495: add byte ptr [rdx], al; add byte ptr [rax], al; add dh, dh; add eax, 0x3fb03; jne 0x6cb50; ret; 
0x000000000044a3e7: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046bb88: add byte ptr [rdx], dl; jae 0x6bb80; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000045ea57: add byte ptr [rip + 0x410000], bh; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000045ea56: add byte ptr [rip + 0x410000], dil; je 0x5ea88; mov eax, 0x101; syscall; 
0x00000000004446c9: add byte ptr [rip + 0x58e90000], al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000043225a: add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x000000000045895f: add byte ptr [rip - 0x5cf0b800], cl; ret 0x820f; 
0x000000000043a681: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x000000000043c5c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; ret; 
0x0000000000415575: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000043b884: add byte ptr [rsi + 0x48], ah; movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000043b933: add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000417c39: add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x0000000000468341: add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x0000000000417cd7: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000417cd7: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x000000000043c27f: add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x0000000000430b01: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x000000000045e1eb: add byte ptr [rsi + 0xf], ah; jbe 0x5e23f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000045acdb: add byte ptr [rsi + 0xf], ah; je 0x5ad2f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000416f5c: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000044c3fc: add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x000000000045ac24: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000458c4f: add byte ptr [rsi + 1], bh; mov eax, 0xca; syscall; 
0x00000000004188c8: add byte ptr [rsi + 5], dh; ret; 
0x000000000041eba7: add byte ptr [rsi + rdx - 0x7d], dh; loope 0x1ebb1; lea rax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x0000000000457add: add byte ptr [rsi - 0x70], ah; and edi, 2; je 0x57af0; ret; 
0x000000000041c8fd: add byte ptr [rsi - 0x70], ah; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c6d: add byte ptr [rsi - 0x70], ah; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755ad: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004307ed: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043941d: add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x000000000043941d: add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x000000000041710d: add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000004391fd: add byte ptr [rsi - 0x70], ah; mov eax, 1; syscall; 
0x00000000004391fd: add byte ptr [rsi - 0x70], ah; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x000000000043858d: add byte ptr [rsi - 0x70], ah; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041714d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000437cdd: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x6c7a1]; test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x000000000043933d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x0000000000430a8d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000430a4d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a6d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042589d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000043adcd: add byte ptr [rsi - 0x70], ah; ret; 
0x000000000042429d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2bd: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000045712b: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000407f7e: add byte ptr [rsi], cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000044a4f1: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041e7ee: add byte ptr cs:[rax], al; cmovne rax, rdx; ret; 
0x000000000041e7e7: add byte ptr cs:[rax], al; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6be: add byte ptr es:[rax], al; cmovne rax, rdx; ret; 
0x000000000041e7b7: add byte ptr es:[rax], al; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000043a577: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000045431b: add byte ptr gs:[rax + 0x39], cl; bnd jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453752: add byte ptr gs:[rax + 0x39], cl; bnd jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040dbf1: add byte ptr gs:[rax + 0x39], cl; bnd jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045557c: add byte ptr gs:[rax - 0x39], cl; ret 0x6c88; 
0x000000000040bac5: add byte ptr gs:[rcx - 0x39], cl; ror byte ptr [rax + 0x48004a6c], 0x89; ret 0x294d; 
0x000000000041e797: add byte ptr ss:[rax], al; cmove rax, rdx; ret; 
0x0000000000435951: add ch, al; clc; ja 0x359b1; pop r12; pop rbp; ret; 
0x0000000000469827: add ch, al; ret; 
0x000000000042355f: add ch, al; stc; jle 0x2356b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000042371f: add ch, al; stc; jle 0x2372b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000045d56f: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000045a95e: add ch, al; sti; xchg ebx, eax; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000045de41: add ch, al; sti; xchg ebx, eax; rol byte ptr [rbp - 0x3ad98a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x0000000000424504: add ch, al; sti; xchg ebx, eax; rol byte ptr [rbp - 0x3adc8a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000042425a: add ch, al; sti; xchg ebx, eax; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000045c0fa: add ch, al; sti; xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000450f30: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x0000000000450f70: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000043741d: add ch, cl; or dword ptr [rbx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000457bb5: add cl, al; call 0x1e5fec7; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000040197c: add cl, al; call 0xfe09c8f; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000407403: add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x000000000042254d: add cl, al; loope 0x22557; add rcx, r9; jmp rcx; 
0x000000000045dfb0: add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e247: add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e267: add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e287: add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043739f: add cl, byte ptr [rax + 0x39]; int1; jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x0000000000444989: add cl, byte ptr [rax + 0x39]; ret; 
0x00000000004116be: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xf748; 
0x00000000004370b2: add cl, byte ptr [rax + 0xf]; stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000436f8d: add cl, byte ptr [rax + 1]; ret; 
0x000000000041e702: add cl, byte ptr [rax - 0x73]; adc eax, 0x1076; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e854: add cl, byte ptr [rax - 0x73]; adc eax, 0x1664; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041e754: add cl, byte ptr [rax - 0x73]; adc eax, 0x17a4; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e654: add cl, byte ptr [rax - 0x73]; adc eax, 0x18a4; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x000000000041e8b2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2516; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2646; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2746; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2d66; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2e96; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e2: add cl, byte ptr [rax - 0x73]; adc eax, 0x2f96; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000041e902: add cl, byte ptr [rax - 0x73]; adc eax, 0xe36; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e802: add cl, byte ptr [rax - 0x73]; adc eax, 0xf76; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041e88b: add cl, byte ptr [rax - 0x73]; add eax, 0x35ed; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e78b: add cl, byte ptr [rax - 0x73]; add eax, 0x372d; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e68b: add cl, byte ptr [rax - 0x73]; add eax, 0x382d; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e9b2: add cl, byte ptr [rax - 0x73]; add eax, 0x5026; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000043aeb2: add cl, byte ptr [rax - 0x77]; add eax, 0x70d9e; lea rax, [rip + 0x70d8f]; ret; 
0x000000000045f157: add cl, byte ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000044395e: add cl, byte ptr [rax - 0x77]; ret 0x840f; 
0x0000000000436e31: add cl, byte ptr [rax - 0x77]; ret; 
0x0000000000405185: add cl, byte ptr [rax - 0x7d]; ret 0x4101; 
0x0000000000425360: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000455c8f: add cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x00000000004253c3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x0000000000407df9: add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000454766: add cl, byte ptr [rcx + 0x29]; test dword ptr [rcx + 0xf], 0x8941d749; shr ecx, cl; push rax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004100f2: add cl, byte ptr [rcx - 0x77]; ror byte ptr [rax - 0x77], cl; ret 0x78e9; 
0x000000000040fe6f: add cl, byte ptr [rcx - 0x77]; ror byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004430c5: add cl, byte ptr [rcx - 0x7d]; ret 0x8301; 
0x000000000041030f: add cl, byte ptr [rcx - 0x7d]; ret 0xe902; 
0x000000000040269c: add cl, byte ptr [rcx - 0x7d]; rol dword ptr [rcx + rcx*2], 0x83; ret 0x8304; 
0x000000000042203a: add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x000000000045ce60: add cl, byte ptr [rdi]; add esi, edx; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000402023: add cl, byte ptr [rdi]; xchg esp, eax; ret 0xca21; 
0x00000000004495f8: add cl, ch; adc al, byte ptr [rdi]; add byte ptr [rax], al; nop; ret; 
0x000000000047859c: add cl, ch; jle 0x785ae; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000430bbf: add cl, ch; mov edx, dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, ecx; ret; 
0x00000000004446cc: add cl, ch; pop rax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000454724: add cl, ch; pop rdi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004067ab: add cl, ch; ret 0xfff1; 
0x00000000004511a8: add cl, ch; ret 0xfff8; 
0x0000000000410a77: add cl, ch; ret 0xfffe; 
0x0000000000436428: add cl, ch; ret 8; 
0x000000000043817f: add cl, ch; ret; 
0x00000000004785af: add cl, ch; wait; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000040ee4e: add cl, ch; xchg esi, eax; call 0x1f10ee55; add al, bpl; ret; 
0x000000000043adfe: add dh, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x0000000000435c57: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d07: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x0000000000417b84: add dh, byte ptr [rbp + 0x19]; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000043a60e: add dh, byte ptr [rbp + 0x2f]; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000468337: add dh, byte ptr [rbp + 0x36]; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000041e886: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e786: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e686: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x0000000000457009: add dh, byte ptr [rbp + 0x64]; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000042b162: add dh, byte ptr [rbp - 0x3c]; add rax, rdx; vzeroupper; ret; 
0x0000000000420768: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000042382f: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000046c499: add dh, dh; add eax, 0x3fb03; jne 0x6cb50; ret; 
0x000000000043c9fc: add dh, dh; ret 0x7402; 
0x000000000043ca08: add dh, dh; ret 0x7404; 
0x0000000000412ce7: add dh, dh; ret 0x7420; 
0x000000000042b8f7: add dh, dh; ret 0x7501; 
0x000000000041840b: add dh, dh; ret 0x7502; 
0x000000000042b911: add dh, dh; ret 0x7504; 
0x000000000042b8c9: add dh, dh; ret 0x7510; 
0x000000000042b8d6: add dh, dh; ret 0x7520; 
0x000000000042b8e3: add dh, dh; ret 0x7540; 
0x000000000041b528: add dh, dh; ret 0xf0f; 
0x000000000044c6d4: add dh, dh; ret 0xf10; 
0x00000000004031c4: add dh, dh; ret 0xf20; 
0x000000000044c6cb: add dh, dh; ret 0xf40; 
0x000000000044e0cd: add dh, dh; ret 0xf50; 
0x000000000041eeba: add dword ptr [eax], eax; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x000000000043fac0: add dword ptr [r13 - 0x77], r9d; ret; 
0x000000000040865a: add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000421119: add dword ptr [rax + 0x29], ecx; int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000044bd02: add dword ptr [rax + 0x29], ecx; retf 0x3948; ret 0xe57f; 
0x000000000044bcc7: add dword ptr [rax + 0x29], ecx; retf 0x3948; ret 0xe87f; 
0x0000000000443ec3: add dword ptr [rax + 0x39], ecx; ret 0x1073; 
0x0000000000464cd2: add dword ptr [rax + 0x39], ecx; ret 0x1172; 
0x00000000004408ea: add dword ptr [rax + 0x39], ecx; ret 0xee75; 
0x000000000045f6ac: add dword ptr [rax + 0x39], ecx; ret 0xf48; 
0x0000000000415ef3: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000042b106: add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x0000000000416623: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x000000000045fd8b: add dword ptr [rax + 1], ecx; ret; 
0x0000000000469b57: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040870f: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000439700: add dword ptr [rax + 9], ecx; ror byte ptr [rcx - 0x77], 1; add ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000406b69: add dword ptr [rax + rcx - 0x11fe1700], -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000044fa2b: add dword ptr [rax - 0x16c7dbbc], ecx; ret 0xffe8; 
0x000000000041ee5a: add dword ptr [rax - 0x73], ecx; adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x000000000041eb3a: add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x00000000004540b2: add dword ptr [rax - 0x73], ecx; add eax, 0x4dd66; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b7: add dword ptr [rax - 0x73], ecx; add eax, 0x92f81; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2ac: add dword ptr [rax - 0x73], ecx; add eax, 0x9308c; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000041c597: add dword ptr [rax - 0x73], ecx; push rsp; ret 0xe8f0; 
0x0000000000439d81: add dword ptr [rax - 0x75], ecx; or byte ptr [rcx - 0x77], cl; ret; 
0x000000000043af77: add dword ptr [rax - 0x77], ecx; adc eax, 0x6bde9; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x00000000004188f5: add dword ptr [rax - 0x77], ecx; adc eax, 0x8c8ab; ret; 
0x0000000000460afb: add dword ptr [rax - 0x77], ecx; cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x000000000043f6cf: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x0000000000414344: add dword ptr [rax - 0x77], ecx; ret 0x850f; 
0x000000000045f133: add dword ptr [rax - 0x77], ecx; ret 0x894c; 
0x0000000000463d00: add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x0000000000459e31: add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000407797: add dword ptr [rax - 0x7cb700b2], ecx; ret 0x4801; 
0x00000000004097c9: add dword ptr [rax - 0x7d], ecx; ret 0x4001; 
0x00000000004418a8: add dword ptr [rax - 0x7d], ecx; ret 0x4401; 
0x000000000044fdef: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000436a76: add dword ptr [rax - 0x7d], ecx; ret 0x480a; 
0x000000000041f02a: add dword ptr [rax - 0x7d], ecx; ret 0x4901; 
0x000000000046cc35: add dword ptr [rax - 0x7d], ecx; ret 0x4c01; 
0x0000000000406d5b: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000436909: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000455b3d: add dword ptr [rax - 0x7d], ecx; ret 0x8b04; 
0x000000000040791b: add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000406c8b: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000469023: add dword ptr [rax - 0x7d], ecx; rol dword ptr [rcx], 0x84; sal byte ptr [rbp - 0x32], cl; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x00000000004442ed: add dword ptr [rax - 0x7d], ecx; rol dword ptr [rcx], 9; ret 0x7439; 
0x000000000040be59: add dword ptr [rax - 0x8a743], eax; jmp qword ptr [rax]; 
0x0000000000451e73: add dword ptr [rax - 0x90043], eax; jmp qword ptr [rax]; 
0x000000000041eb84: add dword ptr [rax], 0; test edx, 0x40000000; je 0x1eb5f; ret; 
0x0000000000434db6: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x000000000040ae02: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000044975b: add dword ptr [rax], eax; add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000476cc5: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000043c435: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x000000000046ba8b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xb; cmove rax, rdx; ret; 
0x00000000004018ec: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; cmp eax, 0x777ca; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000472f80: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or al, 0x24; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000439bed: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0x7401; 
0x000000000044332b: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000453de3: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000451a54: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x0000000000445e15: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb6eb; 
0x000000000043abcd: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000440caf: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042f68d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041c704: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x0000000000459a46: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042ace7: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042f5e1: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000462736: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000472c9d: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000004751ff: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000040e224: add dword ptr [rax], eax; add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000475f81: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000403d7b: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403cac: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x75841]; syscall; 
0x000000000046b733: add dword ptr [rax], eax; add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000046b55e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000418839: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000458920: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417cf8: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000417cf8: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x0000000000401191: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe; mov qword ptr [rsp], 0x20; syscall; 
0x000000000047584c: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000417cd4: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd4: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c4c: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000418889: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418859: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000418819: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000046b47e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x00000000004540bb: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000418617: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004146c6: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x00000000004101ad: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000418330: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000453938: add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000045401c: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000044fe4b: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x000000000041e550: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004560a7: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000478acd: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004588d0: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000043879a: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000043879a: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38800; ret; 
0x0000000000439201: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x0000000000460481: add dword ptr [rax], eax; add byte ptr [rax], al; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x0000000000416e40: add dword ptr [rax], eax; add byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000458972: add dword ptr [rax], eax; add byte ptr [rbx + 0x567421f8], al; mov eax, 0x16; ret; 
0x0000000000475101: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004428f1: add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000043fa3d: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cb769ec], cl; ret; 
0x0000000000425198: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cf0f706], al; in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x0000000000408a7f: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x11], al; call rax; 
0x00000000004049e2: add dword ptr [rax], eax; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x00000000004091e2: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x11e9; 
0x00000000004429bc: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000438595: add dword ptr [rax], eax; add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 7]; xor eax, eax; ret; 
0x000000000043b931: add dword ptr [rax], eax; add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000042b8f5: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000042b902: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000042b90f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000042b8c7: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000042b8d4: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000042b8e1: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000041ee90: add dword ptr [rax], eax; and ch, 4; jne 0x1ee44; ret; 
0x000000000041ed37: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000041c8d0: add dword ptr [rax], eax; cmp rax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x000000000041ed6c: add dword ptr [rax], eax; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ee0c: add dword ptr [rax], eax; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eefc: add dword ptr [rax], eax; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041ed30: add dword ptr [rax], eax; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041f6ad: add dword ptr [rax], eax; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041edcb: add dword ptr [rax], eax; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eebb: add dword ptr [rax], eax; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000417f2a: add dword ptr [rax], eax; mov edx, ebp; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000417f5c: add dword ptr [rax], eax; mov edx, ebp; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000043874f: add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000407a4a: add dword ptr [rax], eax; nop dword ptr [rax]; ret; 
0x000000000041ee25: add dword ptr [rax], eax; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041eea5: add dword ptr [rax], eax; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000041ef15: add dword ptr [rax], eax; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000043c221: add dword ptr [rax], edx; je 0x3c238; test rdx, rdx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000457777: add dword ptr [rbp + 0x16], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000435fc7: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35fc0; sub rax, 1; ret; 
0x0000000000435e77: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x35e70; lea rax, [rcx - 1]; ret; 
0x0000000000417cf3: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000417cf3: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x00000000004362be: add dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000463933: add dword ptr [rbp + 0x34840fd2], eax; add al, byte ptr [rax]; add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000045ca00: add dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x28; call rbx; 
0x000000000043fac1: add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000439e57: add dword ptr [rbp - 0x7b], ecx; ror byte ptr [rcx + 0xf], 0x45; ret 0x8948; 
0x00000000004430c9: add dword ptr [rbx + 0x394907e0], eax; ret 0xe872; 
0x0000000000453def: add dword ptr [rbx + 0x55899714], ecx; add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x000000000041a03a: add dword ptr [rbx + 0x8b14305], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000040186e: add dword ptr [rbx + 0xf], ebx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x0000000000401865: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x538d; 
0x00000000004022d3: add dword ptr [rbx - 0x50f0fe40], eax; ret 0xda89; 
0x000000000041c594: add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x00000000004435e4: add dword ptr [rcx + 0x39], ecx; ret 0x2073; 
0x0000000000417b8b: add dword ptr [rcx + 0x48641047], ecx; mov dword ptr [0x2f8], edi; ret; 
0x00000000004017f2: add dword ptr [rcx + 0xf], eax; xchg esp, eax; ret; 
0x00000000004094b7: add dword ptr [rcx + rcx*4 - 0x19], ecx; call rbx; 
0x0000000000415e75: add dword ptr [rcx + rcx*4 - 9], ecx; call qword ptr [rbx + 0x18]; 
0x0000000000458e2c: add dword ptr [rcx + rsi + 0x45], esi; xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000458608: add dword ptr [rcx - 0x3fcef7b9], ecx; add rsp, 0x10; pop rbx; ret; 
0x0000000000436af2: add dword ptr [rcx - 0x6ff0efbf], ecx; ret; 
0x0000000000402699: add dword ptr [rcx - 0x77], eax; add cl, byte ptr [rcx - 0x7d]; rol dword ptr [rcx + rcx*2], 0x83; ret 0x8304; 
0x000000000040b47e: add dword ptr [rcx - 0x77], eax; ret; 
0x000000000040b648: add dword ptr [rcx - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000046ab30: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000043be19: add dword ptr [rcx - 0x7d], ecx; ret 0x4801; 
0x0000000000458971: add dword ptr [rcx], 0; add byte ptr [rbx + 0x567421f8], al; mov eax, 0x16; ret; 
0x00000000004049e1: add dword ptr [rcx], 0; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000439163: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000043860b: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004442f1: add dword ptr [rcx], ecx; ret 0x7439; 
0x000000000045e564: add dword ptr [rdi + 0x19], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423f11: add dword ptr [rdi + 0x1c], edi; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x000000000041c9c0: add dword ptr [rdi + 0x25], edi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423d87: add dword ptr [rdi + 0x26], edi; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x000000000044acbf: add dword ptr [rdi + 0x26], edi; xor eax, eax; add rsp, 8; ret; 
0x000000000046b9bf: add dword ptr [rdi + 0x2e], edi; pop rbx; ret; 
0x000000000041510c: add dword ptr [rdi + 0x31], edi; add rsp, 8; ret; 
0x0000000000423536: add dword ptr [rdi + 0x37], edi; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f6: add dword ptr [rdi + 0x37], edi; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x000000000044fd24: add dword ptr [rdi + 0x3b], edi; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423b61: add dword ptr [rdi + 0x3c], edi; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x000000000044ff81: add dword ptr [rdi + 0x3c], edi; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000045007c: add dword ptr [rdi + 0x41], edi; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000408b83: add dword ptr [rdi + 0x5a], edi; call rax; 
0x0000000000458605: add dword ptr [rdi + 0xc], 1; mov dword ptr [rdi + 8], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000040fa4f: add dword ptr [rdi + 0xe], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041d239: add dword ptr [rdi + 5], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000044af4e: add dword ptr [rdi + 7], edi; ret; 
0x00000000004171e4: add dword ptr [rdi + 9], edi; ret; 
0x0000000000454942: add dword ptr [rdi + rcx + 0x45], eax; ret 0xaae9; 
0x000000000041b649: add dword ptr [rdi], 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041e299: add dword ptr [rdi], ecx; pop rax; add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000401868: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x00000000004022d6: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000004022e4: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xa5e9; 
0x00000000004180d7: add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000047200b: add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x000000000046a358: add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x0000000000436037: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x000000000042aed6: add dword ptr [rdx + 0x410d8d48], edx; add rax, -0x6eeb7500; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004362bc: add dword ptr [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000042383c: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000042077d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000046bd91: add dword ptr [rdx + rax*2], 1; ret; 
0x0000000000401c92: add dword ptr [rdx + rax], 0; add byte ptr [rax - 0x77], cl; add eax, 0xaa0c2; pop rbx; ret; 
0x0000000000418b9b: add dword ptr [rdx + rcx + 0x48], esi; add esp, 8; ret; 
0x00000000004206d6: add dword ptr [rdx - 0x2f], esp; jl 0x20723; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237d3: add dword ptr [rdx - 0xf], esp; jl 0x23820; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000423913: add dword ptr [rdx - 0xf], esp; jl 0x23960; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000402831: add dword ptr [rdx], eax; cwde; add byte ptr [rcx - 0x67fdfe01], al; add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x0000000000402837: add dword ptr [rdx], eax; cwde; add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x000000000045c9fa: add dword ptr [rdx], ebp; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000436361: add dword ptr [rdx], ebp; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000042751d: add dword ptr [rip + 0x62c0fc26], eax; movabs eax, dword ptr [0x204d8362f5ef20cd]; and eax, 0xb262def8; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000041719b: add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x000000000040884d: add dword ptr [rip + 0x9eecc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004110ff: add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x000000000046b7b6: add dword ptr [rsi - 0x10], edi; sub rsp, 8; call 0x17cf0; xor eax, eax; add rsp, 8; ret; 
0x0000000000415ca1: add dword ptr [rsp + rbp - 0x77], esi; ret 0xc883; 
0x000000000041f6ac: add dword ptr fs:[rax], eax; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041ef14: add dword ptr fs:[rax], eax; test edx, 0x40000000; je 0x1eee8; ret; 
0x0000000000459a5d: add dword ptr ss:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000430b1f: add eax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x30b78; movsxd rax, ecx; ret; 
0x000000000043ae1e: add eax, 0x11148b48; mov qword ptr [rax + 8], rdx; ret; 
0x000000000041ed2d: add eax, 0x1174e; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000045c7f3: add eax, 0x1188; cmovne rax, rdx; ret; 
0x000000000041ed70: add eax, 0x11d3b; cmove rax, rdx; ret; 
0x000000000041ee22: add eax, 0x120b9; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ee10: add eax, 0x1224b; cmove rax, rdx; ret; 
0x000000000041edc8: add eax, 0x12293; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041ee8d: add eax, 0x1236e; and ch, 4; jne 0x1ee44; ret; 
0x000000000045978e: add eax, 0x12bd; cmove rax, rdx; ret; 
0x000000000041eea2: add eax, 0x13019; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000043673d: add eax, 0x132e; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x0000000000471709: add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000459806: add eax, 0x1575; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000044a2e1: add eax, 0x15894800; rol qword ptr [rip + 0x39486400], 0x37; je 0x4a2f8; ret; 
0x000000000041e85e: add eax, 0x161d; cmovne rax, rdx; ret; 
0x000000000041ef12: add eax, 0x16409; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000041f6aa: add eax, 0x164c1; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041ef00: add eax, 0x166db; cmove rax, rdx; ret; 
0x000000000041eeb8: add eax, 0x16723; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x000000000041e75e: add eax, 0x172d; cmovne rax, rdx; ret; 
0x000000000045c7ce: add eax, 0x175d; cmove rax, rdx; ret; 
0x000000000044a724: add eax, 0x17740000; mov eax, 0x13e; syscall; 
0x000000000045c788: add eax, 0x17a3; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041e65e: add eax, 0x182d; cmovne rax, rdx; ret; 
0x0000000000437d06: add eax, 0x1d75c085; xor eax, eax; ret; 
0x000000000044a3e6: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043aeae: add eax, 0x2048b48; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x0000000000473137: add eax, 0x218c0; ret; 
0x000000000047312f: add eax, 0x218c4; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x0000000000437250: add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f05: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000459ec2: add eax, 0x21c9; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000043adfa: add eax, 0x2448d48; jo 0x3ae49; cmp dword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000041e8bc: add eax, 0x24bf; cmovne rax, rdx; ret; 
0x0000000000459eb0: add eax, 0x24cb; cmove rax, rdx; ret; 
0x0000000000459e68: add eax, 0x2513; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x000000000041e7bc: add eax, 0x25cf; cmovne rax, rdx; ret; 
0x000000000041e6bc: add eax, 0x26cf; cmovne rax, rdx; ret; 
0x00000000004393ae: add eax, 0x28c48348; ret; 
0x000000000041e8ec: add eax, 0x2d0f; cmovne rax, rdx; ret; 
0x000000000041e7ec: add eax, 0x2e1f; cmovne rax, rdx; ret; 
0x000000000041e6ec: add eax, 0x2f1f; cmovne rax, rdx; ret; 
0x000000000043f577: add eax, 0x310003ea; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000045c75d: add eax, 0x31e; and ch, 4; jne 0x5c724; ret; 
0x00000000004789fe: add eax, 0x337d1; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004785f9: add eax, 0x33a26; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000041e88e: add eax, 0x35ed; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e78e: add eax, 0x372d; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000046d5ee: add eax, 0x372dd; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041e68e: add eax, 0x382d; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x00000000004706e4: add eax, 0x38c48348; ret; 
0x0000000000472010: add eax, 0x39cfb; add rsp, 0x18; ret; 
0x000000000046ba2f: add eax, 0x3a124; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000046dd16: add eax, 0x3e6e9; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000046c49b: add eax, 0x3fb03; jne 0x6cb50; ret; 
0x000000000046bf71: add eax, 0x3fd2a; ret; 
0x000000000045e5aa: add eax, 0x401f0fc3; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000046b9b8: add eax, 0x40303; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x000000000046ba81: add eax, 0x40327; adc byte ptr [rax - 0x73], cl; adc eax, 0x132; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000046b82b: add eax, 0x40494; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046b7e7: add eax, 0x404d8; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046bd82: add eax, 0x40649; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043735e: add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fde: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000463727: add eax, 0x41c50149; call qword ptr [rbp + 0x68]; 
0x000000000046966a: add eax, 0x42c7d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000046453a: add eax, 0x47d51; add rsp, 8; ret; 
0x0000000000425846: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000420a3b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004239b0: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000043c28a: add eax, 0x48c28948; lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000042259e: add eax, 0x49048d44; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000041e969: add eax, 0x4a82; cmovne rax, rdx; ret; 
0x000000000041e9db: add eax, 0x4bd0; cmovne rax, rdx; ret; 
0x00000000004556b4: add eax, 0x4cc67; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000045908f: add eax, 0x4d434; add rsp, 8; ret; 
0x0000000000459084: add eax, 0x4d43b; call 0x5e840; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x000000000045414b: add eax, 0x4dcd0; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004540b5: add eax, 0x4dd66; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454026: add eax, 0x4ddf5; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000457e35: add eax, 0x4e696; ret; 
0x0000000000457e24: add eax, 0x4e697; ret; 
0x000000000045358b: add eax, 0x4e890; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000457b94: add eax, 0x4e923; ret; 
0x0000000000457b84: add eax, 0x4e92f; ret; 
0x0000000000457b74: add eax, 0x4e93b; ret; 
0x0000000000457b64: add eax, 0x4e947; ret; 
0x000000000045c725: add eax, 0x4f683; or byte ptr [rax - 0x73], cl; add eax, 0xb0e; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000045c6f2: add eax, 0x4f859; ret; 
0x000000000045c6e2: add eax, 0x4f861; ret; 
0x000000000045c6d2: add eax, 0x4f869; ret; 
0x000000000045c6c2: add eax, 0x4f871; ret; 
0x000000000045c6b2: add eax, 0x4f879; ret; 
0x000000000045c6a2: add eax, 0x4f881; ret; 
0x000000000045c692: add eax, 0x4f889; ret; 
0x000000000045c682: add eax, 0x4f891; ret; 
0x000000000045c672: add eax, 0x4f899; ret; 
0x000000000045c662: add eax, 0x4f8a1; ret; 
0x000000000045c652: add eax, 0x4f8a9; ret; 
0x000000000045c642: add eax, 0x4f911; ret; 
0x0000000000457bbd: add eax, 0x5000e; ret; 
0x000000000041e9b5: add eax, 0x5026; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041ea07: add eax, 0x5214; cmovne rax, rdx; ret; 
0x0000000000457bb1: add eax, 0x54212; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000044a2cd: add eax, 0x54800; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000041e983: add eax, 0x54b8; cmove rax, rdx; ret; 
0x000000000041ea93: add eax, 0x57a8; cmovne rax, rdx; ret; 
0x00000000004446ca: add eax, 0x58e90000; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041ea6e: add eax, 0x5add; cmove rax, rdx; ret; 
0x0000000000448ccd: add eax, 0x5b94e; mov qword ptr [rbx - 0x80], rsi; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x00000000004488f2: add eax, 0x5bd29; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x000000000044a2de: add eax, 0x5c14d; mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000041d23b: add eax, 0x5c415d5b; ret; 
0x000000000044acb8: add eax, 0x61523; cmp eax, 1; jg 0x4ace8; xor eax, eax; add rsp, 8; ret; 
0x00000000004372fa: add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f8a: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042751e: add eax, 0x62c0fc26; movabs eax, dword ptr [0x204d8362f5ef20cd]; and eax, 0xb262def8; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042ef56: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000464dbd: add eax, 0x63480000; ret; 
0x0000000000447722: add eax, 0x648f9; ret; 
0x000000000043d282: add eax, 0x689b9; ret; 
0x000000000041eadd: add eax, 0x690e; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000043a5ca: add eax, 0x6b4b9; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043b0ec: add eax, 0x6bc47; mov qword ptr [rsi], rax; ret; 
0x000000000043b0e2: add eax, 0x6bc61; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000043af3e: add eax, 0x6bded; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000437ce2: add eax, 0x6c7a1; test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000439342: add eax, 0x6c811; test rax, rax; je 0x3934d; ret; 
0x000000000043e442: add eax, 0x6db99; ret; 
0x000000000043e432: add eax, 0x6dba1; ret; 
0x000000000041eb6d: add eax, 0x6f3e; and ch, 4; jne 0x1eb24; ret; 
0x000000000043c736: add eax, 0x6f5ed; add rsp, 0x1a8; ret; 
0x000000000043b8d7: add eax, 0x70414; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000043b890: add eax, 0x7044b; ret; 
0x000000000043b880: add eax, 0x7046b; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000045c772: add eax, 0x709; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000043aebc: add eax, 0x70d8f; ret; 
0x000000000043aeb5: add eax, 0x70d9e; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043ae80: add eax, 0x70dcb; ret; 
0x000000000043ae68: add eax, 0x70df3; mov qword ptr [rip + 0x70dfc], rdi; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000043a571: add eax, 0x7172a; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000439279: add eax, 0x729ca; cmp rax, rdi; jb 0x39290; xor eax, eax; ret; 
0x0000000000459ce5: add eax, 0x73de3949; fisttp qword ptr [rax + 0x29]; ret; 
0x000000000040f839: add eax, 0x74c08566; adc dword ptr [rax - 0x73], ecx; adc eax, 0x6ae1a; add rax, rdx; ret; 
0x0000000000476414: add eax, 0x7542fa80; or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000436735: add eax, 0x75673; or byte ptr [rax - 0x73], cl; add eax, 0x132e; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x0000000000460892: add eax, 0x7a81d375; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000403cb8: add eax, 0x7fbf; add byte ptr [rax + 0xe7], bh; syscall; 
0x0000000000429908: add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000004017ec: add eax, 0x8307e083; clc; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ret; 
0x000000000042a9b2: add eax, 0x83480000; ret 0x4910; 
0x000000000042f1d1: add eax, 0x83480000; ret 0xeb10; 
0x000000000041eb82: add eax, 0x8369; test edx, 0x40000000; je 0x1eb5f; ret; 
0x00000000004296c1: add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000418925: add eax, 0x8c896; ret; 
0x00000000004188b5: add eax, 0x8c89e; ret; 
0x0000000000418912: add eax, 0x8c8a1; ret; 
0x000000000041888f: add eax, 0x8c8ac; ret; 
0x00000000004188a5: add eax, 0x8c8b6; ret; 
0x000000000041885f: add eax, 0x8c8e4; ret; 
0x0000000000418884: add eax, 0x8c8fb; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418854: add eax, 0x8c92b; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041881f: add eax, 0x8c92c; ret; 
0x000000000041883e: add eax, 0x8c93d; ret; 
0x0000000000418834: add eax, 0x8c94b; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418814: add eax, 0x8c96b; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000041ed61: add eax, 0x8d047; adc byte ptr [rax - 0x73], cl; adc eax, 0x172e2; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ee55: add eax, 0x8d05a; add dword ptr [rax - 0x73], ecx; adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x000000000041eb35: add eax, 0x8d37a; add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x0000000000466c61: add eax, 0x8d480000; cmp eax, 0x28775; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x0000000000417132: add eax, 0x8da09; ret; 
0x000000000043676d: add eax, 0x8ee; and ch, 4; jne 0x36734; ret; 
0x000000000041ca88: add eax, 0x8f173; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041720d: add eax, 0x90982; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004171dd: add eax, 0x909ae; cmp eax, 1; jg 0x171f0; ret; 
0x000000000042aedd: add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000415105: add eax, 0x92a86; cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x000000000040e45d: add eax, 0x92ede; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3ba: add eax, 0x92f81; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e35f: add eax, 0x92fdc; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e307: add eax, 0x93034; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2af: add eax, 0x9308c; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000418aa1: add eax, 0x9316e; test eax, eax; jne 0x18ab0; ret; 
0x0000000000418957: add eax, 0x932bc; ret; 
0x0000000000418874: add eax, 0x9339b; ret; 
0x0000000000401ca2: add eax, 0xaa0b5; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000401c99: add eax, 0xaa0c2; pop rbx; ret; 
0x0000000000401b27: add eax, 0xaa308; mov dword ptr [rip + 0xaa306], ebx; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x000000000045c72d: add eax, 0xb0e; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000046ba90: add eax, 0xb; cmove rax, rdx; ret; 
0x0000000000457bb4: add eax, 0xbe8c100; and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000043b96a: add eax, 0xbed23153; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000042584d: add eax, 0xc478d48; ret; 
0x00000000004255f7: add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041ebea: add eax, 0xc7d1; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ebaf: add eax, 0xca4c; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x00000000004597b3: add eax, 0xd08; cmovne rax, rdx; ret; 
0x000000000041ec62: add eax, 0xd2d9; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ec50: add eax, 0xd4fb; cmove rax, rdx; ret; 
0x000000000041ec08: add eax, 0xd543; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041eccf: add eax, 0xd68c; test dh, 4; jne 0x1ec8a; ret; 
0x000000000041e90c: add eax, 0xdef; cmovne rax, rdx; ret; 
0x000000000041ece2: add eax, 0xe139; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000045a258: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x5a29b; ret 0x167e; 
0x000000000045d6fb: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x5d73e; ret 0x137e; 
0x000000000041e80c: add eax, 0xeff; cmovne rax, rdx; ret; 
0x000000000043225b: add eax, 0xf00; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x000000000041eca4: add eax, 0xfb17; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x0000000000478309: add eax, 0xfc6061e8; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000448c23: add eax, 0xfd4427e8; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000436782: add eax, 0xfd9; test edx, 0x40000000; je 0x3675f; ret; 
0x0000000000438599: add eax, 0xfff0003d; push qword ptr [rdi + 7]; xor eax, eax; ret; 
0x000000000041e70c: add eax, 0xfff; cmovne rax, rdx; ret; 
0x000000000043c72f: add eax, 0xfffc3904; mov qword ptr [rip + 0x6f5ed], rax; add rsp, 0x1a8; ret; 
0x000000000045c874: add eax, 0xfffc7387; cmove rax, rdx; ret; 
0x000000000045c852: add eax, 0xfffc7569; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x00000000004018b0: add eax, 1; ret; 
0x000000000045d1ea: add eax, 2; ret; 
0x000000000045d1f9: add eax, 3; ret; 
0x000000000045ca64: add eax, 4; cmp edx, esi; je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x00000000004733ef: add eax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476284: add eax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000044a349: add eax, dword ptr [0]; ret; 
0x000000000046ba83: add eax, dword ptr [rax + rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x132; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000046b9ba: add eax, dword ptr [rax + rax]; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x000000000046c494: add eax, dword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x3fb03], 0x40; jne 0x6cb50; ret; 
0x0000000000418806: add eax, dword ptr [rax]; add al, ch; bnd ja 0x187cb; jmp qword ptr [rsi - 0x70]; 
0x000000000043b6a7: add eax, dword ptr [rax]; add al, ch; int1; adc edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000040c94b: add eax, dword ptr [rax]; add al, ch; pop rbp; sbb al, 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040b394: add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000464f94: add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000045dfb7: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000004593b7: add eax, dword ptr [rax]; add byte ptr [rax - 0x15], al; ret; 
0x000000000046ff93: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xd230; 
0x000000000045c75f: add eax, dword ptr [rax]; add byte ptr [rax - 0x428afb1b], al; ret; 
0x000000000046827b: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000046823c: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x328], rdx; ret; 
0x00000000004388cf: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000468285: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; nop; and byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000042ab22: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ab77: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042f441: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000405016: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000451b08: add eax, dword ptr [rax]; add byte ptr [rax - 0x90043], al; jmp qword ptr [rax]; 
0x0000000000478ac7: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; ret; 
0x000000000043c4f3: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x00000000004785fc: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000046dd19: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004146c1: add eax, dword ptr [rax]; add byte ptr [rax], al; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x000000000045d219: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000438fd1: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000438fd1: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x0000000000466247: add eax, dword ptr [rax]; add byte ptr [rax], cl; jne 0x66260; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x000000000046c559: add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000472013: add eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x000000000046d5f1: add eax, dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004754ac: add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x00000000004556ae: add eax, dword ptr [rax]; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000046c49e: add eax, dword ptr [rax]; jne 0x6cb50; ret; 
0x000000000046d0c8: add eax, dword ptr [rax]; mov rax, r10; add rsp, 0x28; ret; 
0x000000000041e610: add eax, dword ptr [rax]; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000045c634: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000455842: add eax, dword ptr [rax]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000045589c: add eax, dword ptr [rax]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000401944: add eax, dword ptr [rax]; ret; 
0x000000000046ba32: add eax, dword ptr [rax]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000403ff6: add eax, dword ptr [rbx + 0x27770afa]; lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x000000000046b9b9: add eax, dword ptr [rbx]; add al, 0; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x000000000046ddba: add eax, dword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000043ab71: add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000470d48: add eax, dword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000458ebf: add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000046675e: add eax, dword ptr [rsp]; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x0000000000466f2c: add eax, dword ptr [rsp]; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467639: add eax, dword ptr [rsp]; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e2c: add eax, dword ptr [rsp]; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c4: add eax, dword ptr [rsp]; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000044df80: add eax, eax; mov eax, r8d; ret; 
0x000000000045c3f0: add eax, eax; ret; 
0x000000000045bbc1: add eax, eax; vzeroupper; ret; 
0x000000000045a25d: add eax, ebp; clc; ja 0x5a29b; ret 0x167e; 
0x000000000045d700: add eax, ebp; clc; ja 0x5d73e; ret 0x137e; 
0x000000000045ff9c: add eax, ebp; dec dl; sti; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000043d355: add eax, ebp; jmp rax; 
0x000000000040dcc7: add eax, ebp; ret; 
0x000000000043d30d: add eax, ebx; jmp rax; 
0x0000000000467e62: add eax, ecx; call rax; 
0x0000000000404008: add eax, ecx; jmp rax; 
0x0000000000424290: add eax, ecx; ret; 
0x0000000000430b99: add eax, ecx; sub rax, rdi; ret; 
0x0000000000424091: add eax, ecx; vzeroupper; ret; 
0x00000000004245ae: add eax, edi; add rax, rcx; ret; 
0x000000000042b5a8: add eax, edi; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x00000000004018fb: add eax, edi; jmp rax; 
0x0000000000424268: add eax, edi; ret; 
0x000000000045cac8: add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004371fd: add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000423f6b: add eax, edi; vzeroupper; ret; 
0x00000000004240cb: add eax, edi; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042b1c2: add eax, edi; xtest; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042bd7c: add eax, edi; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a236: add eax, edi; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045be36: add eax, edi; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045d6d6: add eax, edi; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x000000000045bcae: add eax, edx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000046bd7e: add eax, edx; cmp rax, qword ptr [rip + 0x40649]; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000042b5f4: add eax, edx; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000040fdaf: add eax, edx; jmp rax; 
0x000000000045b958: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b811: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b009: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b870: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000045b044: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b85d: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000045b024: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045ba33: add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000040f847: add eax, edx; ret; 
0x00000000004311f6: add eax, edx; sub rax, rdi; ret; 
0x0000000000437c3b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042b166: add eax, edx; vzeroupper; ret; 
0x000000000046613a: add eax, esi; inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x0000000000401970: add eax, esi; jmp rax; 
0x000000000045c107: add eax, esi; ret; 
0x000000000044b04c: add ebp, 0x30; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000454322: add ebp, 0xb; add byte ptr [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000044832c: add ebp, eax; outsb dx, byte ptr [rsi]; std; dec dword ptr [rax - 0x77]; add byte ptr [r8 - 0x77], r9b; ret; 
0x000000000045a099: add ebp, eax; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x0000000000415cd6: add ebp, ebx; retf; nop dword ptr [rax]; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x000000000046b7a7: add ebp, edx; xor eax, eax; ret; 
0x000000000046de01: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000047282a: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000415d5e: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000439706: add ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000441990: add ebx, ebp; ret 0x7e80; 
0x0000000000466762: add ebx, edi; test edx, edx; jne 0x6676a; call rax; 
0x0000000000469025: add ecx, 1; test dl, dl; jne 0x68ffa; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x000000000046381c: add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x000000000041a3cf: add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000004609e5: add ecx, dword ptr [rax + 1]; ret 0x3948; 
0x0000000000470d19: add ecx, dword ptr [rax - 0x73]; push rax; push qword ptr [rsi + rdx + 0x49]; lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000043a5c7: add ecx, dword ptr [rax - 0x77]; add eax, 0x6b4b9; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415c9a: add ecx, dword ptr [rax - 0x7b]; push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp + rbp - 0x77], esi; ret 0xc883; 
0x0000000000408e52: add ecx, dword ptr [rax - 0x7d]; in eax, dx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004257b4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000430844: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000046ddbb: add ecx, dword ptr [rcx + rcx*4 - 0x1a]; mov edi, ebp; call rax; 
0x0000000000464824: add ecx, dword ptr [rcx - 0x77]; cmp dword ptr [rcx], esi; neg byte ptr [rbx + 0x48]; mov eax, esi; ret; 
0x000000000046c338: add ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000467ded: add ecx, dword ptr [rdi]; test bh, bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 5; ret 0x154; 
0x0000000000440cab: add ecx, dword ptr [rdi]; xchg dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045f608: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc084; 
0x000000000041830c: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc231; 
0x0000000000432347: add ecx, ecx; cmp rdx, rcx; ja 0x32327; nop; xor eax, eax; ret; 
0x0000000000422552: add ecx, ecx; jmp rcx; 
0x000000000040b39c: add ecx, edx; jmp rcx; 
0x0000000000416eaf: add ecx, edx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000416eed: add ecx, edx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000401988: add ecx, esi; jmp rcx; 
0x0000000000432346: add ecx, r9d; cmp rdx, rcx; ja 0x32327; nop; xor eax, eax; ret; 
0x000000000042bcd4: add edi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042b104: add edi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000043078d: add edi, 0x10; lea r11, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ed: add edi, 0x10; lea r11, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004307c2: add edi, 0x20; lea r11, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425722: add edi, 0x20; lea r11, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045cae6: add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c26: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000423f85: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afa7: add edi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000043068f: add edi, 0x30; lea r11, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255ef: add edi, 0x30; lea r11, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045cb06: add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c36: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000423f95: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042afbb: add edi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000045cb26: add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c46: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000423fa5: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042afd4: add edi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x00000000004377d6: add edi, ebp; ret; 
0x000000000046c49c: add edi, ebx; add eax, dword ptr [rax]; jne 0x6cb50; ret; 
0x00000000004353a6: add edi, ebx; ret; 
0x000000000045e89c: add edi, ecx; add rsi, 8; cmp rsi, r8; jne 0x5e880; mov eax, edi; ret; 
0x0000000000410cab: add edi, edi; jmp qword ptr [rsi + 0x49]; 
0x00000000004377e6: add edi, esi; ret; 
0x000000000045a505: add edi, esi; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x00000000004377c6: add edi, esp; ret; 
0x00000000004353a5: add edi, r11d; ret; 
0x00000000004377c5: add edi, r12d; ret; 
0x00000000004377d5: add edi, r13d; ret; 
0x00000000004377e5: add edi, r14d; ret; 
0x0000000000430748: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256a8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000416e0a: add edx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d005: add edx, dword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000470c9e: add edx, dword ptr [rax + 8]; add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x00000000004225b4: add edx, eax; jmp rdx; 
0x000000000046a6b2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000040384e: add edx, ecx; jmp rdx; 
0x0000000000476269: add edx, ecx; test dil, dil; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e09: add edx, ecx; test dil, dil; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x0000000000430789: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256e9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004307be: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042571e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043068b: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255eb: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045e89f: add esi, 8; cmp rsi, r8; jne 0x5e880; mov eax, edi; ret; 
0x0000000000447eda: add esi, dword ptr [rbx + rax + 0x5b]; ret; 
0x0000000000451732: add esi, eax; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x0000000000408efd: add esi, ebp; call rax; 
0x0000000000409521: add esi, ebp; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000004215ea: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041c3cb: add esi, ebx; stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000430701: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306e4: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425661: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425644: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004019f6: add esi, edi; int1; mov eax, eax; ret; 
0x0000000000407c8e: add esi, edi; jmp rsi; 
0x00000000004219c7: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421170: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000041ff28: add esi, edx; jne 0x1ff30; vzeroupper; ret; 
0x00000000004236b4: add esi, edx; jne 0x236bc; vzeroupper; ret; 
0x00000000004240ce: add esi, edx; jne 0x240d6; vzeroupper; ret; 
0x0000000000424d7c: add esi, edx; jne 0x24d84; vzeroupper; ret; 
0x0000000000426568: add esi, edx; jne 0x26570; vzeroupper; ret; 
0x000000000042b1c5: add esi, edx; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042bd7f: add esi, edx; jne 0x2bd87; vzeroupper; ret; 
0x000000000042c8ff: add esi, edx; jne 0x2c907; vzeroupper; ret; 
0x000000000042fe29: add esi, edx; jne 0x2fe31; vzeroupper; ret; 
0x0000000000430ebf: add esi, edx; jne 0x30ec7; vzeroupper; ret; 
0x000000000043189a: add esi, edx; jne 0x318a2; vzeroupper; ret; 
0x00000000004352ea: add esi, edx; jne 0x352f2; vzeroupper; ret; 
0x000000000043772d: add esi, edx; jne 0x37735; vzeroupper; ret; 
0x000000000045a239: add esi, edx; jne 0x5a241; vzeroupper; ret; 
0x000000000045b25f: add esi, edx; jne 0x5b267; vzeroupper; ret; 
0x000000000045be39: add esi, edx; jne 0x5be41; vzeroupper; ret; 
0x000000000045ce62: add esi, edx; jne 0x5ce6a; vzeroupper; ret; 
0x000000000045d6d9: add esi, edx; jne 0x5d6e1; vzeroupper; ret; 
0x000000000043a39f: add esp, 0x1018; ret; 
0x0000000000415971: add esp, 0x10; pop rbx; jmp rax; 
0x000000000040892b: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043b9b1: add esp, 0x10; pop rbx; ret; 
0x00000000004361ac: add esp, 0x110; pop rbx; ret; 
0x000000000046bd06: add esp, 0x118; ret; 
0x000000000044a6ad: add esp, 0x148; ret; 
0x00000000004763a0: add esp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000476454: add esp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x000000000040a916: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000410638: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041987b: add esp, 0x18; ret; 
0x00000000004750fe: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043c73c: add esp, 0x1a8; ret; 
0x0000000000415f4d: add esp, 0x20; pop rbx; jmp rax; 
0x000000000043a75b: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004367e2: add esp, 0x20; pop rbx; ret; 
0x000000000041615f: add esp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000004756c9: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004756d9: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000457d61: add esp, 0x28; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000000457945: add esp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000046e192: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fa53: add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000043851a: add esp, 0x28; ret; 
0x00000000004685df: add esp, 0x30; ret; 
0x0000000000472f34: add esp, 0x38; and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x0000000000470a06: add esp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000472f88: add esp, 0x38; mov rax, rcx; ret; 
0x00000000004086dc: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004123fe: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000044ae4e: add esp, 0x38; ret; 
0x0000000000458e09: add esp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000437f5d: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000469afc: add esp, 0x48; ret; 
0x000000000043918a: add esp, 0x58; ret; 
0x000000000041e00f: add esp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000045c8d1: add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000438632: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000043905a: add esp, 0x68; ret; 
0x00000000004728dc: add esp, 0x78; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045e930: add esp, 0x78; ret; 
0x000000000043a4cd: add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000403a21: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458ff9: add esp, 0x98; ret; 
0x00000000004133c0: add esp, 0xa0; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000455e82: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041357d: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000447843: add esp, 0xb8; mov eax, edx; pop rbx; pop r12; ret; 
0x000000000040a5e7: add esp, 0xd8; ret; 
0x000000000040fc87: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000004560c1: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004560a3: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411eb4: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000450080: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004392ea: add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000419e7d: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004136c6: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000470ca2: add esp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x0000000000413da2: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000404193: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000401013: add esp, 8; ret; 
0x0000000000418277: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040888c: add esp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004210f7: add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x00000000004206d5: add qword ptr [r10 - 0x2f], r12; jl 0x20723; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041ee5f: add qword ptr [r8], r8; cmove rax, rdx; ret; 
0x000000000045c9ff: add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x28; call rbx; 
0x000000000043be18: add qword ptr [rcx - 0x7d], rcx; ret 0x4801; 
0x000000000040884c: add qword ptr [rip + 0x9eecc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045a098: add r13, r8; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x0000000000408efc: add r14, r13; call rax; 
0x0000000000409520: add r14, r13; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000043adfd: add r14b, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x00000000004349f4: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000425257: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; ret; 
0x0000000000424a57: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f7: add r8b, byte ptr [r8]; ret; 
0x000000000042fb27: add r8b, byte ptr [r8]; vzeroupper; ret; 
0x000000000042ab76: add r8d, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044df7f: add r8d, eax; mov eax, r8d; ret; 
0x0000000000434dd6: add r8d, ecx; vzeroupper; ret; 
0x000000000045cb08: add r8d, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c38: add r8d, edi; vzeroupper; ret; 
0x0000000000444988: add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000042aedc: add rax, -0x6eeb7500; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042af10: add rax, -0x75f37500; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000430b1e: add rax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x30b78; movsxd rax, ecx; ret; 
0x000000000044a3e5: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045d1f0: add rax, 1; ret; 
0x000000000045d1e9: add rax, 2; ret; 
0x000000000045d1f8: add rax, 3; ret; 
0x000000000045ca63: add rax, 4; cmp edx, esi; je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x00000000004733ee: add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476283: add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000044a348: add rax, qword ptr [0]; ret; 
0x000000000046675d: add rax, qword ptr [r12]; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x0000000000466f2b: add rax, qword ptr [r12]; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467638: add rax, qword ptr [r12]; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e2b: add rax, qword ptr [r12]; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c3: add rax, qword ptr [r12]; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000046ddb9: add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000470d47: add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000044a347: add rax, qword ptr fs:[0]; ret; 
0x000000000045c3ef: add rax, r8; ret; 
0x000000000045bbc0: add rax, r8; vzeroupper; ret; 
0x000000000043d354: add rax, rbp; jmp rax; 
0x000000000043d30c: add rax, rbx; jmp rax; 
0x0000000000467e61: add rax, rcx; call rax; 
0x0000000000404007: add rax, rcx; jmp rax; 
0x000000000042428f: add rax, rcx; ret; 
0x0000000000430b98: add rax, rcx; sub rax, rdi; ret; 
0x0000000000424090: add rax, rcx; vzeroupper; ret; 
0x00000000004245ad: add rax, rdi; add rax, rcx; ret; 
0x000000000042b5a7: add rax, rdi; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x00000000004018fa: add rax, rdi; jmp rax; 
0x0000000000424267: add rax, rdi; ret; 
0x00000000004371fc: add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000423f6a: add rax, rdi; vzeroupper; ret; 
0x00000000004240ca: add rax, rdi; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042b1c1: add rax, rdi; xtest; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042bd7b: add rax, rdi; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a235: add rax, rdi; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045be35: add rax, rdi; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045d6d5: add rax, rdi; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x000000000045bcad: add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000046bd7d: add rax, rdx; cmp rax, qword ptr [rip + 0x40649]; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000042b5f3: add rax, rdx; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000040fdae: add rax, rdx; jmp rax; 
0x000000000045b957: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b810: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b008: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000040f846: add rax, rdx; ret; 
0x00000000004311f5: add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c3a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042b165: add rax, rdx; vzeroupper; ret; 
0x000000000040196f: add rax, rsi; jmp rax; 
0x000000000045c106: add rax, rsi; ret; 
0x000000000046de00: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000466761: add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x0000000000469024: add rcx, 1; test dl, dl; jne 0x68ffa; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x0000000000422551: add rcx, r9; jmp rcx; 
0x000000000040b39b: add rcx, rdx; jmp rcx; 
0x0000000000416eae: add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000416eec: add rcx, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000401987: add rcx, rsi; jmp rcx; 
0x000000000042bcd3: add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042b103: add rdi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000043078c: add rdi, 0x10; lea r11, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ec: add rdi, 0x10; lea r11, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004307c1: add rdi, 0x20; lea r11, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425721: add rdi, 0x20; lea r11, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000423f84: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afa6: add rdi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000043068e: add rdi, 0x30; lea r11, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255ee: add rdi, 0x30; lea r11, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000423f94: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042afba: add rdi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x0000000000423fa4: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042afd3: add rdi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000045a504: add rdi, rsi; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x0000000000430747: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256a7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000416e09: add rdx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046d004: add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000470c9d: add rdx, qword ptr [rax + 8]; add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x00000000004225b3: add rdx, r8; jmp rdx; 
0x000000000046a6b1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000476268: add rdx, r9; test dil, dil; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e08: add rdx, r9; test dil, dil; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x000000000040384d: add rdx, rcx; jmp rdx; 
0x0000000000430788: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256e8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004307bd: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042571d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043068a: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255ea: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045e89e: add rsi, 8; cmp rsi, r8; jne 0x5e880; mov eax, edi; ret; 
0x0000000000430700: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306e3: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425660: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425643: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000407c8d: add rsi, rdi; jmp rsi; 
0x00000000004219c6: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042116f: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043a39e: add rsp, 0x1018; ret; 
0x0000000000415970: add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040892a: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043b9b0: add rsp, 0x10; pop rbx; ret; 
0x00000000004361ab: add rsp, 0x110; pop rbx; ret; 
0x000000000046bd05: add rsp, 0x118; ret; 
0x000000000044a6ac: add rsp, 0x148; ret; 
0x000000000047639f: add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000476453: add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x000000000040a915: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000410637: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041987a: add rsp, 0x18; ret; 
0x00000000004750fd: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000043c73b: add rsp, 0x1a8; ret; 
0x0000000000415f4c: add rsp, 0x20; pop rbx; jmp rax; 
0x000000000043a75a: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004367e1: add rsp, 0x20; pop rbx; ret; 
0x000000000041615e: add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000004756c8: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004756d8: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000457d60: add rsp, 0x28; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000000457944: add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000046e191: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fa52: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000438519: add rsp, 0x28; ret; 
0x00000000004685de: add rsp, 0x30; ret; 
0x0000000000472f33: add rsp, 0x38; and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x0000000000470a05: add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000472f87: add rsp, 0x38; mov rax, rcx; ret; 
0x00000000004086db: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004123fd: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000044ae4d: add rsp, 0x38; ret; 
0x0000000000458e08: add rsp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000437f5c: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000469afb: add rsp, 0x48; ret; 
0x0000000000439189: add rsp, 0x58; ret; 
0x000000000041e00e: add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000045c8d0: add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000438631: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000439059: add rsp, 0x68; ret; 
0x00000000004728db: add rsp, 0x78; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045e92f: add rsp, 0x78; ret; 
0x000000000043a4cc: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000403a20: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458ff8: add rsp, 0x98; ret; 
0x00000000004133bf: add rsp, 0xa0; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000455e81: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041357c: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000447842: add rsp, 0xb8; mov eax, edx; pop rbx; pop r12; ret; 
0x000000000040a5e6: add rsp, 0xd8; ret; 
0x000000000040fc86: add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000004560c0: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004560a2: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411eb3: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045007f: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004392e9: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000419e7c: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004136c5: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000470ca1: add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x0000000000413da1: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000404192: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401012: add rsp, 8; ret; 
0x0000000000418276: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040888b: add rsp, 8; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000412ce6: add sil, sil; ret 0x7420; 
0x000000000045273e: add sil, sil; ret 0xf10; 
0x000000000041ef02: add word ptr [rax], ax; cmove rax, rdx; ret; 
0x000000000046bd90: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000425d18: and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x0000000000425bc9: and ah, al; jge 0x25bca; ret 0x41c4; 
0x0000000000425f79: and ah, al; jge 0x25f7a; ret 0x41c4; 
0x00000000004265d9: and ah, al; jge 0x265da; ret 0x41c4; 
0x0000000000426999: and ah, al; jge 0x2699a; ret 0x41c4; 
0x000000000045700e: and al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000457127: and al, 0; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000411bfb: and al, 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047559c: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000443d17: and al, 0x10; call rax; 
0x000000000045e98b: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004387cf: and al, 0x10; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000043872f: and al, 0x10; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044a75e: and al, 0x10; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000457d34: and al, 0x10; mov r9d, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x000000000043c4fb: and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000043c4a1: and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000415f78: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000436615: and al, 0x10; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000439846: and al, 0x10; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000441e18: and al, 0x10; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e95: and al, 0x10; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004095d9: and al, 0x10; nop dword ptr [rax + rax]; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x0000000000401a7b: and al, 0x14; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000043c2ee: and al, 0x18; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x0000000000465483: and al, 0x18; call 0x64d70; add rsp, 0xd8; ret; 
0x000000000043984e: and al, 0x18; call rax; 
0x000000000043661d: and al, 0x18; call rbx; 
0x000000000043c4a6: and al, 0x18; call rcx; 
0x000000000045e98f: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000401a77: and al, 0x18; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004422f9: and al, 0x18; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004094c8: and al, 0x18; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000476148: and al, 0x18; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004387ca: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000043872a: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000415f73: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000444a52: and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044069c: and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b7: and al, 0x18; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441774: and al, 0x18; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000445291: and al, 0x18; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045e983: and al, 0x1c; mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000044a759: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000441783: and al, 0x20; call rax; 
0x00000000004362c9: and al, 0x20; call rbx; 
0x0000000000439033: and al, 0x20; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004388ca: and al, 0x20; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x00000000004388d5: and al, 0x20; mov eax, 0x4f; syscall; 
0x000000000040987d: and al, 0x20; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000440ba5: and al, 0x20; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000043635e: and al, 0x20; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004406ab: and al, 0x28; call rax; 
0x000000000045ca04: and al, 0x28; call rbx; 
0x000000000044735c: and al, 0x28; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045eb18: and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004533dc: and al, 0x30; and byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000453bd9: and al, 0x30; and byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004411c6: and al, 0x30; call rax; 
0x000000000043650f: and al, 0x30; call rbx; 
0x000000000043902e: and al, 0x30; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x0000000000443d08: and al, 0x30; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004422fe: and al, 0x30; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004685d5: and al, 0x30; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000441e1d: and al, 0x38; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447352: and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000040d678: and al, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x00000000004685d1: and al, 0x40; fld xword ptr [rsp + 0x30]; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000443d12: and al, 0x40; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000441e22: and al, 0x40; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a5c: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000442efe: and al, 0x40; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004677c6: and al, 0x45; test ebx, ebx; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004429b6: and al, 0x48; add byte ptr [rdi], cl; test dl, ch; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000415998: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x00000000004685dd: and al, 0x48; add esp, 0x30; ret; 
0x0000000000472f86: and al, 0x48; add esp, 0x38; mov rax, rcx; ret; 
0x0000000000472bf9: and al, 0x48; add esp, 0x38; ret; 
0x000000000045e444: and al, 0x48; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000411f3e: and al, 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000408e7d: and al, 0x48; mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000408f9f: and al, 0x48; mov eax, dword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000476150: and al, 0x48; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760fd: and al, 0x48; mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000415ddb: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000413942: and al, 0x48; mov edi, ebx; call rax; 
0x000000000041986f: and al, 0x48; mov esi, dword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x0000000000408ef0: and al, 0x48; mov esi, ebx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000442308: and al, 0x48; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411c1: and al, 0x48; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000447357: and al, 0x48; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443d0d: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000445e9a: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a57: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a1: and al, 0x48; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004698f4: and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x0000000000466760: and al, 0x4c; add ebx, edi; test edx, edx; jne 0x6676a; call rax; 
0x0000000000415e70: and al, 0x4d; lea edi, [rsp + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000044529b: and al, 0x50; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a6: and al, 0x50; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000442303: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411bc: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441779: and al, 0x50; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440baa: and al, 0x50; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044177e: and al, 0x58; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440baf: and al, 0x58; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000445296: and al, 0x58; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044176f: and al, 0x60; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440ba0: and al, 0x60; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045c9f8: and al, 0x6a; add dword ptr [rdx], ebp; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000442290: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004465c5: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x00000000004428f7: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000442400: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000423d84: and al, 0x83; cli; add dword ptr [rdi + 0x26], edi; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000466e2e: and al, 0x85; div byte ptr [rbp + 2]; call rax; 
0x0000000000466f2e: and al, 0x85; sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x000000000046763b: and al, 0x85; sal byte ptr [rbp + 2], cl; call rax; 
0x0000000000456b2b: and al, 0x89; ret 0xc883; 
0x0000000000418170: and al, 0x89; ret 0xca83; 
0x000000000046302f: and al, 0x89; ret 0xea31; 
0x0000000000442e96: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000443331: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004032eb: and al, 0x98; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000402b79: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3d], cl; ret; 
0x000000000046ba30: and al, 0xa1; add eax, dword ptr [rax]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000043dd5b: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000403429: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000045a69b: and al, 0xc5; std; xlatb; ret; 
0x0000000000472009: and al, 0xc; add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x0000000000415993: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000472f7d: and al, 0xe8; cmp eax, 0x48000001; mov ecx, dword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000472bf0: and al, 0xe8; retf 4; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000043c5c0: and al, 0xe9; jp 0x3c55d; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; ret; 
0x0000000000455151: and al, 0xe9; ret 0xfffd; 
0x0000000000402021: and al, 0xf0; add cl, byte ptr [rdi]; xchg esp, eax; ret 0xca21; 
0x000000000043d347: and al, 1; cmp rax, 0x17; ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x00000000004094b6: and al, 1; mov rdi, r12; call rbx; 
0x0000000000415e74: and al, 1; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000043a36a: and al, 8; adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000000408efa: and al, 8; add r14, r13; call rax; 
0x0000000000415f7d: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000438754: and al, 8; add rsp, 0x28; ret; 
0x000000000043874a: and al, 8; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401a80: and al, 8; call rax; 
0x000000000044a766: and al, 8; mov eax, 0x13e; syscall; 
0x00000000004387d6: and al, 8; mov eax, 1; syscall; 
0x0000000000439063: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000041318c: and al, 8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000004094fb: and al, 8; mov r15, rdi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000476154: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000439841: and al, 8; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000411359: and al, 8; mov rdi, r15; call rax; 
0x000000000040d4a8: and al, 8; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x0000000000476101: and al, 8; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000408fa3: and al, 8; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000419873: and al, 8; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x00000000004390c0: and al, 8; xor eax, eax; cmp esi, 9; je 0x390f0; mov eax, 0x48; syscall; 
0x0000000000438736: and al, 8; xor eax, eax; syscall; 
0x000000000043c2ad: and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x00000000004253da: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x0000000000441c3f: and bh, ah; jmp qword ptr [rsi + 0x66]; 
0x0000000000450f6e: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000044b1a2: and bl, byte ptr [rdi - 5]; dec dword ptr [rax + 0x29]; ret; 
0x000000000044950a: and byte ptr [r11 + r9*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000416456: and byte ptr [r15], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000045de3d: and byte ptr [r15], r11b; ret 0xc500; 
0x0000000000424500: and byte ptr [r15], r15b; ret 0xc500; 
0x0000000000423ee1: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000431cb7: and byte ptr [r8 + 0x39], cl; ret 0x2776; 
0x000000000043163c: and byte ptr [r8 + 0x39], cl; ret 0x2d76; 
0x000000000043230b: and byte ptr [r8 + 0x39], cl; ret 0x2e76; 
0x0000000000411804: and byte ptr [r8 + 1], r9b; ret; 
0x00000000004158b2: and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045711e: and byte ptr [rax + 0x39], cl; push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000431cb8: and byte ptr [rax + 0x39], cl; ret 0x2776; 
0x000000000043163d: and byte ptr [rax + 0x39], cl; ret 0x2d76; 
0x000000000043230c: and byte ptr [rax + 0x39], cl; ret 0x2e76; 
0x000000000041c801: and byte ptr [rax + 0x39], cl; ret 0x4473; 
0x000000000040f0f4: and byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000410e4d: and byte ptr [rax + 0x39], cl; ret 0x894c; 
0x000000000046ca38: and byte ptr [rax + 0x39], cl; ret 0xc274; 
0x000000000044f114: and byte ptr [rax + 0x3b], cl; push rax; sub byte ptr [rdi], cl; cmp dword ptr [rcx + 0x48000008], -0x73; add al, 0x83; ret; 
0x00000000004388d6: and byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000477d0f: and byte ptr [rax + 1], cl; fmul dword ptr [rax + 1]; ret 0x3948; 
0x0000000000411805: and byte ptr [rax + 1], cl; ret; 
0x00000000004311ed: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000437c89: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000430ffe: and byte ptr [rax + 9], cl; sal bl, 1; bsf rax, rax; add rax, rdi; ret; 
0x0000000000473129: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x000000000040db4a: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040e3b1: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2a6: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2fe: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e454: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e356: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000440ba6: and byte ptr [rax - 0x75], cl; je 0x40bcf; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000402b75: and byte ptr [rax - 0x75], cl; xchg esp, eax; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3d], cl; ret; 
0x000000000041ae8b: and byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000044e490: and byte ptr [rax - 0x77], cl; ret 0x4866; 
0x000000000046e7c1: and byte ptr [rax - 0x77], cl; ret; 
0x000000000043f893: and byte ptr [rax - 0x7d], cl; ret; 
0x00000000004134c2: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000459801: and byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x1575; cmove rdx, rax; mov rax, rdx; ret; 
0x00000000004533de: and byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000453bdb: and byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b96f: and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x00000000004019da: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040119e: and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004191d5: and byte ptr [rax], al; je 0x191f0; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x000000000042b5b7: and byte ptr [rbp + 0x41], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045557b: and byte ptr [rbp + 0x4a], ah; add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x000000000040bac4: and byte ptr [rbp + 0x4a], ah; add byte ptr [rcx - 0x39], cl; ror byte ptr [rax + 0x48004a6c], 0x89; ret 0x294d; 
0x000000000044e0c5: and byte ptr [rbp + 0x62850fdb], al; add al, byte ptr [rax]; add dh, dh; ret 0xf50; 
0x0000000000425724: and byte ptr [rbp + rcx*4 + 0x1d], cl; clc; imul eax, dword ptr [rip + 0xc634900], -0x6d; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000468d24: and byte ptr [rbp + rcx*4 + 0x43], cl; adc al, ch; add ah, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004684ec: and byte ptr [rbp + rcx*4 + 0x43], cl; adc al, ch; cmp ch, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042b437: and byte ptr [rbp - 0xe], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000439034: and byte ptr [rbx + 0x267409fe], al; mov eax, 0x48; syscall; 
0x0000000000436c4c: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000043a75d: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000042d1b9: and byte ptr [rbx + rbx*8 + 0x29], bh; ret 0xe162; 
0x000000000044950b: and byte ptr [rbx + rcx*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000044a4c1: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000000046823b: and byte ptr [rbx], al; add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000046828b: and byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004225ec: and byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x30], edi; ret; 
0x000000000040fda2: and byte ptr [rcx + rbp], bh; ja 0xfdd8; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000426fad: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b6d: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000044356f: and byte ptr [rcx - 0x77], al; ret 0x840f; 
0x00000000004631c4: and byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000004557a3: and byte ptr [rcx - 0x7d], al; cli; sub dword ptr [rdi + 0xe], esi; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x000000000041ee24: and byte ptr [rcx], al; add bh, dh; ret 0; 
0x000000000041ea31: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x1ea40; ret; 
0x0000000000459751: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c791: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ea37: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ea40; ret; 
0x0000000000459757: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x59760; ret; 
0x000000000045c797: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x5c7a0; ret; 
0x00000000004018eb: and byte ptr [rcx], al; add byte ptr [rax], al; lea rdi, [rip + 0x777ca]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000421629: and byte ptr [rcx], al; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044fbb6: and byte ptr [rcx], ch; ret 0x44c6; 
0x0000000000419b14: and byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; je 0x19b3f; or al, ch; jmp rax; 
0x00000000004158b3: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000423e61: and byte ptr [rdi + 0x1c], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000422494: and byte ptr [rdi + 0x69], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000421ecf: and byte ptr [rdi + 0x6e], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042760e: and byte ptr [rdi + rbp*4 + 0x29], bh; ret 0xe162; 
0x0000000000422a0c: and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000042b49f: and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000424501: and byte ptr [rdi], bh; ret 0xc500; 
0x0000000000424f69: and byte ptr [rdi], bh; ret; 
0x00000000004378a5: and byte ptr [rdi], bl; ret 0x6200; 
0x000000000045de3e: and byte ptr [rdi], bl; ret 0xc500; 
0x0000000000437943: and byte ptr [rdi], bl; ret; 
0x0000000000416457: and byte ptr [rdi], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000423ee2: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; ret; 
0x00000000004220a5: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000422032: and byte ptr [rdi], cl; adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000045b80c: and byte ptr [rdi], cl; mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x00000000004388cb: and byte ptr [rdi], cl; test byte ptr [rbx + rax - 0x74b80000], bl; jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x000000000042b9ed: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b8d0: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000423e01: and byte ptr [rdi], cl; xchg dword ptr [rcx + 0xf000000], eax; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000047170e: and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000420716: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000423c8c: and byte ptr [rdx + 0x26], dh; cmp rdx, 0x40; ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004237f8: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000043635f: and byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004261ab: and byte ptr [rdx + rsi*4 + 0x29], bh; ret 0xfec5; 
0x00000000004244ab: and byte ptr [rdx - 0x5f], 0xc5; add bh, ch; jmp qword ptr [rsi + 0x66]; 
0x000000000042d119: and byte ptr [rip + 0x62de037e], ah; mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf6b: and byte ptr [rip + 0x62de037e], ah; movabs dword ptr [0x46b262fefc25204d], eax; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000042d118: and byte ptr [rip + 0x62de037e], r12b; mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x0000000000427213: and byte ptr [rip - 0x4d9d0104], ah; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042cf73: and byte ptr [rip - 0x4d9d0104], ah; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x0000000000427212: and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042cf72: and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000042752b: and byte ptr [rip - 0x4d9d2108], ah; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042752a: and byte ptr [rip - 0x4d9d2108], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042720c: and byte ptr [rip - 0x5c9d2108], ah; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x0000000000434d8c: and byte ptr [rsi + 0x11], dh; test eax, eax; je 0x34e00; tzcnt eax, eax; vzeroupper; ret; 
0x000000000045a4e7: and byte ptr [rsi + 0x16], dh; test eax, eax; je 0x5a580; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a7a7: and byte ptr [rsi + 0x16], dh; test eax, eax; je 0x5a840; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000043534e: and byte ptr [rsi + 0xf], dh; test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x000000000042c6ff: and byte ptr [rsi + rbx*8 + 0x29], bh; ret 0xfec5; 
0x000000000042b569: and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042b3ed: and byte ptr [rsi], ah; ret; 
0x000000000045b6cc: and byte ptr gs:[rsi], ah; ret; 
0x000000000045c868: and ch, 0x10; lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041e889: and ch, 2; lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e789: and ch, 2; lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e689: and ch, 2; lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e700: and ch, 2; lea rdx, [rip + 0x1076]; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e852: and ch, 2; lea rdx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041e752: and ch, 2; lea rdx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e652: and ch, 2; lea rdx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x000000000041e8b0: and ch, 2; lea rdx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b0: and ch, 2; lea rdx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b0: and ch, 2; lea rdx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e0: and ch, 2; lea rdx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e0: and ch, 2; lea rdx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e0: and ch, 2; lea rdx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000041e900: and ch, 2; lea rdx, [rip + 0xe36]; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e800: and ch, 2; lea rdx, [rip + 0xf76]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041eb72: and ch, 4; jne 0x1eb24; ret; 
0x000000000041ee92: and ch, 4; jne 0x1ee44; ret; 
0x0000000000436772: and ch, 4; jne 0x36734; ret; 
0x000000000045c762: and ch, 4; jne 0x5c724; ret; 
0x000000000045c84d: and ch, 4; lea rax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x000000000041ee04: and ch, 4; lea rdx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eef4: and ch, 4; lea rdx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000459ea4: and ch, 4; lea rdx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597fa: and ch, 4; lea rdx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041ea62: and ch, 4; lea rdx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000459782: and ch, 4; lea rdx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c7c2: and ch, 4; lea rdx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041ec44: and ch, 4; lea rdx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041ecc8: and ch, 8; jne 0x1ecb4; lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x000000000043c25d: and ch, al; sar r15b, 1; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000045adb1: and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004220d2: and cl, byte ptr [rax + rcx]; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ae7d: and cl, byte ptr [rax - 0x73]; add eax, 0x70dcb; ret; 
0x000000000041a3cc: and cl, byte ptr [rax - 0x75]; add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000411bed: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040383b: and cl, byte ptr [rdi]; xchg dword ptr [rax + 0x48fffff1], edx; lea ecx, [rip + 0x75917]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000405359: and cl, byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000447078: and cl, ch; ret 0xfff4; 
0x0000000000411fd0: and cl, ch; ret; 
0x000000000045e46a: and cl, cl; std; jmp qword ptr [rsi - 0x70]; 
0x0000000000411fcf: and cl, r13b; ret; 
0x000000000041e9b0: and dh, 2; lea rax, [rip + 0x5026]; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041eb66: and dh, 8; jne 0x1eb46; lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000041ee86: and dh, 8; jne 0x1ee66; lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x0000000000436766: and dh, 8; jne 0x3674d; lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000045c756: and dh, 8; jne 0x5c73d; lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x0000000000450f6d: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000045efcc: and dl, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000042afa9: and dword ptr [rax + 0x3a], eax; xor al, 7; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x0000000000411bf0: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000437252: and dword ptr [rax + 1], ecx; clc; shr rax, 2; vzeroupper; ret; 
0x0000000000423f87: and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x0000000000459ec4: and dword ptr [rax], eax; add bh, dh; ret 0; 
0x0000000000416567: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004165bf: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045cae8: and dword ptr [rcx], eax; clc; shr eax, 2; vzeroupper; ret; 
0x0000000000430c28: and dword ptr [rcx], eax; clc; vzeroupper; ret; 
0x000000000041724e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x000000000043c2f8: and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x0000000000447f3a: and dword ptr [rsi + 3], 0xbfade800; sti; jmp qword ptr [rsi + 0x66]; 
0x000000000042721a: and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x840f; 
0x0000000000427532: and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf7a: and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x0000000000427232: and dword ptr [rsi], esp; ret 0xfbc5; 
0x0000000000427219: and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x0000000000427531: and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf79: and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000044a34b: and eax, 0; ret; 
0x0000000000464031: and eax, 0x10; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000418784: and eax, 0x10; ret; 
0x00000000004361a4: and eax, 0x28; jne 0x361d8; add rsp, 0x110; pop rbx; ret; 
0x00000000004367da: and eax, 0x28; jne 0x36804; add rsp, 0x20; pop rbx; ret; 
0x0000000000438512: and eax, 0x28; jne 0x38529; add rsp, 0x28; ret; 
0x0000000000439052: and eax, 0x28; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390e1: and eax, 0x28; jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439182: and eax, 0x28; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a8: and eax, 0x28; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a397: and eax, 0x28; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a62c: and eax, 0x28; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000043c4db: and eax, 0x28; jne 0x3c526; add rsp, 0x110; pop rbx; ret; 
0x000000000044a6a3: and eax, 0x28; jne 0x4a6eb; mov eax, edx; add rsp, 0x148; ret; 
0x000000000044ae46: and eax, 0x28; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af0f: and eax, 0x28; jne 0x4af1e; add rsp, 0xd8; ret; 
0x000000000045019b: and eax, 0x28; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000457c6b: and eax, 0x28; jne 0x57c78; add rsp, 0x10; pop rbx; ret; 
0x0000000000457e89: and eax, 0x28; jne 0x57e96; add rsp, 0x10; pop rbx; ret; 
0x0000000000458ff1: and eax, 0x28; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e924: and eax, 0x28; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea1a: and eax, 0x28; jne 0x5ea29; movzx eax, al; add rsp, 0x58; ret; 
0x000000000045ea77: and eax, 0x28; jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000045eb8e: and eax, 0x28; jne 0x5ebb3; mov eax, edx; add rsp, 0x38; ret; 
0x000000000046972c: and eax, 0x28; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004697e3: and eax, 0x28; jne 0x697f0; add rsp, 0x20; pop rbx; ret; 
0x00000000004698fa: and eax, 0x28; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a4: and eax, 0x28; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a24: and eax, 0x28; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469af0: and eax, 0x28; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469be0: and eax, 0x28; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046b112: and eax, 0x28; jne 0x6b15e; leave; ret; 
0x000000000046bcfe: and eax, 0x28; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706de: and eax, 0x28; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707b0: and eax, 0x28; jne 0x707bc; add rsp, 0x38; ret; 
0x0000000000470820: and eax, 0x28; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470906: and eax, 0x28; jne 0x70912; add rsp, 0x38; ret; 
0x000000000047096b: and eax, 0x28; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b54: and eax, 0x28; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5df: and eax, 0x28; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6ae: and eax, 0x28; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb3f: and eax, 0x28; jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000046b69b: and eax, 0x2f8; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000417b93: and eax, 0x2f8; ret; 
0x0000000000408b76: and eax, 0x30; xchg dword ptr [rip + 0x9eba7], edx; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000417be9: and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x0000000000401941: and eax, 0x3fc00; ret; 
0x00000000004019f2: and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x0000000000401954: and eax, 0x3fffc00; ret; 
0x000000000045ea53: and eax, 0x410000; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000041c9c2: and eax, 0x5c415d5b; ret; 
0x0000000000466c5d: and eax, 0x5dc870f; add byte ptr [rax], al; lea rdi, [rip + 0x28775]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000042d11a: and eax, 0x62de037e; mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf6c: and eax, 0x62de037e; movabs dword ptr [0x46b262fefc25204d], eax; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000043b9ab: and eax, 0x698; add rsp, 0x10; pop rbx; ret; 
0x0000000000401a05: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000004019ab: and eax, 0x7ff80000; ret; 
0x0000000000415657: and eax, 0x83000925; ret 0x8901; 
0x000000000041e8b7: and eax, 0x8d480000; add eax, 0x24bf; cmovne rax, rdx; ret; 
0x000000000042720d: and eax, 0xa362def8; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042752c: and eax, 0xb262def8; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x0000000000427214: and eax, 0xb262fefc; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042cf74: and eax, 0xb262fefc; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x0000000000457b3c: and eax, 0xc; cmp eax, 4; je 0x57b21; ret; 
0x0000000000459e6a: and eax, 0xd1890000; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000401980: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000043ffac: and eax, 0xfffee6e9; jmp qword ptr [rsi + 0xf]; 
0x000000000041b702: and eax, 0xffffffc0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000431134: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d3: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004188e7: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000041812b: and eax, 0xfffffff7; je 0x18058; lea rdi, [rip + 0x62d95]; call 0x12c40; mov eax, 0x23; ret; 
0x00000000004733e8: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000047627d: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000041de72: and eax, 1; cmovne rax, rdx; ret; 
0x0000000000417b89: and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000457bb9: and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000047553f: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000469c48: and eax, 2; sub eax, 1; ret; 
0x0000000000437ffa: and eax, dword ptr [rax + rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x44a0b; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000475591: and eax, dword ptr [rax]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000418141: and eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000464579: and eax, dword ptr [rbp + 0x3948fffb]; ret; 
0x000000000041ee8f: and eax, dword ptr [rcx]; add byte ptr [rax - 0x528afb1b], al; ret; 
0x000000000042450c: and eax, ebp; sti; xchg ebx, eax; ret 0xc085; 
0x000000000045a731: and eax, ecx; je 0x5a740; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045aa21: and eax, ecx; je 0x5aa30; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045bb8e: and eax, ecx; je 0x5bb98; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045bbfd: and eax, ecx; je 0x5bbd0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x000000000045bce5: and eax, ecx; je 0x5bc90; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045bd95: and eax, ecx; je 0x5bd50; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045bdd8: and eax, ecx; je 0x5bde2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045c0d0: and eax, ecx; je 0x5c0da; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c180: and eax, ecx; je 0x5c156; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c280: and eax, ecx; je 0x5c243; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c322: and eax, ecx; je 0x5c2f3; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c366: and eax, ecx; je 0x5c370; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c3c8: and eax, ecx; je 0x5c3d2; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c40d: and eax, ecx; je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045c44d: and eax, ecx; je 0x5c420; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c535: and eax, ecx; je 0x5c4e5; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c5d5: and eax, ecx; je 0x5c595; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c612: and eax, ecx; je 0x5c61c; bsr eax, eax; add rax, rdi; ret; 
0x000000000045dc0e: and eax, ecx; je 0x5dc1d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045defe: and eax, ecx; je 0x5df0d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000424371: and ebp, eax; std; xlatb; ret 0xc085; 
0x0000000000457b95: and ebp, ecx; add al, 0; ret; 
0x0000000000416568: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004165c0: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000413f98: and ebx, 0; add byte ptr [rax], al; mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040183e: and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000043983b: and ebx, 0xfffffffe; mov dword ptr [rsp + 8], r8d; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000412cdb: and ebx, dword ptr [rbx + 0x48]; mov eax, ecx; pop rbp; pop r12; ret; 
0x000000000041ea2f: and ecx, 0x120; cmp ecx, 0x120; je 0x1ea40; ret; 
0x000000000045974f: and ecx, 0x120; cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c78f: and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ec0f: and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041edcf: and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eebf: and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000459e6f: and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000422584: and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000043a60c: and ecx, 2; jne 0x3a640; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000472f37: and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x000000000041ebaa: and ecx, 4; lea rax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000045cfe7: and ecx, 7; sarx eax, eax, ecx; test eax, eax; je 0x5cf07; tzcnt eax, eax; ret; 
0x000000000041ed28: and ecx, 8; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead8: and ecx, 8; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000043ab6a: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000043ab53: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x0000000000473127: and edi, 0x20; je 0x7313c; movss xmm0, dword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x000000000042116c: and edi, 0xffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004225a9: and edi, 0xfffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000457ae0: and edi, 2; je 0x57af0; ret; 
0x00000000004662d3: and edi, eax; and rsi, rax; cmp rdi, rsi; jne 0x662e0; pop rbx; ret; 
0x00000000004705f4: and edi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000441b93: and edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x00000000004187d7: and edx, 0x3b; cmp edx, 0xa; je 0x187ee; xor eax, eax; ret; 
0x0000000000457a89: and edx, 0x3b; or edx, 2; cmp edx, 0xa; je 0x57aa8; mov eax, esi; ret; 
0x000000000045d1e1: and edx, 0xf00; je 0x5d1f8; add rax, 2; ret; 
0x000000000045d1db: and edx, 0xf; je 0x5d1f0; ret; 
0x0000000000401968: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000418945: and edx, 0xfffffff0; cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x00000000004396fe: and edx, 1; or rax, rdx; mov qword ptr [r11], rax; pop rbx; pop rbp; ret; 
0x000000000041f6a5: and edx, 8; lea rax, [rip + 0x164c1]; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041ec9f: and edx, 8; lea rax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000044acb9: and edx, dword ptr [rip - 0x77cfffa]; add dword ptr [rdi + 0x26], edi; xor eax, eax; add rsp, 8; ret; 
0x000000000045efaf: and edx, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000045807f: and esi, 0x80; syscall; 
0x0000000000458929: and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000004662d6: and esi, eax; cmp rdi, rsi; jne 0x662e0; pop rbx; ret; 
0x000000000046bf6b: and esi, ebp; cld; call qword ptr [rax - 0x2d5fa75]; add eax, dword ptr [rax]; ret; 
0x000000000041e888: and r13b, 2; lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e788: and r13b, 2; lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e688: and r13b, 2; lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x0000000000431133: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d2: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004188e6: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x00000000004733e7: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000047627c: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000045bce4: and rax, rcx; je 0x5bc90; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045bd94: and rax, rcx; je 0x5bd50; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045c27f: and rax, rcx; je 0x5c243; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c321: and rax, rcx; je 0x5c2f3; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043983a: and rbx, 0xfffffffffffffffe; mov dword ptr [rsp + 8], r8d; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000042116b: and rdi, 0xffffffffffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004225a8: and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004662d2: and rdi, rax; and rsi, rax; cmp rdi, rsi; jne 0x662e0; pop rbx; ret; 
0x0000000000418944: and rdx, 0xfffffffffffffff0; cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x00000000004662d5: and rsi, rax; cmp rdi, rsi; jne 0x662e0; pop rbx; ret; 
0x0000000000425bc8: and spl, r8b; jge 0x25bca; ret 0x41c4; 
0x0000000000425f78: and spl, r8b; jge 0x25f7a; ret 0x41c4; 
0x00000000004265d8: and spl, r8b; jge 0x265da; ret 0x41c4; 
0x0000000000426998: and spl, r8b; jge 0x2699a; ret 0x41c4; 
0x000000000045c0cb: blsmsk ecx, ecx; and eax, ecx; je 0x5c0da; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c17b: blsmsk ecx, ecx; and eax, ecx; je 0x5c156; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c361: blsmsk ecx, ecx; and eax, ecx; je 0x5c370; bsr eax, eax; add rax, rdi; ret; 
0x000000000041880a: bnd ja 0x187cb; jmp qword ptr [rsi - 0x70]; 
0x000000000044ad5a: bnd jae 0x4ad3f; mov rax, rcx; ret; 
0x0000000000454320: bnd jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453757: bnd jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457458: bnd jae 0x573b3; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040dbf6: bnd jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045a530: bnd jbe 0x5a500; test eax, eax; je 0x5a580; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a7f0: bnd jbe 0x5a7c0; test eax, eax; je 0x5a840; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045da06: bnd jbe 0x5d9c0; test eax, eax; je 0x5da60; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045dcc6: bnd jbe 0x5dc80; test eax, eax; je 0x5dd20; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045dfb3: bnd jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e24a: bnd jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e26a: bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e28a: bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2aa: bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045ca68: bnd je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x00000000004358b1: bnd jge 0x358fc; js 0x358ca; jae 0x294b989c; ret 0xc748; 
0x000000000045b86d: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000045b85a: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000045ba30: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042428c: bsf eax, eax; add rax, rcx; ret; 
0x000000000042408d: bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x00000000004245aa: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042b5a4: bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x0000000000424264: bsf eax, eax; add rax, rdi; ret; 
0x0000000000423f67: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004240c7: bsf eax, eax; add rax, rdi; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042bd78: bsf eax, eax; add rax, rdi; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a232: bsf eax, eax; add rax, rdi; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045d6d2: bsf eax, eax; add rax, rdi; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x000000000042b5f0: bsf eax, eax; add rax, rdx; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000045b954: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b80d: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042c140: bsf eax, eax; add rax, rdx; ret; 
0x000000000042bd1a: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000042bcd0: bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000423f81: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000423f91: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000423fa1: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045a668: bsf eax, eax; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a92e: bsf eax, eax; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045db40: bsf eax, eax; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045de0b: bsf eax, eax; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004354fd: bsf eax, eax; cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354cb: bsf eax, eax; cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435549: bsf eax, eax; cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004355d4: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435021: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000042b430: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x2b42c; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b5b0: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x2b5fb; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b594: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b460: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x2b42c; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042af78: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b3f9: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x0000000000423f71: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000437111: bsf eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000437101: bsf eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x00000000004370f1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x00000000004370d1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004377d1: bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377c1: bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x00000000004353a1: bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x0000000000435391: bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x0000000000435381: bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x0000000000435371: bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377e1: bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x0000000000424730: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000424740: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000424710: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000437950: bsf eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004242a1: bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a6c1: bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x00000000004246f9: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004242b1: bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6a9: bsf eax, eax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x00000000004242c1: bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242d1: bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045a991: bsf eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000045a9a1: bsf eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000045a974: bsf eax, eax; lea rax, [rdi + rax + 0xe0]; ret; 
0x0000000000424387: bsf eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004243a1: bsf eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x0000000000424394: bsf eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000045da21: bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da31: bsf eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da41: bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da51: bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045de71: bsf eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000045de81: bsf eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045de57: bsf eax, eax; lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x000000000045d9b3: bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045db91: bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000042c193: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b643: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045ba60: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b6f0: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ae71: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b700: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000045ae91: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b5b1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae51: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000430f08: bsf eax, eax; ret; 
0x00000000004373b1: bsf eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000437098: bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000045ce5b: bsf eax, eax; shr eax, 2; xtest; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000434de1: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000434dd1: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000434dc1: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000434db1: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000430c21: bsf eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000430c31: bsf eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000430c41: bsf eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000430c11: bsf eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000430f11: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f21: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f31: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f41: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045cec1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000045db50: bsf eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de20: bsf eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045a680: bsf eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a940: bsf eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a131: bsf eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a0ed: bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004371f5: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424039: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000437281: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424061: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000437261: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424051: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000434fb1: bsf eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000434fa1: bsf eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435561: bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435571: bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379e1: bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379c1: bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000045aac9: bsf eax, eax; sub rdx, rax; jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad30: bsf eax, eax; sub rdx, rax; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad40: bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad50: bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad60: bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000459fa1: bsf eax, eax; vzeroupper; cmp edx, eax; jle 0x59fbd; add rax, rdi; ret; 
0x0000000000430c06: bsf eax, eax; vzeroupper; ret; 
0x0000000000430ebb: bsf eax, eax; xtest; jne 0x30ec7; vzeroupper; ret; 
0x0000000000431096: bsf eax, edx; ret; 
0x0000000000437b24: bsf eax, edx; shr rax, 2; ret; 
0x0000000000432194: bsf ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x000000000042e96a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ce61: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042c3a3: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce72: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042c3c1: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce83: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c3d5: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce51: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c391: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ea30: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042e7fc: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004311f2: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c37: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000430761: bsf edx, edx; lea r11, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430729: bsf edx, edx; lea r11, [rip + 0x4be5d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430704: bsf edx, edx; lea r11, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306e7: bsf edx, edx; lea r11, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425664: bsf edx, edx; lea r11, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425647: bsf edx, edx; lea r11, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042e791: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045a501: bsf esi, eax; add rdi, rsi; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x000000000045d9c1: bsf esi, eax; lea rdi, [rdi + rsi*4]; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x0000000000423f66: bsf rax, r8; add rax, rdi; vzeroupper; ret; 
0x0000000000431003: bsf rax, rax; add rax, rdi; ret; 
0x000000000042b593: bsf rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042c0f3: bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6a8: bsf rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x0000000000424386: bsf rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042c2b0: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042b760: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045bb3f: bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045a0ec: bsf rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004371f4: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424038: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000004310e2: bsf rax, rdx; ret; 
0x0000000000437b23: bsf rax, rdx; shr rax, 2; ret; 
0x000000000042e969: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ea2f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042e7fb: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004311f1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c36: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000430760: bsf rdx, rdx; lea r11, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430728: bsf rdx, rdx; lea r11, [rip + 0x4be5d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430703: bsf rdx, rdx; lea r11, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306e6: bsf rdx, rdx; lea r11, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425663: bsf rdx, rdx; lea r11, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425646: bsf rdx, rdx; lea r11, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042e790: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045c3ec: bsr eax, eax; add rax, r8; ret; 
0x000000000045bbbd: bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x000000000045c0d4: bsr eax, eax; add rax, rdi; ret; 
0x000000000045bb92: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045be32: bsr eax, eax; add rax, rdi; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045c103: bsr eax, eax; add rax, rsi; ret; 
0x000000000045c130: bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x000000000045c256: bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x000000000045c411: bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045c165: bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045bc01: bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x000000000045c184: bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c14d: bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000045bbe0: bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000045bcea: bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045c2f9: bsr eax, eax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000045bcb1: bsr eax, eax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd60: bsr eax, eax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000045c12f: bsr rax, rax; lea rax, [r8 + rax + 0x20]; ret; 
0x000000000045c284: bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045bce9: bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045c2f8: bsr rax, rax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000045bcb0: bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd5f: bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000045b8f4: bswap eax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000045b8f1: bswap ecx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000045b8f3: bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000045b8f0: bswap rcx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000046b614: bts eax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000435361: bts eax, esi; tzcnt eax, eax; ret; 
0x00000000004370b4: bts eax, esi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000434da1: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000046b479: bts edx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000435793: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c33: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004356f4: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x000000000046b613: bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000435360: bts rax, rsi; tzcnt eax, eax; ret; 
0x00000000004370b3: bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000434da0: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000046b478: bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000435792: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c32: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004356f3: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000431252: bzhi eax, ecx, edx; jne 0x3123b; xor eax, eax; vzeroupper; ret; 
0x0000000000431f0a: bzhi eax, ecx, edx; jne 0x31ef9; xor eax, eax; ret; 
0x000000000042b44c: bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b41c: bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000423ccc: bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000045b083: bzhi edx, eax, edx; jne 0x5ae50; xor eax, eax; vzeroupper; ret; 
0x0000000000423a99: bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041813b: call 0x12c40; mov eax, 0x23; ret; 
0x0000000000457def: call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000417c60: call 0x12c40; nop dword ptr [rax]; ret; 
0x0000000000417cb5: call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000456fc8: call 0x12c70; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000414535: call 0x155a0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x000000000040317d: call 0x158c3181; mov word ptr [rdx], cs; add bh, dh; ret 0; 
0x000000000046b77c: call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x00000000004500c7: call 0x17cd0; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000041e363: call 0x17cd0; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044acef: call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x000000000046b7bd: call 0x17cf0; xor eax, eax; add rsp, 8; ret; 
0x000000000041ba97: call 0x18960; nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000041d103: call 0x18ac0; mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041d0b8: call 0x1a1e0; mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004018ae: call 0x1c09bc9; ret; 
0x0000000000436cd8: call 0x1d050; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000470be3: call 0x1d050; nop dword ptr [rax + rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000046dd0a: call 0x1d050; test rbx, rbx; jne 0x6dd00; mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x00000000004784dd: call 0x1d050; test rbx, rbx; jne 0x784cd; pop rbx; ret; 
0x0000000000457bb7: call 0x1e5fec7; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000040ee51: call 0x1f10ee55; add al, bpl; ret; 
0x00000000004682fa: call 0x1f15fe73; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x000000000046839a: call 0x1f15ff13; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x00000000004358ff: call 0x214c2cf7; ror byte ptr [rcx - 0x77], 1; ret; 
0x000000000040154c: call 0x28e0; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000454d06: call 0x2ef4d0a; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000044e53a: call 0x3005ac43; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf172; 
0x000000000043741c: call 0x30d5d23; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000417f27: call 0x37d90; mov edx, ebp; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041c8cd: call 0x392b0; cmp rax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x000000000043a3db: call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000043a41b: call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x000000000043a3f9: call 0x3a350; mov edx, 2; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x0000000000418b94: call 0x3a770; cmp eax, 1; je 0x18ba8; add rsp, 8; ret; 
0x000000000045eac3: call 0x3ad90; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000447713: call 0x3ad90; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x648f9]; ret; 
0x0000000000438fc4: call 0x3ad90; nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000045e772: call 0x3ad90; nop word ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x000000000043a67d: call 0x3ad90; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000415571: call 0x3ad90; nop word ptr cs:[rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000046bf6a: call 0x3ad90; nop; mov eax, dword ptr [rip + 0x3fd2a]; ret; 
0x00000000004391cb: call 0x3ad90; xor eax, eax; syscall; 
0x00000000004391cb: call 0x3ad90; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000466264: call 0x3b720; xor eax, eax; add rsp, 8; ret; 
0x000000000047297b: call 0x3c3d0; call rax; 
0x000000000043ec53: call 0x3c5b0; mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x0000000000438fbf: call 0x3ef0; call 0x3ad90; nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000043d278: call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x00000000004384a0: call 0x3ef0; nop word ptr cs:[rax + rax]; nop; mov eax, 0x18; syscall; 
0x00000000004088b1: call 0x3ef0; xor eax, eax; ret; 
0x0000000000436cd0: call 0x3f3f0; mov rdi, qword ptr [rbx]; call 0x1d050; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000419f61: call 0x415de0c3; pop rbp; pop r14; ret; 
0x0000000000457560: call 0x4161b6c2; pop rbp; pop r14; ret; 
0x000000000045fd2c: call 0x41623e8e; pop rbp; pop r14; ret; 
0x000000000045fda4: call 0x41623f06; pop rbp; pop r14; ret; 
0x0000000000460673: call 0x416247d3; pop rbp; pop rbp; ret; 
0x000000000046073b: call 0x4162489b; pop rbp; pop rbp; ret; 
0x000000000046fe48: call 0x41633faa; pop rbp; ret; 
0x000000000046958c: call 0x41d7a; jmp qword ptr [rsi + 0xf]; 
0x000000000046b616: call 0x468ffe4b; or byte ptr [rax + 2], bh; ret; 
0x000000000043b07c: call 0x4803b73d; mov eax, edx; ret; 
0x00000000004253e4: call 0x48eb3ef9; mov eax, edx; ret; 
0x0000000000430474: call 0x48ebef89; mov eax, edi; ret; 
0x000000000043c495: call 0x4a3f0; test eax, eax; jne 0x3c510; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000046f898: call 0x4ba86; jmp qword ptr [rsi - 0x70]; 
0x00000000004188f0: call 0x508ed0f9; add dword ptr [rax - 0x77], ecx; adc eax, 0x8c8ab; ret; 
0x0000000000470d18: call 0x50945520; push qword ptr [rsi + rdx + 0x49]; lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000045609d: call 0x56b00; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000043874c: call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000477888: call 0x58dc0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a6f4: call 0x58f90; test eax, eax; jne 0x4a708; add rsp, 8; ret; 
0x000000000040fc89: call 0x5b00fc8e; pop rbp; ret; 
0x000000000040f77a: call 0x5c4254da; pop r13; pop r14; ret; 
0x000000000041049d: call 0x5c4261fd; ret; 
0x00000000004133c7: call 0x5c429127; ret; 
0x0000000000414833: call 0x5c42a593; ret; 
0x0000000000417f12: call 0x5c42dc72; pop r13; pop r14; ret; 
0x0000000000439529: call 0x5c44f289; jmp rax; 
0x00000000004395b9: call 0x5c44f319; jmp rax; 
0x000000000043a1a4: call 0x5c44ff04; pop r13; pop r14; ret; 
0x0000000000455605: call 0x5c46b365; pop r13; pop r14; ret; 
0x00000000004559ba: call 0x5c46b71a; pop r13; ret; 
0x0000000000455fd0: call 0x5c46bd30; pop r13; ret; 
0x0000000000459f28: call 0x5c46fc88; pop r13; ret; 
0x000000000045c950: call 0x5c4726b0; jmp rax; 
0x000000000046f4c4: call 0x5c485224; pop r13; ret; 
0x000000000046fe38: call 0x5c485b98; pop r13; ret; 
0x00000000004575a7: call 0x5d46d1ed; pop r14; ret; 
0x0000000000459089: call 0x5e840; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000470d9c: call 0x61f30; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000469869: call 0x638f0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000472823: call 0x638f0; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000465485: call 0x64d70; add rsp, 0xd8; ret; 
0x000000000044a306: call 0x6504a30a; mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a363: call 0x6504a367; add rax, qword ptr [0]; ret; 
0x00000000004394f3: call 0x65353; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000439583: call 0x653e3; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000466290: call 0x66190; test eax, eax; jne 0x6629b; pop rbx; ret; 
0x0000000000447f04: call 0x69b90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000470884: call 0x6e450; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000470733: call 0x6e450; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004701ce: call 0x70390; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x0000000000470ab3: call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000047098f: call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000472bf1: call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000472f7e: call 0x730c0; mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000414950: call 0x771785b7; sub cl, byte ptr [rdi]; mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040fda1: call 0x772a39c6; xor dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401605: call 0x77930; mov byte ptr [rip + 0xa568f], 1; pop rbp; ret; 
0x000000000043709c: call 0x77fc35a3; ret; 
0x00000000004370bc: call 0x77fc35c3; ret; 
0x00000000004370dc: call 0x77fc35e3; ret; 
0x00000000004370f9: call 0x77fc3600; ret; 
0x0000000000437109: call 0x77fc3610; ret; 
0x0000000000437119: call 0x77fc3620; ret; 
0x0000000000437201: call 0x77fc3708; ret; 
0x0000000000437258: call 0x77fc375f; ret; 
0x000000000043726d: call 0x77fc3774; ret; 
0x000000000043728d: call 0x77fc3794; ret; 
0x00000000004372b2: call 0x77fc37b9; ret; 
0x0000000000437302: call 0x77fc3809; ret; 
0x000000000043731e: call 0x77fc3825; ret; 
0x000000000043733f: call 0x77fc3846; ret; 
0x0000000000437366: call 0x77fc386d; ret; 
0x000000000045caae: call 0x77fe8fb5; ret; 
0x000000000045cacb: call 0x77fe8fd2; ret; 
0x000000000045caec: call 0x77fe8ff3; ret; 
0x000000000045cb0c: call 0x77fe9013; ret; 
0x000000000045cb2c: call 0x77fe9033; ret; 
0x000000000045cbf3: call 0x77fe90fa; ret; 
0x000000000045cc0d: call 0x77fe9114; ret; 
0x000000000045cc2d: call 0x77fe9134; ret; 
0x000000000045cc5f: call 0x77fe9166; ret; 
0x000000000041417a: call 0x844528e; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447f1d: call 0x8470823; pop rbx; ret; 
0x00000000004646af: call 0x8cac9fc; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000040879b: call 0x9940; add rsp, 8; ret; 
0x000000000045021c: call 0x9fd8551; jbe 0x50203; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045572c: call 0x9fdda61; jbe 0x55713; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000040174f: call 0xa600; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000412e1e: call 0xecb132; add byte ptr [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000423ed7: call 0xf094feb; adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e2a5: call 0xf992aca; mov dh, 0x14; add dword ptr [rax - 0x73], ecx; add eax, 0x9308c; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b0: call 0xf992bd5; mov dh, 0x14; add dword ptr [rax - 0x73], ecx; add eax, 0x92f81; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000046d33b: call 0xfda0c88; cmp dword ptr [rcx - 1], -1; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000040197e: call 0xfe09c8f; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004584ce: call 0xffffffff8414867b; ret 0xfffb; 
0x000000000044f5a7: call 0xffffffff898904ad; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000413186: call 0xffffffff8b4958fe; and al, 8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000045358d: call 0xffffffff8b4d3596; add al, 0xd0; jmp rax; 
0x0000000000453944: call 0xffffffff8b4d394d; add al, 0xc6; jmp rax; 
0x000000000046c349: call 0xffffffff8b5097c3; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000044a6f6: call 0xffffffffc089a6fb; jne 0x4a708; add rsp, 8; ret; 
0x00000000004373b5: call 0xffffffffc63cbbbc; cmovb eax, esi; vzeroupper; ret; 
0x00000000004094ac: call 0xffffffffc6afa3f9; mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x00000000004517c2: call 0xffffffffc70517bd; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x000000000045ce5f: call 0xffffffffd606dd66; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000423a9b: call 0xffffffffe1c70495; sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040c94a: call 0xffffffffe800c952; pop rbp; sbb al, 1; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004188ec: call 0xffffffffe8c2d102; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x0000000000470a0b: call 0xffffffffe8ca676b; jl 0x709b5; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000044d275: call 0xffffffffec04d278; ret 0x8b48; 
0x00000000004758e8: call 0xfffffffff07ce439; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475a8c: call 0xfffffffff07ce5dd; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475be0: call 0xfffffffff07ce731; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475c64: call 0xfffffffff07ce7b5; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e32: call 0xfffffffff07ce983; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e84: call 0xfffffffff07ce9d5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475f57: call 0xfffffffff07ceaa8; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000401952: call 0xfffffffffc003e5d; inc dword ptr [rbx]; ret; 
0x00000000004019f0: call 0xfffffffffc003efb; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x0000000000401a13: call 0xfffffffffc003f26; add eax, dword ptr [rax]; ret; 
0x000000000044ab0e: call 0xffffffffff0727fb; jmp qword ptr [rsi + 0x66]; 
0x0000000000418809: call 0xffffffffffc00000; nop; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000040c110: call 0xfffffffffff956fe; inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000416205: call ptr [rbp + 0x41]; pop rsp; ret; 
0x000000000043c2c2: call ptr [rbx + 0x48]; cmovbe edx, eax; mov rax, rdx; ret; 
0x0000000000419fca: call ptr [rbx + 0x48]; mov eax, ecx; pop rbp; pop r12; ret; 
0x000000000046484e: call ptr [rbx + 0x48]; mov eax, esi; ret; 
0x00000000004121c8: call ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000044ab72: call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004560c8: call ptr [rbx + 0x5d]; ret; 
0x0000000000413196: call qword ptr [rax + 0x18]; 
0x000000000040baf5: call qword ptr [rax + 0x38]; 
0x0000000000458c37: call qword ptr [rax + 0x48]; 
0x0000000000457013: call qword ptr [rax + 0x68]; 
0x000000000047622b: call qword ptr [rax + 0x74]; 
0x0000000000456fde: call qword ptr [rax - 0x1413d6b7]; cwde; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004014ca: call qword ptr [rax - 0x18]; 
0x000000000046bf6e: call qword ptr [rax - 0x2d5fa75]; add eax, dword ptr [rax]; ret; 
0x0000000000408fce: call qword ptr [rax - 0x7cb7fc75]; in eax, dx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040bd1f: call qword ptr [rax]; 
0x000000000040cfcf: call qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x00000000004143ab: call qword ptr [rbp + 0x18]; 
0x0000000000415ddf: call qword ptr [rbp + 0x20]; 
0x000000000041655f: call qword ptr [rbp + 0x30]; 
0x000000000040a8d2: call qword ptr [rbp + 0x38]; 
0x0000000000413eb7: call qword ptr [rbp + 0x40]; 
0x0000000000401654: call qword ptr [rbp + 0x48]; 
0x000000000045e6bf: call qword ptr [rbp + 0x53]; 
0x0000000000410605: call qword ptr [rbp + 0x60]; 
0x0000000000415d2d: call qword ptr [rbp + 0x68]; 
0x0000000000413fa6: call qword ptr [rbp + 0x70]; 
0x0000000000412e2e: call qword ptr [rbp + 0x78]; 
0x0000000000402ff0: call qword ptr [rbx + 0x10]; 
0x0000000000415e79: call qword ptr [rbx + 0x18]; 
0x000000000040bf01: call qword ptr [rbx + 0x38]; 
0x000000000043aed9: call qword ptr [rbx + 0x48]; 
0x000000000046f16f: call qword ptr [rbx + 0x49]; 
0x000000000043dd1f: call qword ptr [rbx - 0x77]; 
0x0000000000408af0: call qword ptr [rbx]; 
0x0000000000458f0f: call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000040adf9: call qword ptr [rcx + 0x38]; 
0x0000000000473a9b: call qword ptr [rcx]; 
0x0000000000416733: call qword ptr [rdi + 0x18]; 
0x000000000040ef09: call qword ptr [rdi + 0x38]; 
0x0000000000416a0c: call qword ptr [rdi + 0x58]; 
0x0000000000475736: call qword ptr [rdx + 0x50]; 
0x0000000000410f43: call qword ptr [rsi + 0x18]; 
0x000000000040e660: call qword ptr [rsi + 0x38]; 
0x0000000000410ce0: call qword ptr [rsi + 0x70]; 
0x0000000000401010: call rax; 
0x0000000000401010: call rax; add rsp, 8; ret; 
0x0000000000437cf0: call rax; test eax, eax; jne 0x37d10; xor eax, eax; add rsp, 8; ret; 
0x00000000004094bb: call rbx; 
0x000000000043c4a8: call rcx; 
0x0000000000439a1b: call rdi; 
0x0000000000417daf: call rdx; 
0x000000000047543a: call rsi; 
0x00000000004127ca: call rsp; 
0x000000000043b823: cdq; add al, 7; add al, ch; hlt; ret; 
0x000000000043c5c3: cdq; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; ret; 
0x000000000040f8d3: cdq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000451a53: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x000000000045c673: cdq; clc; add al, 0; ret; 
0x000000000046dc9d: cdq; mov rax, rsi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000040db4b: cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040e3b2: cdqe; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2a7: cdqe; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2ff: cdqe; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e455: cdqe; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e357: cdqe; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000429cc4: clc; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045c654: clc; add al, 0; ret; 
0x000000000040875f: clc; add byte ptr [rax], al; test eax, eax; jne 0x8770; pop rbx; ret; 
0x00000000004116bd: clc; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xf748; 
0x0000000000436f8c: clc; add cl, byte ptr [rax + 1]; ret; 
0x0000000000436e30: clc; add cl, byte ptr [rax - 0x77]; ret; 
0x00000000004017f1: clc; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ret; 
0x000000000045e563: clc; add dword ptr [rdi + 0x19], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c9bf: clc; add dword ptr [rdi + 0x25], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000044acbe: clc; add dword ptr [rdi + 0x26], edi; xor eax, eax; add rsp, 8; ret; 
0x000000000046b9be: clc; add dword ptr [rdi + 0x2e], edi; pop rbx; ret; 
0x000000000041510b: clc; add dword ptr [rdi + 0x31], edi; add rsp, 8; ret; 
0x000000000041d238: clc; add dword ptr [rdi + 5], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000044af4d: clc; add dword ptr [rdi + 7], edi; ret; 
0x00000000004171e3: clc; add dword ptr [rdi + 9], edi; ret; 
0x0000000000418b9a: clc; add dword ptr [rdx + rcx + 0x48], esi; add esp, 8; ret; 
0x000000000046381b: clc; add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x00000000004245af: clc; add rax, rcx; ret; 
0x0000000000417b88: clc; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045b8ad: clc; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000042b5a9: clc; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x0000000000473ad4: clc; dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x000000000044fa4d: clc; dec dword ptr [rdi]; test byte ptr [rax - 0x7c000017], ch; ret; 
0x0000000000411fbd: clc; dec dword ptr [rdi]; xchg esp, eax; rol byte ptr [rax + rax*8 - 0x74b7628b], 0xb3; movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x000000000042752d: clc; fisub word ptr [rdx - 0x4e]; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042720e: clc; fisub word ptr [rdx - 0x5d]; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000040bd1c: clc; idiv bh; call qword ptr [rax]; 
0x000000000040cfcc: clc; idiv bh; call qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x0000000000425728: clc; imul eax, dword ptr [rip + 0xc634900], -0x6d; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004225e0: clc; ja 0x225c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000435953: clc; ja 0x359b1; pop r12; pop rbp; ret; 
0x0000000000459fa5: clc; ja 0x59fe1; ret 0x127e; 
0x000000000045a25f: clc; ja 0x5a29b; ret 0x167e; 
0x000000000045a647: clc; ja 0x5a5cf; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000045d428: clc; ja 0x5d464; ret 0x117e; 
0x000000000045d702: clc; ja 0x5d73e; ret 0x137e; 
0x000000000045db1f: clc; ja 0x5daa7; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x0000000000439280: clc; jb 0x39290; xor eax, eax; ret; 
0x0000000000401a08: clc; jg 0x1a02; int1; mov eax, eax; ret; 
0x0000000000477904: clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004766c0: clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000473720: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004018fc: clc; jmp rax; 
0x0000000000417da3: clc; jne 0x17d80; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x0000000000409877: clc; jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000040175c: clc; leave; ret; 
0x00000000004224b1: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000042074c: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045b8cf: clc; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x0000000000475a94: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004751fa: clc; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000044ade4: clc; mov rdi, rdx; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x00000000004733ea: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000047627f: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000041f804: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000045b115: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b515: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045807c: clc; not esi; and esi, 0x80; syscall; 
0x0000000000466a41: clc; or byte ptr [rdi], cl; test esp, ebp; adc eax, 0x8b480000; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000041e25a: clc; or dword ptr [rdi + 0x62], esi; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044adea: clc; or dword ptr [rdi - 0x2e], esi; mov rax, rcx; ret; 
0x00000000004690a4: clc; or dword ptr [rsi - 0x18], esi; cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x000000000045021f: clc; or dword ptr [rsi - 0x20], esi; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045b179: clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000045b0d1: clc; or rcx, rsi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d1: clc; or rcx, rsi; sub rax, rcx; jne 0x5b4f0; ret; 
0x0000000000450409: clc; pop r14; ret; 
0x000000000045035b: clc; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041c8d4: clc; push qword ptr [rax + rcx + 0x48]; add esp, 8; ret; 
0x0000000000417162: clc; ret; 
0x000000000046a1ba: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000045cac9: clc; shr eax, 2; vzeroupper; ret; 
0x0000000000437c3f: clc; shr rax, 2; ret; 
0x00000000004371fe: clc; shr rax, 2; vzeroupper; ret; 
0x000000000046964d: clc; std; jbe 0x69658; ret; 
0x000000000045b91a: clc; sub eax, ecx; ret; 
0x000000000046b10d: clc; sub rax, qword ptr fs:[0x28]; jne 0x6b15e; leave; ret; 
0x000000000045b11c: clc; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b51c: clc; sub rax, rcx; jne 0x5b4f0; ret; 
0x0000000000423f6c: clc; vzeroupper; ret; 
0x00000000004240cc: clc; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042b1c3: clc; xtest; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042bd7d: clc; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a237: clc; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045be37: clc; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045d6d7: clc; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x0000000000401943: cld; add eax, dword ptr [rax]; ret; 
0x000000000046bf6d: cld; call qword ptr [rax - 0x2d5fa75]; add eax, dword ptr [rax]; ret; 
0x000000000046f16e: cld; call qword ptr [rbx + 0x49]; 
0x000000000046b160: cld; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000045c855: cld; dec dword ptr [rax - 0x73]; adc eax, 0xfffc6b62; cmove rax, rdx; ret; 
0x000000000045c870: cld; dec dword ptr [rax - 0x73]; add eax, 0xfffc7387; cmove rax, rdx; ret; 
0x000000000043c732: cld; dec dword ptr [rax - 0x77]; add eax, 0x6f5ed; add rsp, 0x1a8; ret; 
0x00000000004592ec: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000047830d: cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000040c74d: cld; idiv bh; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x000000000046cf97: cld; inc dword ptr [rbp + 0x480a74c0]; mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x00000000004019f4: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x0000000000401956: cld; inc dword ptr [rbx]; ret; 
0x000000000045a25a: cld; ja 0x5a248; add eax, ebp; clc; ja 0x5a29b; ret 0x167e; 
0x000000000045d6fd: cld; ja 0x5d6eb; add eax, ebp; clc; ja 0x5d73e; ret 0x137e; 
0x000000000043fbf5: cld; jae 0x3fc68; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x00000000004271ef: cld; jmp qword ptr [rdx + 1]; 
0x0000000000436714: cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b062: cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000436fc8: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000043e41c: cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004224c0: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000042075e: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000041f7de: cld; mov dword ptr [rdi], esi; ret; 
0x000000000041f7d8: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000043ae70: cld; or eax, 0x83480007; cmp eax, 0x70ddc; add byte ptr [rdx + riz + 0x48], dh; lea eax, [rip + 0x70dcb]; ret; 
0x000000000045b0ce: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4ce: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045c82b: cld; push rsi; ret 0x7420; 
0x0000000000425b04: cld; ret 0x41c4; 
0x0000000000429759: cld; ret 0xf66; 
0x0000000000420764: cld; ret; 
0x0000000000421bd1: cld; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000421376: cld; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004208cd: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420693: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000420b8f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004237ab: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000423b5b: cli; add al, 0x7d; cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423f0b: cli; add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x0000000000407405: cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000423a51: cli; add byte ptr [rax], 0; add byte ptr [rdi + 0x68], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000042382e: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000423f10: cli; add dword ptr [rdi + 0x1c], edi; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x0000000000423d86: cli; add dword ptr [rdi + 0x26], edi; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000423535: cli; add dword ptr [rdi + 0x37], edi; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f5: cli; add dword ptr [rdi + 0x37], edi; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x0000000000423b60: cli; add dword ptr [rdi + 0x3c], edi; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000408b82: cli; add dword ptr [rdi + 0x5a], edi; call rax; 
0x000000000040fa4e: cli; add dword ptr [rdi + 0xe], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004180d6: cli; add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000042383b: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000042077c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000423e60: cli; and byte ptr [rdi + 0x1c], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000422493: cli; and byte ptr [rdi + 0x69], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000421ece: cli; and byte ptr [rdi + 0x6e], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000423e00: cli; and byte ptr [rdi], cl; xchg dword ptr [rcx + 0xf000000], eax; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004237f7: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000045efb0: cli; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000045efcd: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000465f32: cli; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000421691: cli; ja 0x21740; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421625: cli; ja 0x2174d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000423458: cli; ja 0x23480; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000423408: cli; ja 0x23489; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000423c91: cli; ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423c35: cli; ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004318b5: cli; ja 0x2c8c0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000040d891: cli; jae 0xf2f0; mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004237e4: cli; jb 0x237f6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041f7ed: cli; jg 0x1f7f7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000041ff7d: cli; jg 0x1ff87; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000420737: cli; jg 0x20741; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000420e7b: cli; jg 0x20e85; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004216f1: cli; jg 0x216fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000423541: cli; jg 0x2354b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423701: cli; jg 0x2370b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423806: cli; jg 0x23810; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000424acb: cli; jg 0x24ae5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb7b: cli; jg 0x2fb95; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000454e8f: cli; jg 0x54ea1; xchg esp, eax; ret 0xd008; 
0x0000000000456040: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000046000f: cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000456248: cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000477613: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77620; ret; 
0x0000000000477943: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77950; ret; 
0x0000000000475553: cli; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004754c3: cli; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000475523: cli; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000475563: cli; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000004755c3: cli; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004755b3: cli; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000475573: cli; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000044ad54: cli; mov rdi, rax; cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x000000000040adf2: cli; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000413f9f: cli; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040d948: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454329: cli; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000434246: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423810: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000403ff8: cli; or dh, byte ptr [rdi + 0x27]; lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x000000000043c592: cli; out 0xff, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423ab9: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423509: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x00000000004756f3: cli; ret; 
0x0000000000417b4f: cli; setae al; ret; 
0x00000000004481bc: cli; sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x00000000004557a6: cli; sub dword ptr [rdi + 0xe], esi; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x0000000000431139: cli; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d8: cli; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004356e8: cli; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000435678: cli; test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x0000000000437b88: cli; test rdx, rdx; je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b19: cli; test rdx, rdx; je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d319: cli; test rdx, rdx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2bc: cli; test rdx, rdx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000420b9d: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000477007: cmc; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x0000000000417be8: cmc; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x000000000046cdf1: cmc; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000454027: cmc; fld qword ptr [rax + rax]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000042b44f: cmc; leave; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b41f: cmc; leave; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000423ccf: cmc; leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423a9c: cmc; leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000418952: cmova eax, edx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x000000000045e599: cmova edx, eax; mov eax, 0xd9; syscall; 
0x000000000045e599: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x0000000000418951: cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x000000000045e598: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000045e598: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000043ba79: cmovae esi, eax; cmp r9, rcx; jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x000000000043ba78: cmovae rsi, r8; cmp r9, rcx; jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x0000000000417afc: cmovb eax, edx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004355da: cmovb eax, esi; ret; 
0x0000000000435027: cmovb eax, esi; vzeroupper; ret; 
0x0000000000417afb: cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043c2c5: cmovbe edx, eax; mov rax, rdx; ret; 
0x0000000000417b48: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000043c2c4: cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000417b47: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000043a405: cmove eax, edx; add rsp, 8; ret; 
0x000000000041e69b: cmove eax, edx; ret; 
0x0000000000476265: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e05: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x0000000000470d99: cmove edx, eax; call 0x61f30; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000045980c: cmove edx, eax; mov rax, rdx; ret; 
0x00000000004647d9: cmove esi, eax; mov rax, rsi; ret; 
0x0000000000476264: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e04: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x000000000041e69a: cmove rax, rdx; ret; 
0x000000000045980b: cmove rdx, rax; mov rax, rdx; ret; 
0x00000000004647d8: cmove rsi, rax; mov rax, rsi; ret; 
0x00000000004157bb: cmovg eax, ecx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a6b: cmovg eax, ecx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000045a50c: cmovg eax, edi; ret; 
0x00000000004157ba: cmovg rax, rcx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a6a: cmovg rax, rcx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000045a50b: cmovg rax, rdi; ret; 
0x000000000042529a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; ret; 
0x0000000000424aaa: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000444e72: cmovl edi, dword ptr [rcx]; ret 0xd575; 
0x0000000000437cca: cmovne eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041de76: cmovne eax, edx; ret; 
0x0000000000471d54: cmovne esi, eax; mov rax, r14; pop r14; ret; 
0x0000000000471d53: cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x0000000000437cc9: cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041de75: cmovne rax, rdx; ret; 
0x0000000000401d88: cmovno ebx, dword ptr [rcx + rax*2 + 0x5d]; pop r14; pop r15; ret; 
0x0000000000402cb6: cmovns ecx, dword ptr [rbp - 0x404080]; dec dword ptr [rax + 0x39]; ret 0x1d73; 
0x000000000046e190: cmovs eax, dword ptr [rbx + 0x5d5b28c4]; pop r12; pop r13; ret; 
0x00000000004606ae: cmovs eax, dword ptr [rbx - 0x7f170f19]; or edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000044af41: cmovs eax, edi; or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x4af58; ret; 
0x000000000044046c: cmovs eax, edx; ret; 
0x000000000043b63f: cmovs ebp, dword ptr [rcx]; ret; 
0x0000000000420745: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000401982: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000040196a: cmovs esp, dword ptr [rbx + 4]; xchg esi, eax; add rax, rsi; jmp rax; 
0x000000000047575d: cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041f9ea: cmp ah, al; vzeroupper; ret; 
0x0000000000430baa: cmp ah, byte ptr [rbx - 0x1c]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000429cbe: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004299eb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3eb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a27b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ac8b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9ab: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x0000000000429bb0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a5b0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e80: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a2d0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ace0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046bb86: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000401a9f: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000414952: cmp al, 0x16; ja 0x14980; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000045b917: cmp al, 0x17; or eax, edi; sub eax, ecx; ret; 
0x000000000043c290: cmp al, 0x18; mov eax, esi; syscall; 
0x0000000000415997: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041986e: cmp al, 0x24; mov rsi, qword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x000000000045c9f7: cmp al, 0x24; push 1; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000004146f5: cmp al, 0x24; sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000044bc8b: cmp al, 0x29; add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000040fda3: cmp al, 0x29; ja 0xfdd8; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004754af: cmp al, 0x32; or byte ptr [rdi], cl; test dword ptr [rbx], edx; sar al, 0xff; mov rax, qword ptr [rax]; ret; 
0x0000000000456dcb: cmp al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000044ff83: cmp al, 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004582b3: cmp al, 0x89; ret 0x53e9; 
0x0000000000422580: cmp al, 0xa; add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000045d9c6: cmp al, 0xb7; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x000000000046df29: cmp al, 0xd3; nop dword ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000475502: cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x00000000004690a3: cmp al, 9; jbe 0x69090; cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x0000000000435996: cmp al, byte ptr [rax]; jne 0x35988; xor eax, eax; ret; 
0x0000000000423b5e: cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x000000000047859a: cmp al, byte ptr [rbx]; add cl, ch; jle 0x785ae; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000466307: cmp al, ch; ret; 
0x0000000000460292: cmp al, cl; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000424716: cmp al, dh; ret; 
0x0000000000424715: cmp al, r14b; ret; 
0x00000000004210fe: cmp bh, bh; ret; 
0x0000000000450440: cmp bh, bl; jmp qword ptr [rsi + 0x66]; 
0x000000000046e592: cmp bl, dh; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478967: cmp byte ptr [r11], r8b; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044cbee: cmp byte ptr [r13 - 0x77], r9b; ret; 
0x0000000000410fc7: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000409552: cmp byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x000000000040baf7: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000045ad37: cmp byte ptr [rax + 1], cl; clc; ret; 
0x0000000000447353: cmp byte ptr [rax - 0x75], cl; je 0x4737c; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000441e1e: cmp byte ptr [rax - 0x75], cl; jl 0x41e47; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000410fc8: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000470a08: cmp byte ptr [rax - 0x77], cl; call 0xffffffffe8ca676b; jl 0x709b5; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000043ba36: cmp byte ptr [rax - 0x77], cl; push rax; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000440aef: cmp byte ptr [rax - 0x77], cl; ret 0x428b; 
0x0000000000424746: cmp byte ptr [rax], ah; ret; 
0x000000000041e690: cmp byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x37b6; cmove rax, rdx; ret; 
0x0000000000415ce3: cmp byte ptr [rax], al; je 0x15cf0; ret; 
0x00000000004732d1: cmp byte ptr [rax], al; je 0x7332a; add rsp, 0x18; ret; 
0x0000000000430b04: cmp byte ptr [rax], al; ret 0xf66; 
0x000000000042b650: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x0000000000424736: cmp byte ptr [rax], dl; ret; 
0x0000000000424735: cmp byte ptr [rax], r10b; ret; 
0x0000000000424745: cmp byte ptr [rax], r12b; ret; 
0x000000000042b64f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044cbef: cmp byte ptr [rbp - 0x77], cl; ret; 
0x00000000004086de: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000412400: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000414f6b: cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000478968: cmp byte ptr [rbx], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045704b: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000043b9e7: cmp byte ptr [rcx + 0xf], al; xchg ebp, eax; ret 0x8548; 
0x0000000000415d58: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044673f: cmp byte ptr [rcx - 0xa], al; ret 0x7402; 
0x0000000000416624: cmp byte ptr [rcx], 0xa; je 0x16638; cmp rsi, rcx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x000000000045a106: cmp byte ptr [rcx], 0xc2; jbe 0x5a115; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045a685: cmp byte ptr [rcx], 0xc2; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a945: cmp byte ptr [rcx], 0xc2; jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045d5a6: cmp byte ptr [rcx], 0xc2; jbe 0x5d5b5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f6e4: cmp byte ptr [rcx], al; ret; 
0x0000000000402cb9: cmp byte ptr [rdi + 0x48ffffbf], 0x39; ret 0x1d73; 
0x00000000004754ae: cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x0000000000435995: cmp byte ptr [rdx], 0; jne 0x35988; xor eax, eax; ret; 
0x000000000045e8ff: cmp byte ptr [rip + 0x47172], 0; je 0x5e965; mov eax, 0x101; syscall; 
0x000000000044a720: cmp byte ptr [rip + 0x5b351], 0; je 0x4a740; mov eax, 0x13e; syscall; 
0x000000000043b070: cmp byte ptr [rip + 0x6bce9], 0; jne 0x3b088; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x0000000000438790: cmp byte ptr [rip + 0x6d2e1], 0; je 0x387b0; mov eax, 1; syscall; 
0x00000000004386f0: cmp byte ptr [rip + 0x6d381], 0; je 0x38710; xor eax, eax; syscall; 
0x000000000041c900: cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000407f10: cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000407f85: cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000441db2: cmp byte ptr [rsi], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000465bdb: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004684f2: cmp ch, byte ptr [rsi]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000430bad: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000435c54: cmp cl, byte ptr [rax + rdx + 2]; jne 0x35c70; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d04: cmp cl, byte ptr [rax + rdx + 2]; jne 0x35d20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x0000000000474252: cmp cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000460afe: cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x000000000044fa2f: cmp cl, ch; ret 0xffe8; 
0x00000000004081d1: cmp cl, ch; ret 0xfffb; 
0x000000000046b50d: cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x0000000000475d38: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004220ae: cmp dh, al; ret; 
0x000000000042b5f7: cmp dh, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000042b5ab: cmp dh, byte ptr [rax]; jne 0x2b5fb; ret; 
0x000000000042b434: cmp dh, byte ptr [rdi + rax + 0x20]; jne 0x2b42c; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b5b4: cmp dh, byte ptr [rdi + rax + 0x20]; jne 0x2b5fb; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b598: cmp dh, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b464: cmp dh, byte ptr [rdi + rax + 0x60]; jne 0x2b42c; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042af7c: cmp dh, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b0f1: cmp dh, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000042b3fd: cmp dh, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x000000000042b160: cmp dh, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x00000000004088b2: cmp dh, byte ptr [rsi - 0x3fce0001]; ret; 
0x00000000004237f6: cmp dl, 0x20; jb 0x23805; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004237e3: cmp dl, 0x40; jb 0x237f6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000047567c: cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000042077b: cmp dl, 1; jb 0x20784; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000042383a: cmp dl, 1; jb 0x23841; mov byte ptr [rdi], cl; ret; 
0x000000000042382d: cmp dl, 2; jb 0x2383a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000423822: cmp dl, 4; jb 0x2382d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000042380f: cmp dl, 8; jb 0x2381e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000457120: cmp dword ptr [rax + 0x18], edx; jae 0x57144; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004191d3: cmp dword ptr [rax + 0x20], 0; je 0x191f0; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000456ff8: cmp dword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x000000000045e8fe: cmp dword ptr [rax + 0x471723d], eax; add byte ptr [rax], al; je 0x5e965; mov eax, 0x101; syscall; 
0x000000000041271d: cmp dword ptr [rax + 0x48], edx; je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x000000000043ae01: cmp dword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x0000000000417beb: cmp dword ptr [rbx + 0x17408f8], eax; ret; 
0x0000000000417da1: cmp dword ptr [rbx - 8], eax; jne 0x17d80; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x00000000004732cf: cmp dword ptr [rcx + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x000000000044f11a: cmp dword ptr [rcx + 0x48000008], -0x73; add al, 0x83; ret; 
0x000000000046d340: cmp dword ptr [rcx - 1], -1; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000004576c4: cmp dword ptr [rcx], 0xa; je 0x576d8; cmp rsi, rcx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x0000000000464827: cmp dword ptr [rcx], esi; neg byte ptr [rbx + 0x48]; mov eax, esi; ret; 
0x000000000046dd31: cmp dword ptr [rdi + 0x28], edi; je 0x6dd40; ret; 
0x0000000000415ce1: cmp dword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x0000000000458996: cmp dword ptr [rdi + 8], eax; jne 0x588cf; sub dword ptr [rdi + 4], 1; je 0x588f0; xor eax, eax; ret; 
0x0000000000478ab1: cmp dword ptr [rdi + rdx + 0x18], 0; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000040dbf8: cmp dword ptr [rdi], 0x17; add byte ptr [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000457ba0: cmp dword ptr [rdi], 1; je 0x57bb0; ret; 
0x0000000000447816: cmp dword ptr [rdi], ecx; mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x000000000044a2ec: cmp dword ptr [rdi], esi; je 0x4a2f8; ret; 
0x0000000000460895: cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x60868; ret; 
0x000000000046088f: cmp dword ptr [rdx + 8], 5; jne 0x60868; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x60868; ret; 
0x0000000000416625: cmp dword ptr [rdx], ecx; je 0x16638; cmp rsi, rcx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x00000000004576c5: cmp dword ptr [rdx], ecx; je 0x576d8; cmp rsi, rcx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x000000000043ae75: cmp dword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x0000000000412c71: cmp dword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x0000000000472007: cmp dword ptr [rsp + 0xc], 1; setne al; mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x000000000041c8d3: cmp eax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x000000000043b5d2: cmp eax, -1; je 0x3b61a; ret; 
0x000000000046964c: cmp eax, -3; jbe 0x69658; ret; 
0x00000000004589ac: cmp eax, 0x10; je 0x588b1; mov eax, 0x16; ret; 
0x000000000043d303: cmp eax, 0x16; ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000043d34a: cmp eax, 0x17; ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000458975: cmp eax, 0x21; je 0x589d0; mov eax, 0x16; ret; 
0x0000000000457dea: cmp eax, 0x230e1; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000466c66: cmp eax, 0x28775; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000045896c: cmp eax, 0x31; je 0x58af8; cmp eax, 0x21; je 0x589d0; mov eax, 0x16; ret; 
0x00000000004556ab: cmp eax, 0x37910; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000040fea5: cmp eax, 0x37; ja 0xff20; lea rcx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043d273: cmp eax, 0x40208; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x00000000004188c4: cmp eax, 0x408; jbe 0x188d0; ret; 
0x000000000045ea58: cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000043c085: cmp eax, 0x41191; mov eax, 0x15; syscall; 
0x000000000043a416: cmp eax, 0x42a15; call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x000000000043a3d6: cmp eax, 0x42a35; call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000045e900: cmp eax, 0x47172; add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000472f7f: cmp eax, 0x48000001; mov ecx, dword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x000000000044acea: cmp eax, 0x614f1; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x0000000000418136: cmp eax, 0x62d95; call 0x12c40; mov eax, 0x23; ret; 
0x0000000000417cb0: cmp eax, 0x6321b; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000417c5b: cmp eax, 0x63270; call 0x12c40; nop dword ptr [rax]; ret; 
0x000000000043b071: cmp eax, 0x6bce9; add byte ptr [rbp + 0xf], dh; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x0000000000438791: cmp eax, 0x6d2e1; add byte ptr [rdi + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000043ae76: cmp eax, 0x70ddc; add byte ptr [rdx + riz + 0x48], dh; lea eax, [rip + 0x70dcb]; ret; 
0x000000000043ae6f: cmp eax, 0x70dfc; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x00000000004088ac: cmp eax, 0x7193c; call 0x3ef0; xor eax, eax; ret; 
0x0000000000407c81: cmp eax, 0x720fa; mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004018f1: cmp eax, 0x777ca; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000472c4a: cmp eax, 0x7fff; je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x000000000041c901: cmp eax, 0x8f2f9; add byte ptr [rbp + 7], dh; ret; 
0x0000000000418934: cmp eax, 0xa0; jbe 0x18940; ret; 
0x0000000000456e22: cmp eax, 0xd8a38b4c; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x6520; 
0x0000000000418904: cmp eax, 0xffff; jbe 0x18910; ret; 
0x00000000004701c9: cmp eax, 0xffffcbc2; call 0x70390; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x0000000000437d5d: cmp eax, 0xfffff000; ja 0x37d80; hlt; mov eax, esi; syscall; 
0x000000000043859a: cmp eax, 0xfffff000; ja 0x385a8; xor eax, eax; ret; 
0x00000000004386fe: cmp eax, 0xfffff000; ja 0x38760; ret; 
0x00000000004387a1: cmp eax, 0xfffff000; ja 0x38800; ret; 
0x0000000000438838: cmp eax, 0xfffff000; ja 0x38840; ret; 
0x0000000000438fd8: cmp eax, 0xfffff000; ja 0x38fe0; ret; 
0x00000000004391d5: cmp eax, 0xfffff000; ja 0x391e0; ret; 
0x0000000000439208: cmp eax, 0xfffff000; ja 0x39210; ret; 
0x0000000000439241: cmp eax, 0xfffff000; ja 0x39250; ret; 
0x00000000004393d4: cmp eax, 0xfffff000; ja 0x39400; ret; 
0x000000000044a731: cmp eax, 0xfffff000; ja 0x4a790; ret; 
0x0000000000458f4b: cmp eax, 0xfffff000; ja 0x58f58; ret; 
0x000000000045e5a4: cmp eax, 0xfffff000; ja 0x5e5b0; ret; 
0x000000000045eadb: cmp eax, 0xfffff000; ja 0x5eae8; ret; 
0x0000000000470c38: cmp eax, 0xfffff000; ja 0x70c40; ret; 
0x000000000043c2be: cmp eax, 0xfffff000; pop rbx; cmovbe rdx, rax; mov rax, rdx; ret; 
0x00000000004384b8: cmp eax, 0xfffff001; jae 0x384c0; ret; 
0x0000000000439428: cmp eax, 0xfffff001; jae 0x39430; ret; 
0x0000000000439458: cmp eax, 0xfffff001; jae 0x39460; ret; 
0x0000000000439488: cmp eax, 0xfffff001; jae 0x39490; ret; 
0x000000000043a698: cmp eax, 0xfffff001; jae 0x3a6a0; ret; 
0x000000000045e788: cmp eax, 0xfffff001; jae 0x5e790; ret; 
0x000000000045e7b8: cmp eax, 0xfffff001; jae 0x5e7c0; ret; 
0x000000000045e7e8: cmp eax, 0xfffff001; jae 0x5e7f0; ret; 
0x000000000045e818: cmp eax, 0xfffff001; jae 0x5e820; ret; 
0x000000000045e848: cmp eax, 0xfffff001; jae 0x5e850; ret; 
0x0000000000418b99: cmp eax, 1; je 0x18ba8; add rsp, 8; ret; 
0x000000000041510a: cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x00000000004171e2: cmp eax, 1; jg 0x171f0; ret; 
0x000000000041c9be: cmp eax, 1; jg 0x1c9e8; pop rbx; pop rbp; pop r12; ret; 
0x000000000041d237: cmp eax, 1; jg 0x1d241; pop rbx; pop rbp; pop r12; ret; 
0x000000000044acbd: cmp eax, 1; jg 0x4ace8; xor eax, eax; add rsp, 8; ret; 
0x000000000044af4c: cmp eax, 1; jg 0x4af58; ret; 
0x000000000045e562: cmp eax, 1; jg 0x5e580; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b9bd: cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x0000000000457b3f: cmp eax, 4; je 0x57b21; ret; 
0x0000000000418949: cmp eax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x0000000000417bec: cmp eax, 8; je 0x17bf2; ret; 
0x000000000041e259: cmp eax, 9; ja 0x1e2c0; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044ade9: cmp eax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x000000000045021e: cmp eax, 9; jbe 0x50203; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045572e: cmp eax, 9; jbe 0x55713; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x0000000000452b6b: cmp eax, dword ptr [r8]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000452b11: cmp eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040bc60: cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004187d9: cmp eax, dword ptr [rbx + 0xf740afa]; xor eax, eax; ret; 
0x0000000000417c84: cmp eax, dword ptr [rcx + rcx*4 - 0x3a]; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000043b614: cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000472ee9: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov rax, rcx; add rsp, 0x38; ret; 
0x0000000000414215: cmp eax, dword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x0000000000405a80: cmp eax, dword ptr [rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000046bd81: cmp eax, dword ptr [rip + 0x40649]; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000415f44: cmp eax, eax; jae 0x15f58; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000412e1d: cmp eax, ebp; jae 0x12f10; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000413185: cmp eax, ebp; jae 0x131b0; mov rax, qword ptr [rsp + 8]; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000004157b8: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a68: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000045b8af: cmp eax, ecx; jne 0x5b8f0; xor eax, eax; ret; 
0x00000000004225df: cmp eax, edi; ja 0x225c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000043927f: cmp eax, edi; jb 0x39290; xor eax, eax; ret; 
0x0000000000409876: cmp eax, edi; jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000417af9: cmp eax, edx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041724b: cmp eax, edx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x000000000040d49d: cmp eax, esi; jae 0xea70; mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000041ca83: cmp eax, esi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000046749c: cmp ebp, 0x25; ja 0x67240; lea rsi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x0000000000457b75: cmp ebp, ecx; add al, 0; ret; 
0x000000000043846d: cmp ebx, 0x4a; ja 0x383d0; lea rdx, [rip + 0x44727]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000408ae6: cmp ebx, ebp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041c94e: cmp ebx, ebp; jne 0x1c938; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ea35: cmp ecx, 0x120; je 0x1ea40; ret; 
0x0000000000459755: cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c795: cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ec15: cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041edd5: cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eec5: cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000459e75: cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000455838: cmp ecx, 0x2e; ja 0x5585c; lea rsi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000046b50e: cmp ecx, 0xe4757fff; mov eax, 1; ret; 
0x0000000000450cbe: cmp ecx, 7; ja 0x51110; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000040b38e: cmp ecx, 7; ja 0xb780; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000046fed6: cmp ecx, dword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x000000000042a281: cmp ecx, dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043a0ce: cmp ecx, dword ptr [rax - 0x77]; ret 0xabe; 
0x000000000043e3ba: cmp ecx, dword ptr [rax - 0x7b]; push qword ptr [rax + rbx - 0x18]; mov ebp, esp; std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000046a72e: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000436aec: cmp ecx, dword ptr [rbx - 0x3f7cefbf]; add dword ptr [rcx - 0x6ff0efbf], ecx; ret; 
0x000000000044fd26: cmp ecx, dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x00000000004105fe: cmp ecx, eax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000413eaa: cmp ecx, eax; jae 0x13ec2; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000413f95: cmp ecx, eax; jae 0x14080; mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000415872: cmp ecx, eax; jae 0x158d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000415968: cmp ecx, eax; jae 0x15980; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415d26: cmp ecx, eax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd8: cmp ecx, eax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000415e68: cmp ecx, eax; jae 0x15ed8; movzx esi, byte ptr [r12]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x0000000000416558: cmp ecx, eax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004165ef: cmp ecx, eax; jae 0x16608; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc8: cmp ecx, eax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000456ed7: cmp ecx, eax; jae 0x56fc8; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x00000000004575ed: cmp ecx, eax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000457687: cmp ecx, eax; jae 0x576a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000418a6a: cmp ecx, eax; je 0x18a75; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000469c44: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000041cb89: cmp ecx, ebx; jne 0x1cd26; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043ba7d: cmp ecx, ecx; jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x000000000044df69: cmp ecx, edi; jb 0x4df50; mov eax, r8d; ret; 
0x0000000000464518: cmp ecx, edi; je 0x64520; ret; 
0x00000000004588c3: cmp ecx, edx; jne 0x588cf; test eax, eax; jne 0x58bb0; mov eax, 1; ret; 
0x0000000000464706: cmp ecx, edx; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x00000000004760b7: cmp ecx, edx; sbb eax, eax; ret; 
0x0000000000430b24: cmp ecx, esi; jae 0x30b78; movsxd rax, ecx; ret; 
0x000000000043500e: cmp ecx, esi; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x00000000004373a1: cmp ecx, esi; jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x000000000046dcb9: cmp ecx, esi; jb 0x6dca1; ret; 
0x000000000041ece3: cmp ecx, esp; add byte ptr [rax], al; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x00000000004556aa: cmp edi, dword ptr [rip + 0x37910]; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000430751: cmp edi, dword ptr [rsi + 0x63490004]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004215e7: cmp edi, edx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004662d9: cmp edi, esi; jne 0x662e0; pop rbx; ret; 
0x0000000000421ecd: cmp edx, 0x20; ja 0x21f40; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000422492: cmp edx, 0x20; ja 0x22500; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000423e5f: cmp edx, 0x20; ja 0x23e80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423dff: cmp edx, 0x20; ja 0x23e89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004557a5: cmp edx, 0x29; ja 0x557b8; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x0000000000421690: cmp edx, 0x40; ja 0x21740; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421624: cmp edx, 0x40; ja 0x2174d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000423457: cmp edx, 0x40; ja 0x23480; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000423407: cmp edx, 0x40; ja 0x23489; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000423c90: cmp edx, 0x40; ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423c34: cmp edx, 0x40; ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000458bf0: cmp edx, 0x7fffffff; jne 0x58a5a; sub dword ptr [rdi + 4], 1; je 0x58bbd; mov eax, 0x83; ret; 
0x0000000000420e10: cmp edx, 0x80; ja 0x20ef0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000423a50: cmp edx, 0x80; ja 0x23ac0; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004239f4: cmp edx, 0x80; ja 0x23ac9; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000403ff7: cmp edx, 0xa; ja 0x4023; lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x00000000004187da: cmp edx, 0xa; je 0x187ee; xor eax, eax; ret; 
0x0000000000457a8f: cmp edx, 0xa; je 0x57aa8; mov eax, esi; ret; 
0x000000000044ad81: cmp edx, 0xf; ja 0x4ad68; mov rcx, rax; mov rax, rcx; ret; 
0x00000000004251b6: cmp edx, 1; ja 0x25250; je 0x25240; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000042fa86: cmp edx, 1; ja 0x2fb20; je 0x2fb10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000430256: cmp edx, 1; ja 0x302f0; je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x0000000000423534: cmp edx, 1; jg 0x23570; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f4: cmp edx, 1; jg 0x23730; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x0000000000423b5f: cmp edx, 1; jg 0x23ba0; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423d85: cmp edx, 1; jg 0x23db0; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000423f0f: cmp edx, 1; jg 0x23f30; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x000000000046ceac: cmp edx, 1; jg 0x6cf50; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000408b81: cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000408a79: cmp edx, 1; jg 0x8c00; mov edi, r13d; call rax; 
0x0000000000408b30: cmp edx, 1; jg 0x8c28; mov esi, r13d; mov rdi, r8; call rax; 
0x000000000040fa4d: cmp edx, 1; jg 0xfa60; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004220d0: cmp edx, dword ptr [rip + 0x84c22]; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045e596: cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000045a0bf: cmp edx, eax; jbe 0x5a115; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a107: cmp edx, eax; jbe 0x5a115; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045a686: cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a66b: cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a946: cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a931: cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045d552: cmp edx, eax; jbe 0x5d5b5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045d5a7: cmp edx, eax; jbe 0x5d5b5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045db56: cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045db43: cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045de26: cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de0e: cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000459fa7: cmp edx, eax; jle 0x59fbd; add rax, rdi; ret; 
0x000000000045a261: cmp edx, eax; jle 0x5a27b; add rax, rdi; ret; 
0x000000000045d42a: cmp edx, eax; jle 0x5d43f; add rax, rdi; ret; 
0x000000000045d704: cmp edx, eax; jle 0x5d71b; add rax, rdi; ret; 
0x000000000046d214: cmp edx, ebx; jne 0x6d1a0; ret; 
0x00000000004314db: cmp edx, ecx; ja 0x314b2; xor eax, eax; vzeroupper; ret; 
0x000000000043167a: cmp edx, ecx; ja 0x31657; nop; xor eax, eax; vzeroupper; ret; 
0x000000000043219b: cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x000000000043234a: cmp edx, ecx; ja 0x32327; nop; xor eax, eax; ret; 
0x000000000043ba82: cmp edx, ecx; jae 0x3ba2f; ret; 
0x000000000040d93e: cmp edx, ecx; jae 0xe830; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004760b2: cmp edx, ecx; jb 0x760bb; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000431f2e: cmp edx, ecx; jbe 0x31f11; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000040d890: cmp edx, edi; jae 0xf2f0; mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000417b4e: cmp edx, edi; setae al; ret; 
0x000000000045a509: cmp edx, esi; cmovg rax, rdi; ret; 
0x000000000044ad59: cmp edx, esi; jae 0x4ad3f; mov rax, rcx; ret; 
0x000000000045431f: cmp edx, esi; jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453756: cmp edx, esi; jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040dbf5: cmp edx, esi; jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045ca67: cmp edx, esi; je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x0000000000459085: cmp edx, esp; add al, 0; call 0x5e840; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000474caa: cmp esi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000043534c: cmp esi, 0x20; jbe 0x35360; test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x0000000000447ed8: cmp esi, 3; je 0x47ee0; pop rbx; ret; 
0x000000000043778c: cmp esi, 8; jbe 0x377a0; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x0000000000439035: cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004390c4: cmp esi, 9; je 0x390f0; mov eax, 0x48; syscall; 
0x00000000004355d8: cmp esi, eax; cmovb eax, esi; ret; 
0x0000000000435025: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004355c8: cmp esi, eax; ja 0x353c7; mov eax, esi; ret; 
0x0000000000437a4b: cmp esi, eax; ja 0x37807; mov eax, esi; ret; 
0x0000000000435500: cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354ce: cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435587: cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043554c: cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000043791c: cmp esi, eax; jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043795d: cmp esi, eax; jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000437a07: cmp esi, eax; jb 0x37a18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379ac: cmp esi, eax; jb 0x37a18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004690a8: cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x000000000045e8a3: cmp esi, eax; jne 0x5e880; mov eax, edi; ret; 
0x000000000041662a: cmp esi, ecx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x00000000004576ca: cmp esi, ecx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x000000000043598d: cmp esi, edx; je 0x35854; cmp byte ptr [rdx], 0; jne 0x35988; xor eax, eax; ret; 
0x000000000043c731: cmp esp, edi; dec dword ptr [rax - 0x77]; add eax, 0x6f5ed; add rsp, 0x1a8; ret; 
0x00000000004732ce: cmp qword ptr [r9 + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x000000000045711f: cmp qword ptr [rax + 0x18], rdx; jae 0x57144; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004191d2: cmp qword ptr [rax + 0x20], 0; je 0x191f0; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000456ff7: cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x000000000041271c: cmp qword ptr [rax + 0x48], r10; je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x000000000043ae00: cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x0000000000417da0: cmp qword ptr [rbx - 8], rax; jne 0x17d80; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x000000000046dd30: cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x0000000000415ce0: cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x0000000000478ab0: cmp qword ptr [rdi + rdx + 0x18], 0; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000044a2eb: cmp qword ptr [rdi], rsi; je 0x4a2f8; ret; 
0x000000000043ae74: cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x0000000000412c70: cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x000000000044a2ea: cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000046d213: cmp r10, r11; jne 0x6d1a0; ret; 
0x00000000004557a4: cmp r10d, 0x29; ja 0x557b8; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x000000000041f9e9: cmp r12b, al; vzeroupper; ret; 
0x000000000046749b: cmp r13, 0x25; ja 0x67240; lea rsi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x00000000004220ad: cmp r14b, al; ret; 
0x00000000004210fd: cmp r15b, dil; ret; 
0x000000000043b613: cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000415f43: cmp r8, rax; jae 0x15f58; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004225de: cmp r8, rdi; ja 0x225c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x00000000004690a2: cmp r8b, 9; jbe 0x69090; cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x0000000000418a69: cmp r9, rax; je 0x18a75; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043ba7c: cmp r9, rcx; jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x0000000000437d5c: cmp rax, -0x1000; ja 0x37d80; hlt; mov eax, esi; syscall; 
0x00000000004386fd: cmp rax, -0x1000; ja 0x38760; ret; 
0x00000000004387a0: cmp rax, -0x1000; ja 0x38800; ret; 
0x0000000000438837: cmp rax, -0x1000; ja 0x38840; ret; 
0x0000000000438fd7: cmp rax, -0x1000; ja 0x38fe0; ret; 
0x00000000004391d4: cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000439207: cmp rax, -0x1000; ja 0x39210; ret; 
0x0000000000439240: cmp rax, -0x1000; ja 0x39250; ret; 
0x00000000004393d3: cmp rax, -0x1000; ja 0x39400; ret; 
0x000000000044a730: cmp rax, -0x1000; ja 0x4a790; ret; 
0x0000000000458f4a: cmp rax, -0x1000; ja 0x58f58; ret; 
0x000000000045e5a3: cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000045eada: cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000470c37: cmp rax, -0x1000; ja 0x70c40; ret; 
0x000000000043c2bd: cmp rax, -0x1000; pop rbx; cmovbe rdx, rax; mov rax, rdx; ret; 
0x00000000004384b7: cmp rax, -0xfff; jae 0x384c0; ret; 
0x0000000000439427: cmp rax, -0xfff; jae 0x39430; ret; 
0x0000000000439457: cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000439487: cmp rax, -0xfff; jae 0x39490; ret; 
0x000000000043a697: cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000045e787: cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7b7: cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7e7: cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e817: cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e847: cmp rax, -0xfff; jae 0x5e850; ret; 
0x000000000041c8d2: cmp rax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x000000000043b5d1: cmp rax, -1; je 0x3b61a; ret; 
0x000000000046964b: cmp rax, -3; jbe 0x69658; ret; 
0x000000000043d302: cmp rax, 0x16; ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000043d349: cmp rax, 0x17; ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x00000000004188c3: cmp rax, 0x408; jbe 0x188d0; ret; 
0x0000000000472c49: cmp rax, 0x7fff; je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000418933: cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000418903: cmp rax, 0xffff; jbe 0x18910; ret; 
0x0000000000418948: cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x000000000044ade8: cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x0000000000414214: cmp rax, qword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x000000000046bd80: cmp rax, qword ptr [rip + 0x40649]; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000412e1c: cmp rax, r13; jae 0x12f10; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000413184: cmp rax, r13; jae 0x131b0; mov rax, qword ptr [rsp + 8]; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000409875: cmp rax, r15; jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000004157b7: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a67: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000045b8ae: cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000043927e: cmp rax, rdi; jb 0x39290; xor eax, eax; ret; 
0x0000000000417af8: cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041724a: cmp rax, rdx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x000000000040d49c: cmp rax, rsi; jae 0xea70; mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000041ca82: cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x0000000000408ae5: cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041c94d: cmp rbx, rbp; jne 0x1c938; pop rbx; pop rbp; pop r12; ret; 
0x000000000046fed5: cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x00000000004105fd: cmp rcx, rax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000413ea9: cmp rcx, rax; jae 0x13ec2; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000413f94: cmp rcx, rax; jae 0x14080; mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000415871: cmp rcx, rax; jae 0x158d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000415967: cmp rcx, rax; jae 0x15980; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415d25: cmp rcx, rax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd7: cmp rcx, rax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000415e67: cmp rcx, rax; jae 0x15ed8; movzx esi, byte ptr [r12]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x0000000000416557: cmp rcx, rax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004165ee: cmp rcx, rax; jae 0x16608; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc7: cmp rcx, rax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000456ed6: cmp rcx, rax; jae 0x56fc8; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x00000000004575ec: cmp rcx, rax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000457686: cmp rcx, rax; jae 0x576a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000469c43: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000041cb88: cmp rcx, rbx; jne 0x1cd26; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000464517: cmp rcx, rdi; je 0x64520; ret; 
0x0000000000464705: cmp rcx, rdx; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x00000000004760b6: cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000043500d: cmp rcx, rsi; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x00000000004373a0: cmp rcx, rsi; jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x000000000046dcb8: cmp rcx, rsi; jb 0x6dca1; ret; 
0x00000000004556a9: cmp rdi, qword ptr [rip + 0x37910]; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004215e6: cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004662d8: cmp rdi, rsi; jne 0x662e0; pop rbx; ret; 
0x0000000000421ecc: cmp rdx, 0x20; ja 0x21f40; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000422491: cmp rdx, 0x20; ja 0x22500; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000423e5e: cmp rdx, 0x20; ja 0x23e80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423dfe: cmp rdx, 0x20; ja 0x23e89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042168f: cmp rdx, 0x40; ja 0x21740; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421623: cmp rdx, 0x40; ja 0x2174d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000423456: cmp rdx, 0x40; ja 0x23480; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000423406: cmp rdx, 0x40; ja 0x23489; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000423c8f: cmp rdx, 0x40; ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423c33: cmp rdx, 0x40; ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000420e0f: cmp rdx, 0x80; ja 0x20ef0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000423a4f: cmp rdx, 0x80; ja 0x23ac0; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004239f3: cmp rdx, 0x80; ja 0x23ac9; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000044ad80: cmp rdx, 0xf; ja 0x4ad68; mov rcx, rax; mov rax, rcx; ret; 
0x00000000004220cf: cmp rdx, qword ptr [rip + 0x84c22]; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ba81: cmp rdx, r9; jae 0x3ba2f; ret; 
0x000000000045e595: cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000431679: cmp rdx, rcx; ja 0x31657; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000432349: cmp rdx, rcx; ja 0x32327; nop; xor eax, eax; ret; 
0x000000000040d93d: cmp rdx, rcx; jae 0xe830; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004760b1: cmp rdx, rcx; jb 0x760bb; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000431f2d: cmp rdx, rcx; jbe 0x31f11; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000040d88f: cmp rdx, rdi; jae 0xf2f0; mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000417b4d: cmp rdx, rdi; setae al; ret; 
0x000000000044ad58: cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x000000000045431e: cmp rdx, rsi; jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453755: cmp rdx, rsi; jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040dbf4: cmp rdx, rsi; jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043534b: cmp rsi, 0x20; jbe 0x35360; test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x000000000043778b: cmp rsi, 8; jbe 0x377a0; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x000000000045e8a2: cmp rsi, r8; jne 0x5e880; mov eax, edi; ret; 
0x00000000004355d7: cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435024: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004355c7: cmp rsi, rax; ja 0x353c7; mov eax, esi; ret; 
0x0000000000437a4a: cmp rsi, rax; ja 0x37807; mov eax, esi; ret; 
0x0000000000416629: cmp rsi, rcx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x00000000004576c9: cmp rsi, rcx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x000000000043598c: cmp rsi, rdx; je 0x35854; cmp byte ptr [rdx], 0; jne 0x35988; xor eax, eax; ret; 
0x000000000042b5f6: cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000042b5aa: cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x000000000042b433: cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x2b42c; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b5b3: cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x2b5fb; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b597: cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b463: cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x2b42c; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042af7b: cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b0f0: cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000042b3fc: cmp sil, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x000000000042b15f: cmp sil, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x000000000043a67c: cmpsb byte ptr [rsi], byte ptr [rdi]; call 0x3ad90; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x000000000045f426: cmpsb byte ptr [rsi], byte ptr [rdi]; iretd; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000457b5f: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000473f37: cmpsb byte ptr [rsi], byte ptr [rdi]; nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045bce8: cmpsd dword ptr [rsi], dword ptr [rdi]; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000414725: cmpsd dword ptr [rsi], dword ptr [rdi]; out 0xff, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000404e1d: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xffff; 
0x0000000000417be4: cmpxchg dword ptr [rcx], esi; jne 0x17bde; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x000000000046b738: cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x0000000000401c8f: cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x00000000004032ec: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000402833: cwde; add byte ptr [rcx - 0x67fdfe01], al; add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x0000000000402839: cwde; add byte ptr [rdi], cl; test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x0000000000475100: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000477903: cwde; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045c2ef: cwde; fidiv dword ptr [rbp + 0xf]; kmovq rax, k4; bsr rax, rax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000043ec5b: cwde; mov rdi, r12; call rax; 
0x000000000040db4c: cwde; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040e3b3: cwde; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2a8: cwde; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e300: cwde; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e456: cwde; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e358: cwde; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000456fe4: cwde; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000418e44: cwde; ret; 
0x00000000004219c8: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421171: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000420cf2: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004210fa: dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x00000000004210ec: dec byte ptr [rax + 0x7f]; ja 0x210f3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000420f71: dec byte ptr [rax + 0x7f]; je 0x20f8d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004210f3: dec byte ptr [rax + 0x7f]; jg 0x210fb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000420f79: dec byte ptr [rax + 0x7f]; jl 0x20f95; cld; ret; 
0x0000000000421049: dec byte ptr [rax + 0x7f]; jp 0x2104f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000439c92: dec byte ptr [rax + 9]; ret 0x894c; 
0x000000000045365a: dec byte ptr [rax - 0x77]; ret 0x8148; 
0x000000000043fb63: dec byte ptr [rax - 0x77]; ret 0x8d48; 
0x000000000043778d: dec byte ptr [rax]; jbe 0x377a0; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x0000000000423b82: dec byte ptr [rax]; jg 0x23b86; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423b88: dec byte ptr [rax]; jg 0x23bd0; adc bh, bh; ret; 
0x0000000000423d92: dec byte ptr [rax]; jg 0x23d96; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423d98: dec byte ptr [rax]; jg 0x23de0; adc bh, bh; ret; 
0x0000000000456ee1: dec byte ptr [rcx + rcx*4 - 0x11]; call qword ptr [rbx + 0x18]; 
0x000000000046d93c: dec byte ptr [rcx - 0x75]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x0000000000439036: dec byte ptr [rcx]; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004390c5: dec byte ptr [rcx]; je 0x390f0; mov eax, 0x48; syscall; 
0x000000000045ff9e: dec dl; sti; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000044c37f: dec dword ptr [r8 - 0x77]; ret 0xf748; 
0x0000000000419697: dec dword ptr [r8 - 0x7b]; ret; 
0x0000000000469649: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x69658; ret; 
0x000000000041ac5b: dec dword ptr [r9 - 0x7b]; ret; 
0x0000000000412bd5: dec dword ptr [rax + 0x21]; ret; 
0x0000000000465109: dec dword ptr [rax + 0x29]; ret 0x3949; 
0x000000000040731e: dec dword ptr [rax + 0x29]; ret; 
0x0000000000402cbd: dec dword ptr [rax + 0x39]; ret 0x1d73; 
0x000000000041774e: dec dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000040c2b7: dec dword ptr [rax + 0x39]; ret; 
0x00000000004220ce: dec dword ptr [rax + 0x3b]; adc eax, 0x84c22; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004556a8: dec dword ptr [rax + 0x3b]; cmp eax, 0x37910; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000447459: dec dword ptr [rax + 0x63]; ret; 
0x0000000000452b87: dec dword ptr [rax + 0x63]; test dword ptr [rdi + rsi*8 - 1], ecx; dec dword ptr [rax + 1]; ret; 
0x000000000044c7d9: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x0000000000452b8e: dec dword ptr [rax + 1]; ret; 
0x000000000044a3e4: dec dword ptr [rax + 5]; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004789fb: dec dword ptr [rax - 0x39]; add eax, 0x337d1; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004785f6: dec dword ptr [rax - 0x39]; add eax, 0x33a26; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000469667: dec dword ptr [rax - 0x39]; add eax, 0x42c7d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000478ac4: dec dword ptr [rax - 0x39]; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; ret; 
0x000000000047871a: dec dword ptr [rax - 0x39]; ret 0x1900; 
0x00000000004787bb: dec dword ptr [rax - 0x39]; ret 0x2760; 
0x0000000000478740: dec dword ptr [rax - 0x39]; ret 0x27c0; 
0x0000000000478769: dec dword ptr [rax - 0x39]; ret 0x2980; 
0x0000000000478792: dec dword ptr [rax - 0x39]; ret 0x2a00; 
0x00000000004787e4: dec dword ptr [rax - 0x39]; ret 0x2f40; 
0x000000000047880d: dec dword ptr [rax - 0x39]; ret 0x2fa0; 
0x0000000000478836: dec dword ptr [rax - 0x39]; ret 0x3020; 
0x000000000047885f: dec dword ptr [rax - 0x39]; ret 0x30c0; 
0x0000000000478888: dec dword ptr [rax - 0x39]; ret 0x3120; 
0x00000000004788b1: dec dword ptr [rax - 0x39]; ret 0x3180; 
0x00000000004786f1: dec dword ptr [rax - 0x39]; ret 0x3240; 
0x000000000044bd1e: dec dword ptr [rax - 0x39]; ret 0xffe0; 
0x0000000000469133: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000402fd4: dec dword ptr [rax - 0x39]; ret; 
0x000000000045e504: dec dword ptr [rax - 0x39]; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041647a: dec dword ptr [rax - 0x39]; sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000474e06: dec dword ptr [rax - 0x47]; mov eax, 0xf; syscall; 
0x0000000000438475: dec dword ptr [rax - 0x73]; adc eax, 0x44727; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045c856: dec dword ptr [rax - 0x73]; adc eax, 0xfffc6b62; cmove rax, rdx; ret; 
0x00000000004252d1: dec dword ptr [rax - 0x73]; add al, 0x17; ret; 
0x000000000045c871: dec dword ptr [rax - 0x73]; add eax, 0xfffc7387; cmove rax, rdx; ret; 
0x000000000046066f: dec dword ptr [rax - 0x73]; call 0x416247d3; pop rbp; pop rbp; ret; 
0x0000000000418133: dec dword ptr [rax - 0x73]; cmp eax, 0x62d95; call 0x12c40; mov eax, 0x23; ret; 
0x000000000042d331: dec dword ptr [rax - 0x73]; jl 0x2d34d; test byte ptr [rax - 0x73], cl; je 0x2d351; test cl, ch; ret; 
0x00000000004101a3: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000403841: dec dword ptr [rax - 0x73]; or eax, 0x75917; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000004674a4: dec dword ptr [rax - 0x73]; xor eax, 0x27fcc; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x00000000004069c5: dec dword ptr [rax - 0x73]; xor eax, 0x731f7; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040681b: dec dword ptr [rax - 0x73]; xor eax, 0x73215; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004069fa: dec dword ptr [rax - 0x73]; xor eax, 0x73246; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406850: dec dword ptr [rax - 0x73]; xor eax, 0x73264; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406875: dec dword ptr [rax - 0x73]; xor eax, 0x732c3; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040665e: dec dword ptr [rax - 0x73]; xor eax, 0x7334e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040610d: dec dword ptr [rax - 0x73]; xor eax, 0x7368f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000405fff: dec dword ptr [rax - 0x73]; xor eax, 0x73695; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406149: dec dword ptr [rax - 0x73]; xor eax, 0x736d7; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406185: dec dword ptr [rax - 0x73]; xor eax, 0x7371f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004061ba: dec dword ptr [rax - 0x73]; xor eax, 0x7376e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000408ff2: dec dword ptr [rax - 0x75]; adc al, 0x24; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000467633: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e26: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; test esi, esi; jne 0x66e35; call rax; 
0x0000000000408ef6: dec dword ptr [rax - 0x75]; and al, 8; add r14, r13; call rax; 
0x000000000046b109: dec dword ptr [rax - 0x75]; clc; sub rax, qword ptr fs:[0x28]; jne 0x6b15e; leave; ret; 
0x0000000000410fc4: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000043ec57: dec dword ptr [rax - 0x75]; cwde; mov rdi, r12; call rax; 
0x0000000000451551: dec dword ptr [rax - 0x75]; mov ch, 0x30; idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040bae7: dec dword ptr [rax - 0x75]; mov ch, 0x48; idiv edi; dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000452074: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b6e: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000449879: dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x00000000004693a4: dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000041598c: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000046982c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000044a05e: dec dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000448331: dec dword ptr [rax - 0x77]; add byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000464537: dec dword ptr [rax - 0x77]; add eax, 0x47d51; add rsp, 8; ret; 
0x000000000043c733: dec dword ptr [rax - 0x77]; add eax, 0x6f5ed; add rsp, 0x1a8; ret; 
0x0000000000472827: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000047788c: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000040baee: dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000407a42: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; add al, 0x56; add dword ptr [rax], eax; nop dword ptr [rax]; ret; 
0x0000000000449d4d: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; stc; xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x000000000044f5a1: dec dword ptr [rax - 0x77]; fmul dword ptr [rax - 0x7d]; call 0xffffffff898904ad; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045198a: dec dword ptr [rax - 0x77]; mov rdi, qword ptr [rbp - 0x8c0]; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000040c34a: dec dword ptr [rax - 0x77]; mov rdi, r14; mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x000000000041a62d: dec dword ptr [rax - 0x77]; ret 0x3948; 
0x000000000044c7cf: dec dword ptr [rax - 0x77]; ret 0x6348; 
0x000000000043c262: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000464f8d: dec dword ptr [rax - 0x77]; ret 0x850f; 
0x000000000043b6ae: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000045efb1: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000046d344: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000043e564: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000475a31: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000041e3de: dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x00000000004653c2: dec dword ptr [rax - 0x77]; ret 0xcce9; 
0x0000000000475ef8: dec dword ptr [rax - 0x77]; ret 0xefe8; 
0x000000000044c380: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x0000000000410a7c: dec dword ptr [rax - 0x77]; ret; 
0x0000000000470737: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000046e824: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000419698: dec dword ptr [rax - 0x7b]; ret; 
0x0000000000467055: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x000000000043abc6: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041b643: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add dword ptr [rdi], 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041b9bb: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000046964a: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x69658; ret; 
0x000000000040779a: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000047567f: dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000405f41: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000460d76: dec dword ptr [rbp + rcx*4 + 0x25]; call rsp; 
0x000000000043a9ad: dec dword ptr [rbp + rcx*4 + 0x35]; xor eax, 0x89000425; ret; 
0x0000000000473ad5: dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x0000000000463cfd: dec dword ptr [rbp - 0x76b7febe]; ret 0x8b49; 
0x0000000000460a11: dec dword ptr [rbp - 0x77]; ret; 
0x0000000000443106: dec dword ptr [rbp - 0x77]; ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x000000000044f46f: dec dword ptr [rbx + 0x1402444]; ret; 
0x000000000040317f: dec dword ptr [rbx + 0xa8c4215]; add bh, dh; ret 0; 
0x000000000044f6db: dec dword ptr [rbx + 0xf402444]; mov esi, 0x1382474; ret; 
0x0000000000469588: dec dword ptr [rbx + rcx*4 + 0x4d]; call 0x41d7a; jmp qword ptr [rsi + 0xf]; 
0x000000000046e7bd: dec dword ptr [rbx + rcx*4 + 0x7d]; and byte ptr [rax - 0x77], cl; ret; 
0x0000000000457628: dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000469759: dec dword ptr [rbx - 0x14f3dbbc]; ret; 
0x000000000045745e: dec dword ptr [rbx - 0x3b7cb7fe]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040b239: dec dword ptr [rbx - 0x76b3bf8b]; ret; 
0x000000000044f1aa: dec dword ptr [rbx - 0x7c97db94]; ret; 
0x000000000043e3c4: dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x00000000004526af: dec dword ptr [rbx - 0x8b37b]; inc dword ptr [rbp + 0x2a880fc0]; idiv bh; inc dword ptr [rcx]; ret; 
0x000000000041e367: dec dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x0000000000414831: dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x0000000000457b5b: dec dword ptr [rcx + 0x48a6ebc2]; mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000477cd0: dec dword ptr [rcx + 0x74ff3cc1]; ja 0x77c61; ret 0xe283; 
0x000000000046b66a: dec dword ptr [rcx + 9]; rol dword ptr [rcx + rbp - 0x40], 1; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000413192: dec dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rax + 0x18]; 
0x0000000000451558: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040bef7: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c62f: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c20c: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc2c: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x0000000000435015: dec dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x00000000004352e5: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x352f2; vzeroupper; ret; 
0x0000000000437728: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x37735; vzeroupper; ret; 
0x000000000045207b: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b75: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000451994: dec dword ptr [rcx + rcx*4 - 2]; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000409874: dec dword ptr [rcx + rdi - 8]; jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000047634f: dec dword ptr [rcx - 0x39]; ret 0xffff; 
0x00000000004734fc: dec dword ptr [rcx - 0x39]; ret; 
0x0000000000436a73: dec dword ptr [rcx - 0x75]; add dword ptr [rax - 0x7d], ecx; ret 0x480a; 
0x000000000040f17a: dec dword ptr [rcx - 0x75]; push rbp; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfffa; 
0x000000000044f695: dec dword ptr [rcx - 0x75]; xchg dword ptr [rax - 0x7d000000], esp; ret; 
0x000000000040c52f: dec dword ptr [rcx - 0x77]; ret 0x2949; 
0x000000000040bd9f: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000040bdd4: dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x00000000004637a0: dec dword ptr [rcx - 0x77]; ret; 
0x000000000044cfa4: dec dword ptr [rcx - 0x77]; ror byte ptr [rcx - 0x73], 1; retfq; or byte ptr [rax - 0x77], cl; ret 0x1be8; 
0x000000000041ac5c: dec dword ptr [rcx - 0x7b]; ret; 
0x00000000004027f8: dec dword ptr [rcx - 0x7d]; ret 0x4904; 
0x00000000004100d9: dec dword ptr [rcx - 0x7d]; ret 0xeb02; 
0x0000000000447505: dec dword ptr [rcx - 0x7d]; ret; 
0x000000000044c6bc: dec dword ptr [rcx - 0xcf7b]; inc dword ptr [rax - 0x7c]; test byte ptr [rdi], -0x7c; mov ebx, 0xf6000002; ret 0xf40; 
0x000000000045b177: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x0000000000416284: dec dword ptr [rdi]; adc dword ptr [rdi + 0xa0], eax; ret; 
0x000000000046b450: dec dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000041e70d: dec dword ptr [rdi]; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000004393c6: dec dword ptr [rdi]; add byte ptr [rax], al; jne 0x393e0; mov eax, 9; syscall; 
0x0000000000401840: dec dword ptr [rdi]; add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000452dd3: dec dword ptr [rdi]; mov bh, 0xb5; idiv rdi; jmp qword ptr [rsi - 0x77]; 
0x000000000040d091: dec dword ptr [rdi]; mov bh, 0xb5; pop rsp; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000044d724: dec dword ptr [rdi]; mov dh, 0x50; or al, 0xf6; ret 0xf40; 
0x0000000000409dd4: dec dword ptr [rdi]; mov dh, 0x53; add al, byte ptr [rcx - 0x42]; sldt word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000401996: dec dword ptr [rdi]; mov dh, 0xc2; pop rbx; ret; 
0x0000000000431267: dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042408c: dec dword ptr [rdi]; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000042b5ef: dec dword ptr [rdi]; mov esp, 0xd00148c0; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000042c13f: dec dword ptr [rdi]; mov esp, 0xd00148c0; ret; 
0x000000000045a1ec: dec dword ptr [rdi]; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000044fa4e: dec dword ptr [rdi]; test byte ptr [rax - 0x7c000017], ch; ret; 
0x0000000000476e38: dec dword ptr [rdi]; test byte ptr [rbx - 0x76fffffc], dh; ret 0xe283; 
0x0000000000405e26: dec dword ptr [rdi]; xchg ebp, eax; ret 0x3145; 
0x0000000000405e62: dec dword ptr [rdi]; xchg ebp, eax; ret 0xc2eb; 
0x00000000004172d9: dec dword ptr [rdi]; xchg esp, eax; ret 0x2b48; 
0x0000000000411fbe: dec dword ptr [rdi]; xchg esp, eax; rol byte ptr [rax + rax*8 - 0x74b7628b], 0xb3; movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x000000000041e80d: dec dword ptr [rsi]; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000407799: dec qword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000409873: dec qword ptr [rcx + r15 - 8]; jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000447ed5: div byte ptr [rax + rcx - 0x7d]; inc byte ptr [rbx]; je 0x47ee0; pop rbx; ret; 
0x000000000046b4f5: div byte ptr [rbp + 0x28]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004577d8: div byte ptr [rbp + 0x45]; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000457db4: div byte ptr [rbp + 0x49]; xor cl, 0x86; mov esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000466e30: div byte ptr [rbp + 2]; call rax; 
0x00000000004355e2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000439f37: div byte ptr [rbp + 6]; ret; 
0x000000000044a455: div byte ptr [rbp + 8]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000041ea5f: div byte ptr [rbp - 0x25]; and ch, 4; lea rdx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x000000000045977f: div byte ptr [rbp - 0x25]; and ch, 4; lea rdx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c7bf: div byte ptr [rbp - 0x25]; and ch, 4; lea rdx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000045f719: div byte ptr [rbp - 0x60]; pop rbx; pop rbp; pop r12; ret; 
0x000000000046b50a: div byte ptr [rbp - 0xf]; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x000000000043f57c: div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000047892c: div byte ptr [rdi + rax - 0x77]; fucompi st(0); ficom dword ptr [rbx]; std; dec dword ptr [rax - 0x7d]; ret; 
0x000000000046b6be: div byte ptr [rdi + rcx + 0x48]; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000460487: div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x00000000004662da: div dword ptr [rbp + 3]; pop rbx; ret; 
0x000000000045a506: div dword ptr [rcx]; sar byte ptr [rcx], 0xf2; cmovg rax, rdi; ret; 
0x000000000044df7d: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000004019f7: div ecx; mov eax, eax; ret; 
0x000000000046ba2b: div esi; mov rax, qword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000046ba2a: div rsi; mov rax, qword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000473135: divps xmm0, xmmword ptr [rip + 0x218c0]; ret; 
0x0000000000473134: divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x0000000000477610: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77620; ret; 
0x0000000000477940: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77950; ret; 
0x0000000000475550: endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004754c0: endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000475520: endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000475560: endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000004755c0: endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004755b0: endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000475570: endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004756f0: endbr64; ret; 
0x0000000000414501: fadd dword ptr [rax]; add byte ptr [rax], al; lea rcx, [rip + 0x92194]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000004106ab: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000040a5e9: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000043b940: fadd dword ptr [rdx]; add byte ptr [rax], al; syscall; 
0x000000000045414d: fadd qword ptr [rax + rax]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000041e9af: fadd qword ptr [rax - 0x72b7fd1a]; add eax, 0x5026; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000042b8e0: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x0000000000466c60: fadd qword ptr [rip - 0x72b80000]; cmp eax, 0x28775; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000045c129: fcmovb st(0), st(4); loope 0x5c128; xchg ebx, eax; ret; 
0x000000000045c279: fcmovb st(0), st(4); loope 0x5c278; xchg ebx, eax; ret; 
0x000000000045c31b: fcmovb st(0), st(4); loope 0x5c31a; xchg ebx, eax; ret; 
0x0000000000436712: fcmovbe st(0), st(7); cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000042af6e: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000040cfc9: fcmovnb st(0), st(7); test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000041077b: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000419940: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000414616: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000419e82: fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000473125: fcomp dword ptr [rbx + 0x7420e783]; adc bl, dh; movups xmm0, xmmword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x00000000004018ab: fcomp dword ptr [rbx - 0x3f]; call 0x1c09bc9; ret; 
0x0000000000410634: fcomp dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043ec55: fcos; dec dword ptr [rax - 0x75]; cwde; mov rdi, r12; call rax; 
0x000000000045ed9e: fdiv st(3), st(0); jmp qword ptr [rsi + 0x48]; 
0x000000000045ec47: fdivp st(3); dec dword ptr [rax - 0x77]; ret; 
0x000000000046e593: fdivp st(4); jmp qword ptr [rsi + 0x2e]; 
0x000000000046e57b: fdivp st(4); jmp qword ptr [rsi - 0x70]; 
0x000000000046cdf0: fdivr st(5), st(0); cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000437117: ffreep st(1); call 0x77fc3620; ret; 
0x000000000043b8e4: fiadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000042ba42: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x0000000000448c31: fiadd word ptr [rbp + 0x31]; test byte ptr [rcx + rcx*4 - 0x11], -0x18; ret; 
0x0000000000478932: ficom dword ptr [rbx]; std; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000442d0e: ficom word ptr [rcx]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000045c2f0: fidiv dword ptr [rbp + 0xf]; kmovq rax, k4; bsr rax, rax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000046d215: fidiv dword ptr [rbp - 0x78]; ret; 
0x000000000045c122: fidiv dword ptr [rdi + rcx*8 - 0x3c]; loope 0x5c10c; fcmovb st(0), st(4); loope 0x5c128; xchg ebx, eax; ret; 
0x000000000043c2b3: fidivr word ptr [rax + 9]; syscall; 
0x000000000041ea61: fild dword ptr [rax - 0x72b7fb1b]; adc eax, 0x54d4; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000459781: fild dword ptr [rax - 0x72b7fb1b]; adc eax, 0x7d4; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c7c1: fild dword ptr [rax - 0x72b7fb1b]; adc eax, 0xc14; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000040e2a3: fild dword ptr [rbx - 0x67b7df18]; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2fb: fild dword ptr [rbx - 0x67b7df18]; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e353: fild dword ptr [rbx - 0x67b7df18]; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043fbf1: fild dword ptr [rcx - 0x7f]; js 0x3fbf2; jae 0x3fc68; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000418336: fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x000000000043c497: fild word ptr [rax]; add byte ptr [rbp + 0x487275c0], al; mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000458079: fild word ptr [rcx + rcx*4 - 8]; not esi; and esi, 0x80; syscall; 
0x0000000000435795: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000437c35: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000419fa4: fimul dword ptr [rax + 1]; ret; 
0x0000000000434066: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040aa75: fimul dword ptr [rax - 0x39]; ret 0xffa0; 
0x0000000000438601: fimul dword ptr [rax - 0x77]; out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043867d: fimul dword ptr [rax - 0x77]; out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041a134: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x000000000040baf1: fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000430b95: fimul dword ptr [rcx - 0x37feb737]; sub rax, rdi; ret; 
0x0000000000401926: fimul dword ptr [rdi]; mov dh, 0xc1; pop rbx; ret; 
0x0000000000406370: fimul word ptr [rax - 0x77]; ret 0x8949; 
0x000000000046a418: fimul word ptr [rax - 0x77]; ret; 
0x000000000044330e: fimul word ptr [rbx]; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000417f61: fimul word ptr [rcx + 0xeab8c7]; add byte ptr [rax], al; syscall; 
0x0000000000408fa7: fimul word ptr [rcx + rcx*4 - 1]; call rax; 
0x0000000000408ef3: fimul word ptr [rcx + rcx*4 - 1]; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x000000000040c212: fimul word ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x000000000040cc32: fimul word ptr [rcx + rcx*4 - 9]; call qword ptr [rcx + 0x38]; 
0x000000000041c16c: fimul word ptr [rcx - 0x73]; push rsp; sbb eax, 0xf486600; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000046e111: fistp dword ptr [rbp - 7]; jmp qword ptr [rsi + 0x66]; 
0x00000000004647d6: fistp dword ptr [rbx + 0x48]; cmove esi, eax; mov rax, rsi; ret; 
0x000000000043b975: fistp qword ptr [rax + 0x14e]; syscall; 
0x000000000045826b: fistp qword ptr [rax + 0xca]; syscall; 
0x000000000045849c: fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x000000000046000d: fistp qword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000411bf7: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004136cb: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000456e4f: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x000000000041373b: fistp word ptr [rbx + 0x5d]; pop r12; pop r13; jmp rax; 
0x0000000000407a45: fistp word ptr [rbx - 0x17]; add al, 0x56; add dword ptr [rax], eax; nop dword ptr [rax]; ret; 
0x0000000000449d50: fistp word ptr [rbx - 0x17]; stc; xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x000000000041ee8a: fisttp dword ptr [rax - 0x73]; add eax, 0x1236e; and ch, 4; jne 0x1ee44; ret; 
0x000000000041eb6a: fisttp dword ptr [rax - 0x73]; add eax, 0x6f3e; and ch, 4; jne 0x1eb24; ret; 
0x0000000000439991: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046a611: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000046a62b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000459cea: fisttp qword ptr [rax + 0x29]; ret; 
0x00000000004077bd: fisttp qword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000438af1: fisttp word ptr [rax + 0x29]; ret 0x8948; 
0x000000000045a137: fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000439526: fisttp word ptr [rax - 0x77]; call 0x5c44f289; jmp rax; 
0x00000000004395b6: fisttp word ptr [rax - 0x77]; call 0x5c44f319; jmp rax; 
0x00000000004394f0: fisttp word ptr [rax - 0x77]; call 0x65353; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000439580: fisttp word ptr [rax - 0x77]; call 0x653e3; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x000000000045ef63: fisttp word ptr [rax - 0x77]; ret 0x24e8; 
0x000000000045ef03: fisttp word ptr [rax - 0x77]; ret 0x84e8; 
0x000000000040795a: fisttp word ptr [rax - 0x7d]; ret; 
0x000000000046a6af: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000412e27: fisttp word ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000466de1: fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000042b87f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000046170e: fisub word ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000042752e: fisub word ptr [rdx - 0x4e]; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042720f: fisub word ptr [rdx - 0x5d]; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042cf6f: fisub word ptr [rdx - 0x5d]; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000042b8c1: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000042c701: fisubr word ptr [rcx]; ret 0xfec5; 
0x000000000040e45e: fisubr word ptr [rsi]; or dword ptr [rax], eax; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000041ee03: fld dword ptr [rax - 0x72b7fb1b]; adc eax, 0x11dd2; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eef3: fld dword ptr [rax - 0x72b7fb1b]; adc eax, 0x15e62; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000459ea3: fld dword ptr [rax - 0x72b7fb1b]; adc eax, 0x1ca2; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x000000000041ec43: fld dword ptr [rax - 0x72b7fb1b]; adc eax, 0xcef2; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000045e59d: fld dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e59d: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000046088e: fld dword ptr [rbx + 0x7505087a]; rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x00000000004540b7: fld qword ptr [rax + rax]; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454028: fld qword ptr [rax + rax]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004225e2: fld qword ptr [rbp + 0xf]; adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422fe2: fld qword ptr [rcx + 0xf]; adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000042d1bb: fld xword ptr [rcx]; ret 0xe162; 
0x00000000004685d3: fld xword ptr [rsp + 0x30]; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000453943: fld1; add al, 0; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000045e149: fldenv [rsi + 0xf]; jbe 0x5e19d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000004246e7: fldenv [rsi + 0xf]; je 0x2473b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000045ac39: fldenv [rsi + 0xf]; je 0x5ac8d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000424601: fldenv [rsi + 0xf]; xlatb; ret; 
0x000000000043234d: fldenv [rsi - 0x70]; xor eax, eax; ret; 
0x000000000043167d: fldenv [rsi - 0x70]; xor eax, eax; vzeroupper; ret; 
0x000000000047002d: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000046b2cd: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000046b414: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000041972c: fmul dword ptr [rax + 0x21]; ret; 
0x000000000042afaf: fmul dword ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000477d12: fmul dword ptr [rax + 1]; ret 0x3948; 
0x0000000000439987: fmul dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000412a7e: fmul dword ptr [rax - 0x77]; ret; 
0x000000000041d0a1: fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000044f5a4: fmul dword ptr [rax - 0x7d]; call 0xffffffff898904ad; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000475847: fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004685d9: fmul qword ptr [rax - 0x75]; sbb al, 0x24; add rsp, 0x30; ret; 
0x000000000046321b: fmul qword ptr [rax - 0x77]; ret; 
0x0000000000427c3b: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000043ae77: fmul qword ptr [rip + 0x74000007]; and cl, byte ptr [rax - 0x73]; add eax, 0x70dcb; ret; 
0x000000000041c8ce: fmulp st(1); add dword ptr [rax], eax; cmp rax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x000000000045afb7: fnsave dword ptr [rdx + riz*2 + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x5b004; vzeroupper; ret; 
0x00000000004751fd: fnstcw word ptr [rdi + 1]; call rax; 
0x0000000000473ad3: fprem; dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x00000000004384c8: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000437d30: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000438768: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000401588: fsub dword ptr [rdx + rcx*2]; jmp rax; 
0x000000000045c443: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000045c4ec: fsub dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000470990: fsub qword ptr [rcx]; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000042b7bc: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000042d59f: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000040e360: fsubr qword ptr [rdi]; or dword ptr [rax], eax; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000439084: fsubr st(3); ret 0xf66; 
0x0000000000478930: fucompi st(0); ficom dword ptr [rbx]; std; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000419eb2: fucompi st(0); push -0x14000023; ret 0xf66; 
0x0000000000458527: fucompi st(0); ret; 
0x0000000000450ef5: hlt; adc al, 0; add dh, dh; ret 0xf40; 
0x0000000000437d64: hlt; mov eax, esi; syscall; 
0x000000000046bb8b: hlt; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000401551: hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040e0c8: hlt; ret; 
0x000000000040bd1d: idiv bh; call qword ptr [rax]; 
0x000000000040cfcd: idiv bh; call qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x000000000044cd82: idiv bh; inc dword ptr [rax - 0x14343]; jmp qword ptr [rdi + 0xf]; 
0x000000000040c74e: idiv bh; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x00000000004526bb: idiv bh; inc dword ptr [rcx]; ret; 
0x000000000044cdab: idiv bh; inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004517c3: idiv bh; inc esi; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x0000000000451736: idiv bh; jmp qword ptr [rax]; 
0x000000000040cf03: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000041d751: idiv bh; jmp qword ptr [rsi + 0x66]; 
0x000000000040df57: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041d72b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000047742b: idiv bh; jmp qword ptr [rsi - 9]; 
0x0000000000417f32: idiv byte ptr [rax + 0xea]; syscall; 
0x000000000043af6e: idiv byte ptr [rbp + 0x1c750006]; lea rdx, [r9 + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x00000000004146bf: idiv byte ptr [rcx + 3]; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000473439: idiv byte ptr [rcx - 0x4a]; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000440466: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000040df56: idiv dil; jmp qword ptr [rsi + 0xf]; 
0x0000000000475501: idiv dword ptr [rax + rcx]; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000430695: idiv dword ptr [rsi + 0x63490004]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040c2b5: idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x0000000000452b8c: idiv edi; dec dword ptr [rax + 1]; ret; 
0x0000000000452072: idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b6c: idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040baec: idiv edi; dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x0000000000451556: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040bef5: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c62d: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c20a: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc2a: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x0000000000452079: idiv edi; dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b73: idiv edi; dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000451992: idiv edi; dec dword ptr [rcx + rcx*4 - 2]; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000040c52d: idiv edi; dec dword ptr [rcx - 0x77]; ret 0x2949; 
0x000000000040bd9d: idiv edi; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000040bdd2: idiv edi; dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x00000000004511a2: idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x00000000004526b3: idiv edi; inc dword ptr [rbp + 0x2a880fc0]; idiv bh; inc dword ptr [rcx]; ret; 
0x000000000040cfc4: idiv edi; inc dword ptr [rbp + 0x31]; fcmovnb st(0), st(7); test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000452c77: idiv edi; inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x000000000040bd46: idiv edi; jmp qword ptr [rax]; 
0x0000000000454773: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d82a: idiv edi; jmp qword ptr [rsi + 0x44]; 
0x000000000040b454: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040d096: idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000040baf4: idiv edi; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000044db68: idiv edi; push rsi; ret 0xf10; 
0x0000000000452b97: idiv rdi; dec dword ptr [rax + 0x39]; ret; 
0x0000000000452b8b: idiv rdi; dec dword ptr [rax + 1]; ret; 
0x000000000040baeb: idiv rdi; dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x000000000040c209: idiv rdi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040bdd1: idiv rdi; dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x00000000004526b2: idiv rdi; inc dword ptr [rbp + 0x2a880fc0]; idiv bh; inc dword ptr [rcx]; ret; 
0x000000000040b453: idiv rdi; jmp qword ptr [rsi + 0xf]; 
0x0000000000452dd7: idiv rdi; jmp qword ptr [rsi - 0x77]; 
0x000000000046a702: imul al; mov byte ptr [rcx - 7], ch; push qword ptr [rcx]; ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046ac49: imul al; stc; push qword ptr [rcx]; ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000405fab: imul cl; ret 0xfff9; 
0x000000000041eb83: imul eax, dword ptr [rbx - 0x3d090000], 0x40000000; je 0x1eb5f; ret; 
0x000000000042b901: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x000000000043b881: imul eax, dword ptr [rdi + rax], 0; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000046d534: imul eax, dword ptr [rdx], 0x3d8d4800; xchg esp, eax; imul eax, dword ptr [rdx], 0x69ade800; stc; jmp qword ptr [rsi + 0x66]; 
0x000000000046d53b: imul eax, dword ptr [rdx], 0x69ade800; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000420a3a: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x20a8f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000425729: imul eax, dword ptr [rip + 0xc634900], -0x6d; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000401870: imul eax, ecx; imul eax, edx; ret; 
0x0000000000401869: imul eax, edx; lea edx, [rbx + 1]; pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x0000000000401873: imul eax, edx; ret; 
0x00000000004094ae: imul eax, esi; mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x000000000044b1a0: imul eax; and bl, byte ptr [rdi - 5]; dec dword ptr [rax + 0x29]; ret; 
0x000000000045fcc3: imul eax; call qword ptr [rbx]; 
0x000000000044b236: imul eax; mov word ptr [rsi - 5], ds; dec dword ptr [rax + 0x29]; ret; 
0x000000000046a9f8: imul eax; ret 0xfffc; 
0x000000000040aa90: imul eax; xor ah, byte ptr [rsi - 1]; dec dword ptr [rax + 0x29]; ret; 
0x000000000045375a: imul ebx, dword ptr [rdx], 0; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043724c: imul ecx, dword ptr [rax + 0x29], -0x29; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000418405: imul ecx, dword ptr [rax + rdi*4], 1; add byte ptr [rax], al; add dh, dh; ret 0x7502; 
0x0000000000436b1c: imul ecx, dword ptr [rax - 0x7d], 0x5d5b08c4; ret; 
0x000000000041e4a2: imul ecx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040e073: imul ecx, dword ptr [rbx], 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esp, 0x8900000c; ret 0xc083; 
0x0000000000418815: imul ecx, ecx, 8; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x8c92c; ret; 
0x0000000000464513: imul edi, dword ptr [rbp + 4], 0xf9394800; je 0x64520; ret; 
0x0000000000431b2a: imul edi, ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x00000000004208d3: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420699: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000041a90e: imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004727f2: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000042d5a1: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000474e03: imul edi, edi, 0xb948ffff; mov eax, 0xf; syscall; 
0x000000000041319a: imul edi, esi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000045c85b: imul edi, esp, -1; cmove rax, rdx; ret; 
0x0000000000402fe9: imul esp, dword ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; call qword ptr [rbx + 0x10]; 
0x000000000042561c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x00000000004094ad: imul rax, rsi; mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x0000000000437d01: in al, 0; add byte ptr [rax], al; syscall; 
0x0000000000430bac: in al, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000045c127: in al, 0x4b; fcmovb st(0), st(4); loope 0x5c128; xchg ebx, eax; ret; 
0x000000000045c277: in al, 0x4b; fcmovb st(0), st(4); loope 0x5c278; xchg ebx, eax; ret; 
0x000000000045c319: in al, 0x4b; fcmovb st(0), st(4); loope 0x5c31a; xchg ebx, eax; ret; 
0x0000000000404025: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000004253dc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000457b58: in al, 0xb0; sti; dec dword ptr [rcx + 0x48a6ebc2]; mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x000000000046b513: in al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000418860: in al, 0xc8; or byte ptr [rax], al; ret; 
0x000000000041a66f: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000045544b: in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000041cdb9: in al, dx; adc byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000466a45: in al, dx; adc eax, 0x8b480000; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x00000000004251a0: in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x00000000004387f0: in al, dx; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000042f1d0: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x000000000042af9b: in al, dx; add rax, rdi; vzeroupper; ret; 
0x000000000046e377: in al, dx; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000046dd13: in al, dx; mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x000000000043adc3: in al, dx; nop word ptr cs:[rax + rax]; nop; ret; 
0x0000000000477780: in al, dx; or al, ch; sbb dword ptr [rbx - 6], edx; jmp qword ptr [rsi + 0xf]; 
0x0000000000449093: in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000434454: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000464c29: in al, dx; or byte ptr [rax], dl; add byte ptr [rax], al; mov rbp, rsp; mov rsi, rbp; syscall; 
0x00000000004183f2: in al, dx; or byte ptr [rbx - 0x763e76f9], cl; ret 0xc983; 
0x0000000000408792: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x0000000000408a76: in al, dx; or dword ptr [rax], eax; cmp edx, 1; jg 0x8c00; mov edi, r13d; call rax; 
0x000000000041d061: in al, dx; sbb byte ptr [rax - 0x39], cl; ret; 
0x000000000043e3c2: in al, dx; std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000045c869: in eax, 0x10; lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x0000000000464c30: in eax, 0x48; mov esi, ebp; syscall; 
0x000000000041a078: in eax, 0x5b; mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000046cffc: in eax, 0x74; jne 0x6cff0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046feda: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000402fd2: in eax, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000460009: in eax, 2; add al, ch; fistp qword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000041e88a: in eax, 2; lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e78a: in eax, 2; lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e68a: in eax, 2; lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e701: in eax, 2; lea rdx, [rip + 0x1076]; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e853: in eax, 2; lea rdx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041e753: in eax, 2; lea rdx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e653: in eax, 2; lea rdx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x000000000041e8b1: in eax, 2; lea rdx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b1: in eax, 2; lea rdx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b1: in eax, 2; lea rdx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e1: in eax, 2; lea rdx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e1: in eax, 2; lea rdx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e1: in eax, 2; lea rdx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000041e901: in eax, 2; lea rdx, [rip + 0xe36]; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041e801: in eax, 2; lea rdx, [rip + 0xf76]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041eb73: in eax, 4; jne 0x1eb24; ret; 
0x000000000041ee93: in eax, 4; jne 0x1ee44; ret; 
0x0000000000436773: in eax, 4; jne 0x36734; ret; 
0x000000000045c763: in eax, 4; jne 0x5c724; ret; 
0x000000000045c84e: in eax, 4; lea rax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x000000000041ee05: in eax, 4; lea rdx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eef5: in eax, 4; lea rdx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000459ea5: in eax, 4; lea rdx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597fb: in eax, 4; lea rdx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041ea63: in eax, 4; lea rdx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000459783: in eax, 4; lea rdx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c7c3: in eax, 4; lea rdx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041ec45: in eax, 4; lea rdx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041ecc9: in eax, 8; jne 0x1ecb4; lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x0000000000408e55: in eax, dx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040be58: in eax, dx; add dword ptr [rax - 0x8a743], eax; jmp qword ptr [rax]; 
0x0000000000469c42: in eax, dx; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000045adae: in eax, dx; je 0x5ae08; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000045b1ae: in eax, dx; je 0x5b208; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004782bf: in eax, dx; jne 0x78298; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000435e82: in eax, dx; lea rax, [rcx - 1]; ret; 
0x00000000004751f4: in eax, dx; mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x00000000004157c2: in eax, dx; ret; 
0x0000000000435fd2: in eax, dx; sub rax, 1; ret; 
0x000000000041e88f: in eax, dx; xor eax, 0x8d480000; adc eax, 0x35a6; cmove rax, rdx; ret; 
0x0000000000447ed9: inc byte ptr [rbx]; je 0x47ee0; pop rbx; ret; 
0x000000000043983d: inc byte ptr [rcx + rcx*4 + 0x44]; and al, 8; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000443287: inc byte ptr [rcx - 0x77]; ret; 
0x0000000000440b47: inc byte ptr [rcx - 0x7d]; ret; 
0x0000000000417f29: inc byte ptr [rcx]; add byte ptr [rcx + 0x44c789ea], cl; mov esi, esi; mov eax, 0xea; syscall; 
0x0000000000417f28: inc byte ptr fs:[rcx]; add byte ptr [rcx + 0x44c789ea], cl; mov esi, esi; mov eax, 0xea; syscall; 
0x000000000046613c: inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x000000000046613d: inc dword ptr [rax + 0x10]; pop rbx; pop rbp; ret; 
0x0000000000435994: inc dword ptr [rax - 0x118affc6]; xor eax, eax; ret; 
0x000000000044cd84: inc dword ptr [rax - 0x14343]; jmp qword ptr [rdi + 0xf]; 
0x000000000044d45c: inc dword ptr [rax - 0x14343]; jmp qword ptr [rdi - 0x75]; 
0x000000000044c6c2: inc dword ptr [rax - 0x7c]; test byte ptr [rdi], -0x7c; mov ebx, 0xf6000002; ret 0xf40; 
0x000000000044bd4a: inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x000000000040c574: inc dword ptr [rax - 0x8a743]; jmp qword ptr [rax]; 
0x000000000044e833: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0xf983; 
0x000000000046730d: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004511a4: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x000000000044bf4b: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000418906: inc dword ptr [rax]; add byte ptr [rsi + 5], dh; ret; 
0x000000000041e9fb: inc dword ptr [rbp + 0x158d48c0]; jnp 0x1ea55; add byte ptr [rax], al; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x00000000004526b5: inc dword ptr [rbp + 0x2a880fc0]; idiv bh; inc dword ptr [rcx]; ret; 
0x000000000040cfc6: inc dword ptr [rbp + 0x31]; fcmovnb st(0), st(7); test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000046cf98: inc dword ptr [rbp + 0x480a74c0]; mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000043a3df: inc dword ptr [rbp + 0x480c74c0]; add esp, 8; ret; 
0x0000000000466294: inc dword ptr [rbp + 0x5b0275c0]; ret; 
0x000000000040bc52: inc dword ptr [rbp - 0x1b7bf037]; or al, 0; add byte ptr [rbx - 0x4217d783], cl; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000462730: inc dword ptr [rbp - 0x4a7bf040]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004589e0: inc dword ptr [rbx + 0x7501046f]; ret 0xd231; 
0x000000000040bdcd: inc dword ptr [rbx + rcx*4 - 0x63]; idiv rdi; dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x0000000000458c2b: inc dword ptr [rbx - 0x1f7ce940]; test dword ptr [rdi], 0xfffd0984; call qword ptr [rax + 0x48]; 
0x0000000000411fbb: inc dword ptr [rbx - 0x6bf00008]; rol byte ptr [rax + rax*8 - 0x74b7628b], 0xb3; movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x000000000045021a: inc dword ptr [rbx - 0x77ccf18]; or dword ptr [rsi - 0x20], esi; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000044d46b: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0xf]; 
0x00000000004019f5: inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x0000000000401957: inc dword ptr [rbx]; ret; 
0x0000000000452c79: inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x0000000000456fcc: inc dword ptr [rcx + rcx*4 - 2]; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x000000000043c2aa: inc dword ptr [rcx - 0x46]; and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000047540c: inc dword ptr [rcx - 0x77]; ret 0xc085; 
0x0000000000472218: inc dword ptr [rcx - 0x77]; ret 0xe883; 
0x000000000040ee2c: inc dword ptr [rcx - 0x77]; ret 0xf883; 
0x0000000000454c30: inc dword ptr [rcx - 0x77]; ret; 
0x000000000042131a: inc dword ptr [rcx - 0xff3e]; jmp qword ptr [rdx - 0x1f]; 
0x000000000040c6f7: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rbx - 0x7a39fe20], al; pop rax; idiv edi; jmp qword ptr [rax]; 
0x000000000040c750: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x000000000040740c: inc dword ptr [rcx]; ret 0xd089; 
0x000000000040c90a: inc dword ptr [rcx]; ret; 
0x0000000000460a09: inc dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; dec dword ptr [rbp - 0x77]; ret; 
0x000000000045cec7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb7: inc dword ptr [rdx]; lea eax, [rdi + rax + 8]; ret; 
0x0000000000437925: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a10: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b5: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437966: inc dword ptr [rdx]; lea rax, [rdi + rax + 8]; ret; 
0x00000000004372ab: inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f3b: inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000045b081: inc eax; bzhi edx, eax, edx; jne 0x5ae50; xor eax, eax; vzeroupper; ret; 
0x000000000045afbf: inc eax; jne 0x5b004; vzeroupper; ret; 
0x000000000045aff4: inc eax; jne 0x5b040; vzeroupper; ret; 
0x000000000043946f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e79f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e7ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e82f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x000000000043943f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000439260: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x0000000000439412: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x00000000004391f2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 1; syscall; 
0x00000000004370da: inc ecx; call 0x77fc35e3; ret; 
0x0000000000458948: inc ecx; call qword ptr [rbx]; 
0x000000000045af91: inc ecx; jne 0x5aec0; vzeroupper; ret; 
0x000000000045ae47: inc ecx; jne 0x5aec3; vzeroupper; ret; 
0x000000000045cac6: inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c16: inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000423f75: inc edi; add rax, rdi; vzeroupper; ret; 
0x000000000042af94: inc edi; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000044cdad: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000040c115: inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000041fa22: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000042196b: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042111e: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004517c5: inc esi; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x0000000000423f74: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042af93: inc rdi; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000041fa21: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000042196a: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042111d: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040bacc: insb byte ptr [rdi], dx; add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x0000000000434bd4: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042564e: insb byte ptr [rdi], dx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004685d4: insb byte ptr [rdi], dx; and al, 0x30; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000040183d: insb byte ptr [rdi], dx; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000469130: insb byte ptr [rdi], dx; jg 0x6912c; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000415e6b: insb byte ptr [rdi], dx; movzx esi, byte ptr [r12]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x0000000000407f13: insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000463b57: insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000045006f: insb byte ptr [rdi], dx; ret 0x31c0; 
0x0000000000460ed1: insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000407f88: insb byte ptr [rdi], dx; ret; 
0x0000000000419c43: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000043b88c: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add eax, 0x7044b; ret; 
0x0000000000411043: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; or r9b, bpl; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x000000000043b93b: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x00000000004705a7: insd dword ptr [rdi], dx; add al, byte ptr [r8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004255f6: insd dword ptr [rdi], dx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042cf6a: insd dword ptr [rdi], dx; and byte ptr [rip + 0x62de037e], ah; movabs dword ptr [0x46b262fefc25204d], eax; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000042720b: insd dword ptr [rdi], dx; and byte ptr [rip - 0x5c9d2108], ah; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000045b6be: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004758e7: insd dword ptr [rdi], dx; call 0xfffffffff07ce439; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475bdf: insd dword ptr [rdi], dx; call 0xfffffffff07ce731; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475e83: insd dword ptr [rdi], dx; call 0xfffffffff07ce9d5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425d1b: insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x00000000004385ff: insd dword ptr [rdi], dx; mov edx, ebx; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000462637: insd dword ptr [rdi], dx; ret; 
0x0000000000456aa9: insd dword ptr [rdi], dx; retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x00000000004157f2: insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000456ae4: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041582d: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000434d92: insd dword ptr [rdi], dx; tzcnt eax, eax; vzeroupper; ret; 
0x000000000045c325: int 0x48; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000417cac: int 0x50; lea rdi, [rip + 0x6321b]; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x000000000045a532: int 0x85; sal byte ptr [rcx + rcx*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000000452452: int 0xc6; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x0000000000473ad2: int 0xd9; clc; dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x000000000046170a: int 2; add al, ch; fisub word ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004606e8: int 8; add byte ptr [rax], al; add al, ch; scasb al, byte ptr [rdi]; ret; 
0x000000000043b6ab: int1; adc edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000044df7e: int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000416ead: int1; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000416eeb: int1; add rcx, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000042e968: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000046b50c: int1; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x0000000000420cf1: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000421969: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042111c: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000430b25: int1; jae 0x30b78; movsxd rax, ecx; ret; 
0x000000000043500f: int1; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x00000000004373a2: int1; jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x000000000046dcba: int1; jb 0x6dca1; ret; 
0x00000000004206d1: int1; jl 0x2071c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237ad: int1; jl 0x237f8; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237b4: int1; jl 0x237ff; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237bb: int1; jl 0x23806; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004237ce: int1; jl 0x23819; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237d5: int1; jl 0x23820; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237dc: int1; jl 0x23827; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004237e9: int1; jl 0x23834; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237ef: int1; jl 0x2383a; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004238b6: int1; jl 0x23901; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004238bd: int1; jl 0x23908; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004238c4: int1; jl 0x2390f; adc dword ptr [rsi - 1], edx; ret; 
0x000000000042390e: int1; jl 0x23959; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000423915: int1; jl 0x23960; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042391c: int1; jl 0x23967; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004239ab: int1; jl 0x239f6; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b2: int1; jl 0x239fd; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b9: int1; jl 0x23a04; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000401989: int1; jmp rcx; 
0x000000000045a949: int1; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000424ad3: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004019f8: int1; mov eax, eax; ret; 
0x000000000041ca8a: int1; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045b8aa: int1; or rax, rdi; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x0000000000404dab: int1; ret 0xffff; 
0x000000000045ca6e: int1; ret; 
0x000000000046bb25: int1; sar esi, cl; test esi, esi; je 0x6bba0; mov eax, eax; ret; 
0x000000000043b60e: int1; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000464d5e: int1; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b17b: int1; sub eax, ecx; ret; 
0x000000000045b0d4: int1; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d4: int1; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000046fed0: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x0000000000424ac9: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb79: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000042fb83: int1; vzeroupper; ret; 
0x000000000041e6bd: iretd; add byte ptr es:[rax], al; cmovne rax, rdx; ret; 
0x000000000045e89d: iretd; add rsi, 8; cmp rsi, r8; jne 0x5e880; mov eax, edi; ret; 
0x000000000045c410: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045c450: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045bc00: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000436fc7: iretd; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000045ae46: iretd; inc ecx; jne 0x5aec3; vzeroupper; ret; 
0x000000000045af8d: iretd; mov rdi, rdx; inc ecx; jne 0x5aec0; vzeroupper; ret; 
0x00000000004707bd: iretd; movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000042ea32: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000417c57: iretd; push rax; lea rdi, [rip + 0x63270]; call 0x12c40; nop dword ptr [rax]; ret; 
0x00000000004597ad: iretd; sldt word ptr [rax]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000045f427: iretd; std; jmp qword ptr [rsi + 0xf]; 
0x000000000045c7e7: iretd; test esi, esi; lea rdx, [rip + 0x144f]; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ea87: iretd; test esi, esi; lea rdx, [rip + 0x592f]; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x00000000004597a7: iretd; test esi, esi; lea rdx, [rip + 0xfcf]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x00000000004069c0: ja 0x1114; lea rsi, [rip + 0x731f7]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004069f5: ja 0x1114; lea rsi, [rip + 0x73246]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406659: ja 0x1114; lea rsi, [rip + 0x7334e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406180: ja 0x1114; lea rsi, [rip + 0x7371f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004061b5: ja 0x1114; lea rsi, [rip + 0x7376e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000414954: ja 0x14980; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000041880b: ja 0x187cb; jmp qword ptr [rsi - 0x70]; 
0x00000000004018f3: ja 0x18fc; add byte ptr [rax + 0x63], cl; add al, 0xb7; add rax, rdi; jmp rax; 
0x000000000040197a: ja 0x1983; add cl, al; call 0xfe09c8f; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000041e25c: ja 0x1e2c0; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041f791: ja 0x1f840; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041f9df: ja 0x1fa21; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000420ba3: ja 0x20b9e; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420e16: ja 0x20ef0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420daa: ja 0x20efd; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004210ef: ja 0x210f3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000421693: ja 0x21740; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421627: ja 0x2174d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421935: ja 0x21939; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000421ed0: ja 0x21f40; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004220a4: ja 0x220c6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000422495: ja 0x22500; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004225e1: ja 0x225c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000042345a: ja 0x23480; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000042340a: ja 0x23489; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000423575: ja 0x23578; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000423735: ja 0x23738; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000423a56: ja 0x23ac0; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004239fa: ja 0x23ac9; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000423c93: ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423c37: ja 0x23cf9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000423cc1: ja 0x23d70; mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423e62: ja 0x23e80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423e02: ja 0x23e89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004249b9: ja 0x24a50; je 0x24a40; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x00000000004251b9: ja 0x25250; je 0x25240; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x0000000000425767: ja 0x2576b; lea rax, [rdi + 2]; ret; 
0x0000000000425783: ja 0x25789; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004257d4: ja 0x257de; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004258b9: ja 0x258cb; lea rax, [rdi + 0x10]; ret; 
0x000000000042592f: ja 0x25945; lea rax, [rdi + 0x14]; ret; 
0x00000000004259b1: ja 0x259cb; lea rax, [rdi + 0x18]; ret; 
0x000000000040383c: ja 0x29d2; lea rcx, [rip + 0x75917]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x00000000004318b6: ja 0x2c8c0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000431f16: ja 0x2ce20; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042fa89: ja 0x2fb20; je 0x2fb10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000430259: ja 0x302f0; je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x0000000000430807: ja 0x3080b; ret; 
0x0000000000430823: ja 0x30829; mov dword ptr [rdi], ecx; ret; 
0x0000000000430864: ja 0x3086e; mov qword ptr [rdi], rcx; ret; 
0x00000000004308e9: ja 0x308fb; ret; 
0x000000000043093f: ja 0x30955; ret; 
0x00000000004309c1: ja 0x309db; ret; 
0x0000000000431592: ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x00000000004314dd: ja 0x314b2; xor eax, eax; vzeroupper; ret; 
0x000000000043167c: ja 0x31657; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000432267: ja 0x3200e; xor eax, eax; ret; 
0x000000000043219d: ja 0x32179; xor eax, eax; ret; 
0x000000000043234c: ja 0x32327; nop; xor eax, eax; ret; 
0x00000000004355ca: ja 0x353c7; mov eax, esi; ret; 
0x0000000000435954: ja 0x359b1; pop r12; pop rbp; ret; 
0x0000000000437a4d: ja 0x37807; mov eax, esi; ret; 
0x0000000000437d62: ja 0x37d80; hlt; mov eax, esi; syscall; 
0x0000000000438470: ja 0x383d0; lea rdx, [rip + 0x44727]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000438128: ja 0x383d0; lea rdx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000043859f: ja 0x385a8; xor eax, eax; ret; 
0x0000000000438703: ja 0x38760; ret; 
0x00000000004387a6: ja 0x38800; ret; 
0x000000000043883d: ja 0x38840; ret; 
0x0000000000438fdd: ja 0x38fe0; ret; 
0x00000000004391da: ja 0x391e0; ret; 
0x000000000043920d: ja 0x39210; ret; 
0x0000000000439246: ja 0x39250; ret; 
0x00000000004393d9: ja 0x39400; ret; 
0x000000000043c76e: ja 0x3c76c; jmp qword ptr [rsi + 0x66]; 
0x000000000043d34d: ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000043d306: ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000403ffa: ja 0x4023; lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x00000000004496eb: ja 0x49907; movsxd rcx, dword ptr [rsi + rdi*4]; add rcx, rsi; jmp rcx; 
0x000000000044a4c0: ja 0x4a4e2; mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000044a736: ja 0x4a790; ret; 
0x000000000044ad84: ja 0x4ad68; mov rcx, rax; mov rax, rcx; ret; 
0x000000000044adec: ja 0x4adc0; mov rax, rcx; ret; 
0x0000000000450cc1: ja 0x51110; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000004557a8: ja 0x557b8; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x000000000045583b: ja 0x5585c; lea rsi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000458f50: ja 0x58f58; ret; 
0x0000000000459fa6: ja 0x59fe1; ret 0x127e; 
0x000000000045a25b: ja 0x5a248; add eax, ebp; clc; ja 0x5a29b; ret 0x167e; 
0x000000000045a260: ja 0x5a29b; ret 0x167e; 
0x000000000045a648: ja 0x5a5cf; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000045d429: ja 0x5d464; ret 0x117e; 
0x000000000045d6fe: ja 0x5d6eb; add eax, ebp; clc; ja 0x5d73e; ret 0x137e; 
0x000000000045d703: ja 0x5d73e; ret 0x137e; 
0x000000000045db20: ja 0x5daa7; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000045e5a9: ja 0x5e5b0; ret; 
0x000000000045eae0: ja 0x5eae8; ret; 
0x000000000045ef98: ja 0x5ef23; ret 0xc083; 
0x0000000000466c5e: ja 0x67240; lea rdi, [rip + 0x28775]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000046749f: ja 0x67240; lea rsi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x000000000046b1be: ja 0x6b209; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046d0c7: ja 0x6d0cc; add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x000000000047098a: ja 0x70994; mov rdi, qword ptr [rdi]; call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000470aae: ja 0x70ab8; mov rdi, qword ptr [rdi]; call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000470c3d: ja 0x70c40; ret; 
0x0000000000477cd6: ja 0x77c61; ret 0xe283; 
0x0000000000477d90: ja 0x77db0; xor eax, eax; ret; 
0x000000000040b391: ja 0xb780; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000040fda5: ja 0xfdd8; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040fe4e: ja 0xfe76; lea rcx, [rip + 0x6ad09]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040fea8: ja 0xff20; lea rcx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000410600: jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412e1f: jae 0x12f10; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000413187: jae 0x131b0; mov rax, qword ptr [rsp + 8]; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000413eac: jae 0x13ec2; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000413f97: jae 0x14080; mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000414218: jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x000000000041423a: jae 0x14288; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004146bc: jae 0x14708; xor esi, esi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000415874: jae 0x158d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041596a: jae 0x15980; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415d28: jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dda: jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000415e6a: jae 0x15ed8; movzx esi, byte ptr [r12]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x0000000000415f46: jae 0x15f58; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000416158: jae 0x16170; mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000041655a: jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004165f1: jae 0x16608; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041724d: jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x000000000041ca89: jae 0x1ca7c; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004220d6: jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004358b6: jae 0x294b989c; ret 0xc748; 
0x0000000000430b26: jae 0x30b78; movsxd rax, ecx; ret; 
0x00000000004384bd: jae 0x384c0; ret; 
0x000000000043942d: jae 0x39430; ret; 
0x000000000043945d: jae 0x39460; ret; 
0x000000000043948d: jae 0x39490; ret; 
0x000000000043a69d: jae 0x3a6a0; ret; 
0x000000000043b618: jae 0x3b5c9; xor eax, eax; ret; 
0x000000000043b60d: jae 0x3b600; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x000000000043ba84: jae 0x3ba2f; ret; 
0x000000000043fbf7: jae 0x3fc68; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000443a33: jae 0x43a34; jmp qword ptr [rsi + 0x2e]; 
0x0000000000448cd4: jae 0x48c56; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x000000000044a459: jae 0x4a49b; xor eax, eax; pop rbx; ret; 
0x000000000044a478: jae 0x4a4ba; pop rbx; ret; 
0x000000000044ad5b: jae 0x4ad3f; mov rax, rcx; ret; 
0x000000000045366c: jae 0x545e8; mov rdx, r14; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454321: jae 0x54eec; mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453758: jae 0x551c9; mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004556b0: jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000456dca: jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000456ed9: jae 0x56fc8; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000457123: jae 0x57144; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000457459: jae 0x573b3; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004575ef: jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000457689: jae 0x576a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000045e24c: jae 0x5e296; add eax, edi; ret; 
0x000000000045e78d: jae 0x5e790; ret; 
0x000000000045e7bd: jae 0x5e7c0; ret; 
0x000000000045e7ed: jae 0x5e7f0; ret; 
0x000000000045e81d: jae 0x5e820; ret; 
0x000000000045e84d: jae 0x5e850; ret; 
0x000000000046bb8a: jae 0x6bb80; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000046bd87: jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000046d58e: jae 0x6d593; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046dc9c: jae 0x6dc37; mov rax, rsi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000046fed9: jae 0x6fec0; mov eax, 1; ret; 
0x0000000000408ae8: jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040beeb: jae 0xcd8f; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c200: jae 0xd0a1; mov qword ptr [rbp - 0x8b8], r8; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040d940: jae 0xe830; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040d49f: jae 0xea70; mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000040d892: jae 0xf2f0; mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040dbf7: jae 0xf33c; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041662c: jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x000000000041ed6b: jb 0x1ed6e; add byte ptr [rax - 0x73], cl; add eax, 0x11d3b; cmove rax, rdx; ret; 
0x000000000041f95b: jb 0x1f99d; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000420717: jb 0x2072d; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000420744: jb 0x20755; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000420758: jb 0x20766; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000420769: jb 0x2077b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000042077e: jb 0x20784; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000421045: jb 0x21049; vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x00000000004215e9: jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042188f: jb 0x21893; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x00000000004220c9: jb 0x22040; cmp rdx, qword ptr [rip + 0x84c22]; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000422031: jb 0x22053; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004224a8: jb 0x224bb; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000042254a: jb 0x2254c; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000422fe1: jb 0x22fc0; movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004237e6: jb 0x237f6; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237f9: jb 0x23805; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000423812: jb 0x2381e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000423825: jb 0x2382d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000423830: jb 0x2383a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000042383d: jb 0x23841; mov byte ptr [rdi], cl; ret; 
0x0000000000423b26: jb 0x23b00; vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000423c8d: jb 0x23cb5; cmp rdx, 0x40; ja 0x23cf0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423d52: jb 0x23d30; vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000423ed6: jb 0x23ec0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004318b4: jb 0x318b0; ja 0x2c8c0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000431f14: jb 0x31f11; ja 0x2ce20; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000435010: jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x0000000000434f00: jb 0x34f44; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000434f85: jb 0x34f44; sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000434f36: jb 0x34f44; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000434fd9: jb 0x34fe8; sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004352e0: jb 0x350e4; mov rax, r8; xtest; jne 0x352f2; vzeroupper; ret; 
0x0000000000435502: jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354d0: jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435589: jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043554e: jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004373a3: jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x0000000000437723: jb 0x374a4; mov rax, r8; xtest; jne 0x37735; vzeroupper; ret; 
0x000000000043791e: jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043795f: jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000437a09: jb 0x37a18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379ae: jb 0x37a18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000439281: jb 0x39290; xor eax, eax; ret; 
0x000000000043ba7f: jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x000000000043c49d: jb 0x3c4e7; mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044df6b: jb 0x4df50; mov eax, r8d; ret; 
0x00000000004576cc: jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x0000000000457813: jb 0x57855; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x000000000045b0e0: jb 0x5b0f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045b4e0: jb 0x5b4f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045e901: jb 0x5e974; add al, 0; add byte ptr [rbp + rbx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000045eb2d: jb 0x5eab8; ret 0xc085; 
0x0000000000464700: jb 0x64710; mov rcx, rax; cmp rcx, rdx; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x000000000046bffd: jb 0x6bfe0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000046dcbb: jb 0x6dca1; ret; 
0x000000000047042a: jb 0x703f2; cli; dec dword ptr [rax - 0x77]; ret; 
0x00000000004760b4: jb 0x760bb; cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004188c9: jbe 0x188d0; ret; 
0x0000000000418909: jbe 0x18910; ret; 
0x0000000000418939: jbe 0x18940; ret; 
0x000000000041e706: jbe 0x1e718; add byte ptr [rax], al; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041e806: jbe 0x1e817; add byte ptr [rax], al; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000043127c: jbe 0x31259; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000043129c: jbe 0x31259; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431f30: jbe 0x31f11; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x0000000000433d57: jbe 0x33d64; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000434d37: jbe 0x34d44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000434d8d: jbe 0x34da0; test eax, eax; je 0x34e00; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043534f: jbe 0x35360; test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x000000000043778f: jbe 0x377a0; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x0000000000403c99: jbe 0x3cab; syscall; 
0x0000000000450221: jbe 0x50203; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045366e: jbe 0x5367f; add byte ptr [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455731: jbe 0x55713; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045a0c1: jbe 0x5a115; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a109: jbe 0x5a115; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045a4e8: jbe 0x5a500; test eax, eax; je 0x5a580; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a688: jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a66d: jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a7a8: jbe 0x5a7c0; test eax, eax; je 0x5a840; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a948: jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a933: jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045aacf: jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad36: jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad46: jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad56: jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad66: jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045d554: jbe 0x5d5b5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045d5a9: jbe 0x5d5b5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045da07: jbe 0x5d9c0; test eax, eax; je 0x5da60; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045db58: jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045db45: jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045dcc7: jbe 0x5dc80; test eax, eax; je 0x5dd20; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045de28: jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de10: jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045e14c: jbe 0x5e19d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000045e1ee: jbe 0x5e23f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000045dfb4: jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e24b: jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e26b: jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e28b: jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2ab: jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004690a6: jbe 0x69090; cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x000000000046964f: jbe 0x69658; ret; 
0x000000000040fea9: jbe 0xfef3; lea ecx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040100e: je 0x1012; call rax; 
0x000000000040100e: je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000411eb1: je 0x11f18; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000412720: je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x0000000000412806: je 0x12810; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x12810; ret; 
0x0000000000412c78: je 0x12c7b; ret; 
0x000000000040157b: je 0x1590; mov eax, 0; test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x0000000000401585: je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x0000000000415992: je 0x159b8; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415ce5: je 0x15cf0; ret; 
0x00000000004015bd: je 0x15d0; mov eax, 0; test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015c7: je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015fe: je 0x160a; mov edi, 0x494d98; call 0x77930; mov byte ptr [rip + 0xa568f], 1; pop rbp; ret; 
0x000000000041632e: je 0x16340; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x00000000004163a2: je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000416565: je 0x1656a; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000416627: je 0x16638; cmp rsi, rcx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x0000000000416dfb: je 0x16e0d; mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x16df8; ret; 
0x0000000000417244: je 0x17258; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x0000000000417bef: je 0x17bf2; ret; 
0x0000000000417c56: je 0x17c27; push rax; lea rdi, [rip + 0x63270]; call 0x12c40; nop dword ptr [rax]; ret; 
0x0000000000417c30: je 0x17c68; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000417cab: je 0x17c7a; push rax; lea rdi, [rip + 0x6321b]; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000417dad: je 0x17d80; call rdx; 
0x000000000041812e: je 0x18058; lea rdi, [rip + 0x62d95]; call 0x12c40; mov eax, 0x23; ret; 
0x00000000004187dd: je 0x187ee; xor eax, eax; ret; 
0x0000000000418a6c: je 0x18a75; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040183c: je 0x18aa; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000418b9c: je 0x18ba8; add rsp, 8; ret; 
0x00000000004019a1: je 0x1901; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000040194c: je 0x1901; mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000401925: je 0x1901; movzx eax, cl; pop rbx; ret; 
0x0000000000401991: je 0x1901; movzx eax, dl; pop rbx; ret; 
0x00000000004191d7: je 0x191f0; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000419878: je 0x19840; add rsp, 0x18; ret; 
0x0000000000419b19: je 0x19b3f; or al, ch; jmp rax; 
0x0000000000401a76: je 0x1a9c; sbb byte ptr [rbx + 0x4814247c], cl; mov eax, dword ptr [rsp + 8]; call rax; 
0x000000000041c8d6: je 0x1c8e0; add rsp, 8; ret; 
0x000000000041e650: je 0x1e670; and ch, 2; lea rdx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x000000000041e750: je 0x1e770; and ch, 2; lea rdx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e850: je 0x1e870; and ch, 2; lea rdx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ea3b: je 0x1ea40; ret; 
0x000000000041ea86: je 0x1ea57; test esi, esi; lea rdx, [rip + 0x592f]; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041eb32: je 0x1eb46; test byte ptr [rip + 0x8d37a], 1; lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000041eb8d: je 0x1eb5f; ret; 
0x000000000041eba8: je 0x1ebc0; and ecx, 4; lea rax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000041ebf5: je 0x1ebc9; ret; 
0x000000000041ec1b: je 0x1ec20; ret; 
0x000000000041ec6d: je 0x1ec38; ret; 
0x000000000041ec9d: je 0x1ecb4; and edx, 8; lea rax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000041eced: je 0x1ecc1; ret; 
0x000000000041eddb: je 0x1ede0; ret; 
0x000000000041ee2d: je 0x1edf8; ret; 
0x000000000041ee52: je 0x1ee66; test byte ptr [rip + 0x8d05a], 1; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x000000000041eead: je 0x1ee7f; ret; 
0x000000000041eecb: je 0x1eed0; ret; 
0x000000000041ef1d: je 0x1eee8; ret; 
0x000000000041f7c6: je 0x1f7d2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000041ff56: je 0x1ff62; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000420e5c: je 0x20e68; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000420f74: je 0x20f8d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004215e0: je 0x215ed; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004216d7: je 0x216e3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004217c4: je 0x217dd; std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000421ef1: je 0x21efd; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000421f97: je 0x21fb0; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000004224af: je 0x224c7; clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004224b7: je 0x224d0; clc; ret; 
0x00000000004224be: je 0x224d6; cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x00000000004224ce: je 0x224da; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x00000000004224c4: je 0x224dd; cld; ret; 
0x00000000004224d2: je 0x224ea; jmp qword ptr [rsi - 0x77]; 
0x0000000000423f25: je 0x23f3e; clc; ret; 
0x0000000000423f2c: je 0x23f45; cld; ret; 
0x0000000000423f65: je 0x23fb0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000424087: je 0x23fb4; bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000000424261: je 0x242e0; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000424289: je 0x242e4; tzcnt eax, eax; add rax, rcx; ret; 
0x00000000004243e1: je 0x24460; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000424409: je 0x24464; tzcnt eax, eax; add rax, rcx; ret; 
0x00000000004245a8: je 0x245c0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000004246ea: je 0x2473b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000004249bf: je 0x24a40; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x00000000004251bf: je 0x25240; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000042b435: je 0x2b43e; and byte ptr [rbp - 0xe], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3f6: je 0x2b470; tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x000000000042b599: je 0x2b5a2; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b5b5: je 0x2b5be; and byte ptr [rbp + 0x41], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b5f9: je 0x2b5fd; xor eax, eax; ret; 
0x000000000042bb75: je 0x2bbd0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042bd13: je 0x2bbd4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000042bf76: je 0x2bfd0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042c13a: je 0x2bfd4; bsf eax, eax; add rax, rdx; ret; 
0x000000000042c191: je 0x2c1a0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042d339: je 0x2d351; test cl, ch; ret; 
0x000000000042e7f9: je 0x2e810; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042ea29: je 0x2e8c5; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042f7d5: je 0x2f7d8; xchg edx, eax; sub eax, edx; ret; 
0x000000000042fa8f: je 0x2fb10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000043025f: je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x0000000000430250: je 0x30300; cmp edx, 1; ja 0x302f0; je 0x302e0; mov byte ptr [rdi], 0; ret; 
0x0000000000430b94: je 0x30b70; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000430c03: je 0x30c60; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430d44: je 0x30c64; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430eb4: je 0x30de4; tzcnt eax, eax; xtest; jne 0x30ec7; vzeroupper; ret; 
0x0000000000430f05: je 0x30f60; tzcnt eax, eax; ret; 
0x0000000000431049: je 0x30f67; tzcnt eax, eax; ret; 
0x000000000043108c: je 0x3106e; pmovmskb edx, xmm4; test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x0000000000431094: je 0x3109a; bsf eax, edx; ret; 
0x000000000043113d: je 0x31150; bsf rax, rdx; ret; 
0x00000000004310dc: je 0x31160; bsf rax, rdx; ret; 
0x0000000000431ef7: je 0x31f60; tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000434d1a: je 0x34d1d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000434d91: je 0x34e00; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000435353: je 0x353c0; tzcnt eax, eax; ret; 
0x00000000004356e4: je 0x356f3; sar rdx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x00000000004356ec: je 0x35710; bsf rax, rdx; ret; 
0x000000000043567c: je 0x35720; bsf rax, rdx; ret; 
0x000000000043598f: je 0x35854; cmp byte ptr [rdx], 0; jne 0x35988; xor eax, eax; ret; 
0x000000000043603c: je 0x36020; ret; 
0x000000000043635d: je 0x36383; and byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000043678d: je 0x3675f; ret; 
0x0000000000437091: je 0x37120; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000437793: je 0x37800; tzcnt eax, eax; ret; 
0x0000000000437b8c: je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b1d: je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437cea: je 0x37d00; sub rsp, 8; call rax; 
0x00000000004385fe: je 0x3866d; mov edx, ebx; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004386f7: je 0x38710; xor eax, eax; syscall; 
0x00000000004386f7: je 0x38710; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x38760; ret; 
0x000000000043872e: je 0x38754; adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x0000000000438797: je 0x387b0; mov eax, 1; syscall; 
0x0000000000438797: je 0x387b0; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x38800; ret; 
0x00000000004388cc: je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x0000000000438f03: je 0x38f29; xor byte ptr [rax + 0x39], cl; ret; 
0x0000000000439038: je 0x39060; mov eax, 0x48; syscall; 
0x00000000004390c7: je 0x390f0; mov eax, 0x48; syscall; 
0x000000000043915e: je 0x39190; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000043934a: je 0x3934d; ret; 
0x0000000000439f33: je 0x39f3a; test rsi, rsi; jne 0x39f40; ret; 
0x0000000000439f53: je 0x39f5a; test rsi, rsi; jne 0x39f60; ret; 
0x0000000000403a1e: je 0x3a30; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000043a3e2: je 0x3a3f0; add rsp, 8; ret; 
0x000000000043a422: je 0x3a430; add rsp, 8; ret; 
0x000000000043ae05: je 0x3ae10; ret; 
0x000000000043ae7c: je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000043b5d5: je 0x3b61a; ret; 
0x000000000043c229: je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000043c224: je 0x3c238; test rdx, rdx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000043c26f: je 0x3c29b; mov rax, rdx; pop rbx; ret; 
0x000000000043c26a: je 0x3c29b; test rdx, rdx; je 0x3c29b; mov rax, rdx; pop rbx; ret; 
0x00000000004406a0: je 0x406c6; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000440ba9: je 0x40bcf; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411bb: je 0x411e1; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441778: je 0x4179e; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000441e1c: je 0x41e42; cmp byte ptr [rax - 0x75], cl; jl 0x41e47; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000442302: je 0x42328; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000442f02: je 0x42f28; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000443d0c: je 0x43d32; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000444a56: je 0x44a7c; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000445295: je 0x452bb; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000445e99: je 0x45ebf; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000446685: je 0x466ab; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000447356: je 0x4737c; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000447f02: je 0x47edd; call 0x69b90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000447ed6: je 0x47ee0; cmp esi, 3; je 0x47ee0; pop rbx; ret; 
0x0000000000447edb: je 0x47ee0; pop rbx; ret; 
0x00000000004488fe: je 0x48902; call rax; 
0x0000000000448cdd: je 0x48ce1; call rsi; 
0x000000000044a2ee: je 0x4a2f8; ret; 
0x000000000044a727: je 0x4a740; mov eax, 0x13e; syscall; 
0x000000000044a727: je 0x4a740; mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x4a790; ret; 
0x000000000044a75d: je 0x4a783; adc byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x000000000044df64: je 0x4df78; movsx ecx, byte ptr [rsi]; cmp ecx, edi; jb 0x4df50; mov eax, r8d; ret; 
0x000000000044f6e2: je 0x4f708; cmp byte ptr [rcx], al; ret; 
0x0000000000453748: je 0x5376e; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000454311: je 0x54337; adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000456ffc: je 0x57000; ret; 
0x000000000045704e: je 0x570ab; pop rbp; pop r12; ret; 
0x00000000004575fa: je 0x575ff; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000457621: je 0x57647; or al, 0xe8; mov r14b, 0xfb; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000045762a: je 0x57650; or al, 0xeb; ret 0x5590; 
0x0000000000457656: je 0x5765b; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004576c7: je 0x576d8; cmp rsi, rcx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x0000000000457a92: je 0x57aa8; mov eax, esi; ret; 
0x0000000000457ae3: je 0x57af0; ret; 
0x0000000000457b42: je 0x57b21; ret; 
0x0000000000457ba3: je 0x57bb0; ret; 
0x00000000004589af: je 0x588b1; mov eax, 0x16; ret; 
0x00000000004589a3: je 0x588f0; xor eax, eax; ret; 
0x0000000000458978: je 0x589d0; mov eax, 0x16; ret; 
0x000000000045896f: je 0x58af8; cmp eax, 0x21; je 0x589d0; mov eax, 0x16; ret; 
0x0000000000458c00: je 0x58bbd; mov eax, 0x83; ret; 
0x0000000000458cf8: je 0x58d10; mov dword ptr [rdi], 0; xor eax, eax; add rsp, 8; ret; 
0x0000000000458e2d: je 0x58e60; xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000458f05: je 0x58f20; push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f74: je 0x58f80; xor eax, eax; ret; 
0x000000000045975b: je 0x59760; ret; 
0x00000000004597a6: je 0x59777; test esi, esi; lea rdx, [rip + 0xfcf]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x0000000000459e7b: je 0x59e80; ret; 
0x0000000000459ecd: je 0x59e98; ret; 
0x0000000000459f90: je 0x59ff0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045a19a: je 0x5a1a7; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045a4ec: je 0x5a580; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a733: je 0x5a740; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045a7ac: je 0x5a840; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045aa23: je 0x5aa30; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045ac3c: je 0x5ac8d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000045acde: je 0x5ad2f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045adaf: je 0x5ae08; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000045b14c: je 0x5b165; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b175: je 0x5b18d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000045b1af: je 0x5b208; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000045b54c: je 0x5b565; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5b250; ret; 
0x000000000045b575: je 0x5b58d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000045b949: je 0x5b913; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000045bb90: je 0x5bb98; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045bbda: je 0x5bbb1; nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000045bbbb: je 0x5bbc3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x000000000045bbff: je 0x5bbd0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x000000000045bce7: je 0x5bc90; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045bd97: je 0x5bd50; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045bdda: je 0x5bde2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045c0d2: je 0x5c0da; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c163: je 0x5c0f4; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c101: je 0x5c109; bsr eax, eax; add rax, rsi; ret; 
0x000000000045c250: je 0x5c110; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x000000000045c182: je 0x5c156; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c282: je 0x5c243; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c324: je 0x5c2f3; bsr rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c368: je 0x5c370; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c3ea: je 0x5c3d2; bsr eax, eax; add rax, r8; ret; 
0x000000000045c3ca: je 0x5c3d2; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c40f: je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045c4f7: je 0x5c3e0; shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000045c44f: je 0x5c420; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c537: je 0x5c4e5; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c5d7: je 0x5c595; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c614: je 0x5c61c; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c77d: je 0x5c74f; ret; 
0x000000000045c79b: je 0x5c7a0; ret; 
0x000000000045c7e6: je 0x5c7b7; test esi, esi; lea rdx, [rip + 0x144f]; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000045ca69: je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x000000000045cc54: je 0x5cb44; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000045cea5: je 0x5cf00; tzcnt eax, eax; ret; 
0x000000000045cff1: je 0x5cf07; tzcnt eax, eax; ret; 
0x000000000045d1d9: je 0x5d1e1; and edx, 0xf; je 0x5d1f0; ret; 
0x000000000045d1de: je 0x5d1f0; ret; 
0x000000000045d1e7: je 0x5d1f8; add rax, 2; ret; 
0x000000000045d274: je 0x5d27e; bsf eax, edx; shr rax, 2; ret; 
0x000000000045d31d: je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2c0: je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d410: je 0x5d480; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045d63a: je 0x5d647; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045d9ac: je 0x5da60; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045dc10: je 0x5dc1d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045dc6c: je 0x5dd20; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045df00: je 0x5df0d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045e8fd: je 0x5e938; cmp byte ptr [rip + 0x47172], 0; je 0x5e965; mov eax, 0x101; syscall; 
0x000000000045e906: je 0x5e965; mov eax, 0x101; syscall; 
0x000000000045e98a: je 0x5e9b0; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000045ea5d: je 0x5ea88; mov eax, 0x101; syscall; 
0x0000000000405f3c: je 0x5f26; xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x0000000000460488: je 0x60490; mov eax, r8d; ret; 
0x000000000046047d: je 0x604cf; mov r8d, 1; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x000000000046450b: je 0x64500; xor eax, eax; ret; 
0x000000000046451a: je 0x64520; ret; 
0x0000000000464823: je 0x64828; mov qword ptr [r9], rdi; xor esi, esi; pop rbx; mov rax, rsi; ret; 
0x0000000000464843: je 0x64848; mov qword ptr [r9], rdi; mov rsi, 0xffffffffffffffff; pop rbx; mov rax, rsi; ret; 
0x0000000000466139: je 0x6613c; lock inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x00000000004690aa: je 0x68ff3; sub eax, esi; ret; 
0x0000000000469c41: je 0x69c30; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000046b6bf: je 0x6b6d0; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046bb2a: je 0x6bba0; mov eax, eax; ret; 
0x000000000046cf9b: je 0x6cfa7; mov rax, 0xffffffffffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000046cffd: je 0x6d063; jne 0x6cff0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046dc2c: je 0x6dc37; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6dc20; ret; 
0x000000000046dd34: je 0x6dd40; ret; 
0x0000000000470be1: je 0x70c00; call 0x1d050; nop dword ptr [rax + rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x0000000000470d1e: je 0x70d36; lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000472c47: je 0x72c78; cmp rax, 0x7fff; je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000472c4f: je 0x72cb0; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000472c96: je 0x72d52; mov eax, 1; add rsp, 0x38; ret; 
0x000000000047312a: je 0x7313c; movss xmm0, dword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x00000000004732d3: je 0x7332a; add rsp, 0x18; ret; 
0x0000000000475597: je 0x7559e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000475f7e: je 0x75f90; mov edi, 1; jmp rax; 
0x0000000000477a5a: je 0x77a5d; or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000047865e: je 0x78662; call rax; 
0x0000000000478ab6: je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x0000000000408f9a: je 0x8f40; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000408e6e: je 0x8f40; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [r15]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040d4a7: je 0xd4cd; or byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000040dbe7: je 0xdc0d; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040f838: je 0xf83f; test ax, ax; je 0xf850; lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x000000000040f83d: je 0xf850; lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x000000000041019e: je 0xfe97; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000041510d: jg 0x15140; add rsp, 8; ret; 
0x00000000004171e5: jg 0x171f0; ret; 
0x000000000041825b: jg 0x182a9; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418645: jg 0x1868f; mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000401a09: jg 0x1a02; int1; mov eax, eax; ret; 
0x000000000041c9c1: jg 0x1c9e8; pop rbx; pop rbp; pop r12; ret; 
0x000000000041d23a: jg 0x1d241; pop rbx; pop rbp; pop r12; ret; 
0x000000000041e29a: jg 0x1e360; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041e9bd: jg 0x1ea0f; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000041f733: jg 0x1f73c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041f79f: jg 0x1f7a8; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041f7ee: jg 0x1f7f7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000041f81f: jg 0x1f828; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000041f964: jg 0x1f968; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000041f968: jg 0x1f96b; vzeroupper; ret; 
0x000000000041fa29: jg 0x1fa2b; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000041f9e8: jg 0x1fa2e; cmp ah, al; vzeroupper; ret; 
0x000000000041f9e4: jg 0x1fa46; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000041fa8f: jg 0x1fa91; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000041ff1f: jg 0x1ff28; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x1ff30; vzeroupper; ret; 
0x000000000041ff7e: jg 0x1ff87; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000420700: jg 0x20709; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000420724: jg 0x2072d; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000420738: jg 0x20741; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000420baa: jg 0x20ba4; ret; 
0x0000000000420dbc: jg 0x20dc5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420e28: jg 0x20e31; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420e7c: jg 0x20e85; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000420e97: jg 0x20ea0; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000420ec7: jg 0x20ed0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000421052: jg 0x21056; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000421058: jg 0x2105b; ret; 
0x00000000004210f6: jg 0x210fb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000421126: jg 0x21128; ret; 
0x00000000004210fc: jg 0x21142; cmp bh, bh; ret; 
0x00000000004210ee: jg 0x21167; add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x210fb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x00000000004210f5: jg 0x21176; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000042117b: jg 0x2117d; ret; 
0x0000000000421639: jg 0x21642; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004216a5: jg 0x216ae; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004216f2: jg 0x216fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000421725: jg 0x2172e; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000042189c: jg 0x218a0; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x00000000004218a2: jg 0x218a5; ret; 
0x0000000000421927: jg 0x21930; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000042193c: jg 0x21941; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000421973: jg 0x21975; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421942: jg 0x21988; cmp bh, bh; ret; 
0x00000000004219d2: jg 0x219d4; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004220a8: jg 0x220da; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423414: jg 0x2341d; vzeroupper; ret; 
0x000000000042345e: jg 0x23467; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x00000000004234e2: jg 0x234eb; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000423542: jg 0x2354b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423537: jg 0x23570; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x0000000000423702: jg 0x2370b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004236f7: jg 0x23730; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x0000000000423807: jg 0x23810; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004237fd: jg 0x23816; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000423a0c: jg 0x23a15; ret; 
0x0000000000423a5c: jg 0x23a65; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000423aa7: jg 0x23aa9; ret; 
0x0000000000423aa5: jg 0x23af0; jg 0x23aa9; ret; 
0x0000000000423b74: jg 0x23b76; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000423b84: jg 0x23b86; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423b62: jg 0x23ba0; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423b7a: jg 0x23bc0; adc bh, bh; ret; 
0x0000000000423b8a: jg 0x23bd0; adc bh, bh; ret; 
0x0000000000423c49: jg 0x23c52; ret; 
0x0000000000423c99: jg 0x23ca2; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423cd9: jg 0x23cdb; ret; 
0x0000000000423cd7: jg 0x23d02; jg 0x23cdb; ret; 
0x0000000000423d58: jg 0x23d5b; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000423d94: jg 0x23d96; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423d88: jg 0x23db0; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000423d9a: jg 0x23de0; adc bh, bh; ret; 
0x0000000000423f12: jg 0x23f30; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x0000000000424057: jg 0x240a1; add eax, edi; vzeroupper; ret; 
0x0000000000424acc: jg 0x24ae5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000424aec: jg 0x24b05; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004250ab: jg 0x2512c; jmp qword ptr [rdx - 0x1f]; 
0x00000000004258a6: jg 0x258af; lea rax, [rdi + 0xf]; ret; 
0x00000000004258b6: jg 0x258bf; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004258ca: jg 0x258d3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004258e9: jg 0x258f2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000425909: jg 0x25912; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425929: jg 0x25932; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000042594a: jg 0x25953; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000042596a: jg 0x25973; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000042598a: jg 0x25993; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259aa: jg 0x259b3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004259ce: jg 0x259d7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004259ed: jg 0x259f6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000425a0d: jg 0x25a16; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000425a2b: jg 0x25a34; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000425a4b: jg 0x25a54; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000425a6b: jg 0x25a74; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000425a2f: jg 0x25a88; or eax, 0x1c478d48; ret; 
0x0000000000425a8b: jg 0x25a94; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000042fb7c: jg 0x2fb95; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000042fb9c: jg 0x2fbb5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000043014b: jg 0x301cc; jmp qword ptr [rdx - 0x1f]; 
0x00000000004308d6: jg 0x308df; ret; 
0x00000000004308e6: jg 0x308ef; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004308fa: jg 0x30903; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000430919: jg 0x30922; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000430929: jg 0x30932; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000430939: jg 0x30942; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000043095a: jg 0x30963; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043097a: jg 0x30983; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000043099a: jg 0x309a3; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004309ba: jg 0x309c3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004309de: jg 0x309e7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004309fd: jg 0x30a06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000430a1d: jg 0x30a26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000430a3b: jg 0x30a44; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000430a5b: jg 0x30a64; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a7b: jg 0x30a84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000430a9b: jg 0x30aa4; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000430d17: jg 0x30d61; add eax, edi; vzeroupper; ret; 
0x0000000000434f17: jg 0x34f61; add eax, edi; vzeroupper; ret; 
0x0000000000437267: jg 0x372b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000043ba2d: jg 0x3ba3f; mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000043c76d: jg 0x3c7e6; cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000403cba: jg 0x3cbc; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000403d89: jg 0x3d8b; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x000000000044a4c4: jg 0x4a4ee; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000044acc0: jg 0x4ace8; xor eax, eax; add rsp, 8; ret; 
0x000000000044af4f: jg 0x4af58; ret; 
0x000000000044fd25: jg 0x4fd62; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044ff82: jg 0x4ffc0; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000045007d: jg 0x500c0; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000454e90: jg 0x54ea1; xchg esp, eax; ret 0xd008; 
0x0000000000458f0d: jg 0x58f17; call qword ptr [rbx]; 
0x0000000000458f0d: jg 0x58f17; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045c339: jg 0x5c39d; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000045cc07: jg 0x5cc51; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000045e565: jg 0x5e580; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045e594: jg 0x5e5de; cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000046440d: jg 0x6448d; add al, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004674a9: jg 0x674ad; add byte ptr [rdx + 0x63], cl; add al, 0xae; add rax, rsi; jmp rax; 
0x0000000000469131: jg 0x6912c; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000046b511: jg 0x6b588; in al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000046b9c0: jg 0x6b9f0; pop rbx; ret; 
0x000000000046ceaf: jg 0x6cf50; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046dd32: jg 0x6dd5c; je 0x6dd40; ret; 
0x000000000046f8dc: jg 0x6f8de; add byte ptr [rcx + 0x39], al; ret; 
0x0000000000408b84: jg 0x8be0; call rax; 
0x0000000000408a7c: jg 0x8c00; mov edi, r13d; call rax; 
0x0000000000408b33: jg 0x8c28; mov esi, r13d; mov rdi, r8; call rax; 
0x000000000040cd27: jg 0xcd38; test byte ptr [rdx - 0x7c000008], bh; ret; 
0x000000000040fa50: jg 0xfa60; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000423532: jge 0x23560; cmp edx, 1; jg 0x23570; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f2: jge 0x23720; cmp edx, 1; jg 0x23730; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x0000000000423b5d: jge 0x23b99; cmp edx, 1; jg 0x23ba0; jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423d83: jge 0x23da9; cmp edx, 1; jg 0x23db0; jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000423f0d: jge 0x23f29; cmp edx, 1; jg 0x23f30; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x0000000000424262: jge 0x24257; bsf eax, eax; add rax, rdi; ret; 
0x00000000004243e2: jge 0x243d7; bsf eax, eax; add rax, rdi; ret; 
0x0000000000425b03: jge 0x25b01; ret 0x41c4; 
0x0000000000425bcc: jge 0x25bca; ret 0x41c4; 
0x0000000000425c16: jge 0x25c14; ret 0x41c4; 
0x0000000000425c60: jge 0x25c5e; ret 0x41c4; 
0x0000000000425cea: jge 0x25ce8; ret 0x41c4; 
0x0000000000425e9c: jge 0x25e9a; ret 0x41c4; 
0x0000000000425ef4: jge 0x25ef2; ret 0x41c4; 
0x0000000000425f7c: jge 0x25f7a; ret 0x41c4; 
0x0000000000425fcb: jge 0x25fc9; ret 0x41c4; 
0x0000000000426017: jge 0x26015; ret 0x41c4; 
0x000000000042616c: jge 0x2616a; ret 0x41c4; 
0x00000000004261bc: jge 0x261ba; ret 0x41c4; 
0x0000000000426513: jge 0x26511; ret 0x41c4; 
0x00000000004265dc: jge 0x265da; ret 0x41c4; 
0x0000000000426626: jge 0x26624; ret 0x41c4; 
0x0000000000426670: jge 0x2666e; ret 0x41c4; 
0x00000000004266fa: jge 0x266f8; ret 0x41c4; 
0x00000000004268b8: jge 0x268b6; ret 0x41c4; 
0x0000000000426911: jge 0x2690f; ret 0x41c4; 
0x000000000042699c: jge 0x2699a; ret 0x41c4; 
0x00000000004269eb: jge 0x269e9; ret 0x41c4; 
0x0000000000426a37: jge 0x26a35; ret 0x41c4; 
0x0000000000426b8c: jge 0x26b8a; ret 0x41c4; 
0x0000000000426bdc: jge 0x26bda; ret 0x41c4; 
0x00000000004358b2: jge 0x358fc; js 0x358ca; jae 0x294b989c; ret 0xc748; 
0x000000000045bcd1: jge 0x5bcaa; ret 0xfdc5; 
0x000000000045bd81: jge 0x5bd5a; ret 0xfdc5; 
0x000000000045bf71: jge 0x5bf4a; ret 0xfdc5; 
0x000000000045c021: jge 0x5bffa; ret 0xfdc5; 
0x0000000000464514: jge 0x6451a; add byte ptr [rax + 0x39], cl; stc; je 0x64520; ret; 
0x0000000000464575: jge 0x6457b; add al, ch; and eax, dword ptr [rbp + 0x3948fffb]; ret; 
0x000000000046966b: jge 0x69699; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004758ef: jge 0x758e9; leave; ret; 
0x0000000000475a93: jge 0x75a8d; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475be7: jge 0x75be1; leave; ret; 
0x0000000000475c6b: jge 0x75c65; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e39: jge 0x75e33; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e8b: jge 0x75e85; leave; ret; 
0x0000000000475f5e: jge 0x75f58; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000412888: jl 0x128ae; adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000415e73: jl 0x15e99; add dword ptr [rcx + rcx*4 - 9], ecx; call qword ptr [rbx + 0x18]; 
0x0000000000401a7a: jl 0x1aa0; adc al, 0x48; mov eax, dword ptr [rsp + 8]; call rax; 
0x000000000041c610: jl 0x1c617; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000402020: jl 0x2046; lock add cl, byte ptr [rdi]; xchg esp, eax; ret 0xca21; 
0x000000000042068f: jl 0x206d9; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000420696: jl 0x206e0; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000042069d: jl 0x206e7; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004206a4: jl 0x206ee; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004206cc: jl 0x20716; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004206d2: jl 0x2071c; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004206d9: jl 0x20723; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004206e0: jl 0x2072a; adc dword ptr [rcx - 1], ebx; ret; 
0x00000000004208c9: jl 0x20913; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004208d0: jl 0x2091a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004208d7: jl 0x20921; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004208de: jl 0x20928; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000420a37: jl 0x20a81; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a3e: jl 0x20a88; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a45: jl 0x20a8f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000420b92: jl 0x20bdc; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b99: jl 0x20be3; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba0: jl 0x20bea; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba7: jl 0x20bf1; adc dword ptr [rdi - 8], edi; ret; 
0x0000000000420f7c: jl 0x20f95; cld; ret; 
0x00000000004217cc: jl 0x217e5; cld; ret; 
0x0000000000423539: jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f9: jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x00000000004237a7: jl 0x237f1; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237ae: jl 0x237f8; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237b5: jl 0x237ff; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237bc: jl 0x23806; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004237c9: jl 0x23813; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237cf: jl 0x23819; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237d6: jl 0x23820; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237dd: jl 0x23827; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004237ea: jl 0x23834; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237f0: jl 0x2383a; adc dword ptr [rsi - 1], edx; ret; 
0x00000000004238b0: jl 0x238fa; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004238b7: jl 0x23901; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004238be: jl 0x23908; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004238c5: jl 0x2390f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000423909: jl 0x23953; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042390f: jl 0x23959; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000423916: jl 0x23960; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042391d: jl 0x23967; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004239ac: jl 0x239f6; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b3: jl 0x239fd; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239ba: jl 0x23a04; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000423b64: jl 0x23b68; mov byte ptr [rax], cl; ret; 
0x0000000000423d8a: jl 0x23d8e; mov byte ptr [rax], cl; ret; 
0x0000000000423f14: jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x000000000042d334: jl 0x2d34d; test byte ptr [rax - 0x73], cl; je 0x2d351; test cl, ch; ret; 
0x00000000004387d5: jl 0x387fb; or byte ptr [rax + 1], bh; syscall; 
0x00000000004388d4: jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000439845: jl 0x3986b; adc byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; and al, 0x18; call rax; 
0x00000000004406a5: jl 0x406cb; push rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000440bae: jl 0x40bd4; pop rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411c0: jl 0x411e6; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000044177d: jl 0x417a3; pop rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000441e21: jl 0x41e47; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000442307: jl 0x4232d; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004429b5: jl 0x429db; add byte ptr [rdi], cl; test dl, ch; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000442f07: jl 0x42f2d; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000443d11: jl 0x43d37; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000444a5b: jl 0x44a81; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044529a: jl 0x452c0; push rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000445e9e: jl 0x45ec4; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000044668a: jl 0x466b0; push rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044735b: jl 0x47381; sub byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000044a765: jl 0x4a78b; or byte ptr [rax + 0x13e], bh; syscall; 
0x0000000000450cbc: jl 0x50d00; cmp ecx, 7; ja 0x51110; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000459800: jl 0x59822; add byte ptr [rax], al; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000045e98e: jl 0x5e9b4; sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000405f35: jl 0x5f0c; add byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rsi*2 - 0x18]; xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x000000000045ff9a: jl 0x5ffb1; add eax, ebp; dec dl; sti; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004606ac: jl 0x606d2; cmovs eax, dword ptr [rbx - 0x7f170f19]; or edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000470a10: jl 0x709b5; cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000472008: jl 0x7202e; or al, 1; setne al; mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x000000000047371e: jl 0x736fd; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000476100: jl 0x76126; or byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x0000000000476153: jl 0x76179; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000478ab2: jl 0x78acb; sbb byte ptr [rax], al; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000040b38c: jl 0xb3d0; cmp ecx, 7; ja 0xb780; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000040d882: jl 0xd8a8; sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041abd1: jle 0x1abd2; jmp qword ptr [rsi + 0x66]; 
0x000000000041f9e7: jle 0x1fa68; cmp r12b, al; vzeroupper; ret; 
0x0000000000423562: jle 0x2356b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000423722: jle 0x2372b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000423820: jle 0x237e3; cmp dl, 4; jb 0x2382d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000042cf6d: jle 0x2cf72; fisub word ptr [rdx - 0x5d]; and byte ptr [rip - 0x4d9d0104], r12b; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000042d11b: jle 0x2d120; fisub word ptr [rdx - 0x4e]; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x00000000004310de: jle 0x310e0; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000447f1a: jle 0x47f24; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000044b070: jle 0x4af79; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000459fa9: jle 0x59fbd; add rax, rdi; ret; 
0x000000000045a231: jle 0x5a242; mov esp, 0xf80148c0; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045a263: jle 0x5a27b; add rax, rdi; ret; 
0x000000000045d2c1: jle 0x5d30b; bsf eax, edx; shr rax, 2; ret; 
0x000000000045d42c: jle 0x5d43f; add rax, rdi; ret; 
0x000000000045d6d1: jle 0x5d6e2; mov esp, 0xf80148c0; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x000000000045d706: jle 0x5d71b; add rax, rdi; ret; 
0x000000000046b7b7: jle 0x6b7a9; sub rsp, 8; call 0x17cf0; xor eax, eax; add rsp, 8; ret; 
0x000000000047859e: jle 0x785ae; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000408a7e: jle 0x8a81; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000045af4b: jmp qword ptr [rax + 0x73]; 
0x000000000040bd48: jmp qword ptr [rax]; 
0x000000000044bd4d: jmp qword ptr [rbp + 0xf]; 
0x00000000004587a0: jmp qword ptr [rcx]; 
0x0000000000465923: jmp qword ptr [rdi + 0x6d]; 
0x000000000044cd8a: jmp qword ptr [rdi + 0xf]; 
0x000000000044d462: jmp qword ptr [rdi - 0x75]; 
0x0000000000458ead: jmp qword ptr [rdi]; 
0x0000000000420a12: jmp qword ptr [rdx + 0x51]; 
0x0000000000420b73: jmp qword ptr [rdx + 0x71]; 
0x00000000004271f0: jmp qword ptr [rdx + 1]; 
0x0000000000420db7: jmp qword ptr [rdx - 0x1f]; 
0x0000000000420b2b: jmp qword ptr [rdx - 0x2f]; 
0x000000000045c350: jmp qword ptr [rdx - 0x4d]; 
0x0000000000427228: jmp qword ptr [rdx - 0x4e]; 
0x000000000045b847: jmp qword ptr [rdx - 0xd]; 
0x0000000000420671: jmp qword ptr [rdx - 0xf]; 
0x000000000044c205: jmp qword ptr [rsi + 0x25]; 
0x0000000000401524: jmp qword ptr [rsi + 0x2e]; 
0x000000000043e7e9: jmp qword ptr [rsi + 0x41]; 
0x0000000000435ed3: jmp qword ptr [rsi + 0x44]; 
0x000000000040ff34: jmp qword ptr [rsi + 0x48]; 
0x0000000000410cad: jmp qword ptr [rsi + 0x49]; 
0x0000000000401cc1: jmp qword ptr [rsi + 0x66]; 
0x0000000000401646: jmp qword ptr [rsi + 0xf]; 
0x00000000004027dd: jmp qword ptr [rsi - 0x70]; 
0x000000000040d098: jmp qword ptr [rsi - 0x77]; 
0x0000000000438ce9: jmp qword ptr [rsi - 0x7d]; 
0x000000000040fd6d: jmp qword ptr [rsi - 0x7f]; 
0x000000000047742d: jmp qword ptr [rsi - 9]; 
0x000000000044cdb3: jmp qword ptr [rsi]; 
0x000000000040158c: jmp rax; 
0x0000000000468563: jmp rbx; 
0x000000000040198a: jmp rcx; 
0x0000000000403850: jmp rdx; 
0x0000000000407c90: jmp rsi; 
0x0000000000411193: jne 0x111b6; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041134d: jne 0x11356; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000411b50: jne 0x11bd8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000411f3d: jne 0x11f63; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004123f7: jne 0x124ea; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000413576: jne 0x13687; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000413936: jne 0x1393f; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000414713: jne 0x14720; xor eax, eax; ret; 
0x00000000004754b2: jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x0000000000475504: jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000415583: jne 0x15590; ret; 
0x00000000004157c1: jne 0x157b0; ret; 
0x000000000041633e: jne 0x16330; ret; 
0x00000000004164e9: jne 0x16500; pop rbx; ret; 
0x0000000000416e06: jne 0x16df8; ret; 
0x0000000000416e43: jne 0x16e50; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000417192: jne 0x171a8; mov qword ptr [rip + 0x909fd], rbx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000417b85: jne 0x17ba0; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000417be7: jne 0x17bde; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x0000000000417da4: jne 0x17d80; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x00000000004180c0: jne 0x18090; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004187d5: jne 0x187ab; and edx, 0x3b; cmp edx, 0xa; je 0x187ee; xor eax, eax; ret; 
0x0000000000418aa8: jne 0x18ab0; ret; 
0x0000000000401937: jne 0x1901; lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x00000000004195f0: jne 0x195f9; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000419e7a: jne 0x19eb0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041a077: jne 0x1a05e; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000041a13e: jne 0x1a150; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401a9c: jne 0x1ab0; mov edx, 0x3c; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000041c43b: jne 0x1c39b; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c907: jne 0x1c910; ret; 
0x000000000041c950: jne 0x1c938; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ca85: jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000041cb8b: jne 0x1cd26; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041de67: jne 0x1de82; mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000041e00c: jne 0x1e017; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000041e687: jne 0x1e6d0; and ch, 2; lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e787: jne 0x1e7d0; and ch, 2; lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e887: jne 0x1e8d0; and ch, 2; lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e9f6: jne 0x1e954; test eax, eax; lea rdx, [rip + 0x527b]; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e95c: jne 0x1e978; test eax, eax; lea rdx, [rip + 0x4ad9]; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9ae: jne 0x1e98c; and dh, 2; lea rax, [rip + 0x5026]; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041ea60: jne 0x1ea3d; and ch, 4; lea rdx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x000000000041eb75: jne 0x1eb24; ret; 
0x000000000041eb69: jne 0x1eb46; lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000041ebdf: jne 0x1ebaa; ret; 
0x000000000041ec42: jne 0x1ec1d; and ch, 4; lea rdx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041ecd7: jne 0x1ec8a; ret; 
0x000000000041eccb: jne 0x1ecb4; lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x000000000041ee02: jne 0x1eddd; and ch, 4; lea rdx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041ee95: jne 0x1ee44; ret; 
0x000000000041ee89: jne 0x1ee66; lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x000000000041eef2: jne 0x1eecd; and ch, 4; lea rdx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041ff2a: jne 0x1ff30; vzeroupper; ret; 
0x000000000040218d: jne 0x2106; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004236b6: jne 0x236bc; vzeroupper; ret; 
0x00000000004240d0: jne 0x240d6; vzeroupper; ret; 
0x00000000004246f3: jne 0x24740; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000424d7e: jne 0x24d84; vzeroupper; ret; 
0x000000000042656a: jne 0x26570; vzeroupper; ret; 
0x000000000042af7f: jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b0f4: jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000042b163: jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x000000000042b1c7: jne 0x2b1cd; vzeroupper; ret; 
0x000000000042b1bf: jne 0x2b1d1; add rax, rdi; xtest; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042b400: jne 0x2b42c; add rax, rdi; ret; 
0x000000000042b438: jne 0x2b42c; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b451: jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b468: jne 0x2b42c; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042b421: jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000042b5b8: jne 0x2b5fb; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b59c: jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b5ad: jne 0x2b5fb; ret; 
0x000000000042b9b0: jne 0x2b8a0; lea rax, [rdi + 0xb]; ret; 
0x000000000042b96a: jne 0x2b8a0; lea rax, [rdi + 0xf]; ret; 
0x000000000042b915: jne 0x2b8a0; lea rax, [rdi + 3]; ret; 
0x000000000042b8e7: jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x000000000042b892: jne 0x2b8a4; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x000000000042b90c: jne 0x2ba80; test dl, 4; jne 0x2b8a0; lea rax, [rdi + 3]; ret; 
0x000000000042b9ee: jne 0x2bab0; test al, 0x40; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b9f6: jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b8de: jne 0x2bac0; test dl, 0x40; jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x000000000042b9a7: jne 0x2baf0; test dh, 4; jne 0x2b8a0; lea rax, [rdi + 0xb]; ret; 
0x000000000042ba40: jne 0x2bb20; test ah, 0x40; jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x000000000042ba49: jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x000000000042b961: jne 0x2bb30; test dh, 0x40; jne 0x2b8a0; lea rax, [rdi + 0xf]; ret; 
0x000000000042bd81: jne 0x2bd87; vzeroupper; ret; 
0x000000000042c901: jne 0x2c907; vzeroupper; ret; 
0x000000000042ea5c: jne 0x2ea40; xor eax, eax; sub eax, ecx; ret; 
0x000000000042fe2b: jne 0x2fe31; vzeroupper; ret; 
0x0000000000430ec1: jne 0x30ec7; vzeroupper; ret; 
0x0000000000431257: jne 0x3123b; xor eax, eax; vzeroupper; ret; 
0x000000000043189c: jne 0x318a2; vzeroupper; ret; 
0x0000000000431f0f: jne 0x31ef9; xor eax, eax; ret; 
0x00000000004352ec: jne 0x352f2; vzeroupper; ret; 
0x00000000004355e3: jne 0x355e9; xor rax, rax; ret; 
0x0000000000435998: jne 0x35988; xor eax, eax; ret; 
0x0000000000435c61: jne 0x35c50; ret; 
0x0000000000435c58: jne 0x35c70; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d11: jne 0x35d00; ret; 
0x0000000000435d08: jne 0x35d20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x0000000000435e81: jne 0x35e70; lea rax, [rcx - 1]; ret; 
0x0000000000435e78: jne 0x35e90; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x35e70; lea rax, [rcx - 1]; ret; 
0x0000000000435fd1: jne 0x35fc0; sub rax, 1; ret; 
0x0000000000435fc8: jne 0x35fe0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35fc0; sub rax, 1; ret; 
0x00000000004361a9: jne 0x361d8; add rsp, 0x110; pop rbx; ret; 
0x0000000000436775: jne 0x36734; ret; 
0x0000000000436769: jne 0x3674d; lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x00000000004367df: jne 0x36804; add rsp, 0x20; pop rbx; ret; 
0x0000000000436b1b: jne 0x36b86; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043772f: jne 0x37735; vzeroupper; ret; 
0x0000000000437a73: jne 0x37a79; xor rax, rax; ret; 
0x0000000000437cf4: jne 0x37d10; xor eax, eax; add rsp, 8; ret; 
0x0000000000437d09: jne 0x37d28; xor eax, eax; ret; 
0x0000000000438517: jne 0x38529; add rsp, 0x28; ret; 
0x000000000043862b: jne 0x386e3; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000439057: jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390e6: jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439187: jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393ad: jne 0x393b4; add rsp, 0x28; ret; 
0x00000000004393ca: jne 0x393e0; mov eax, 9; syscall; 
0x0000000000439986: jne 0x39960; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000439f38: jne 0x39f40; ret; 
0x0000000000439f58: jne 0x39f60; ret; 
0x000000000043a39c: jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a4ca: jne 0x3a4d6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000043a55a: jne 0x3a566; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000043a60f: jne 0x3a640; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000043a631: jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000043a758: jne 0x3a763; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000043a7d2: jne 0x3a82b; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000043ab5f: jne 0x3ab68; ret; 
0x000000000043af72: jne 0x3af90; lea rdx, [r9 + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000043b077: jne 0x3b088; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x000000000043b5c7: jne 0x3b5e0; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043c49c: jne 0x3c510; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000043c4e0: jne 0x3c526; add rsp, 0x110; pop rbx; ret; 
0x000000000043c586: jne 0x3c591; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447988: jne 0x479bb; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a456: jne 0x4a460; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000044a6a8: jne 0x4a6eb; mov eax, edx; add rsp, 0x148; ret; 
0x000000000044a6fb: jne 0x4a708; add rsp, 8; ret; 
0x000000000044ae4b: jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af14: jne 0x4af1e; add rsp, 0xd8; ret; 
0x000000000044af40: jne 0x4af51; mov qword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x00000000004501a0: jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000455e7b: jne 0x55f1a; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000456a71: jne 0x56a60; ret; 
0x000000000045700a: jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004572ab: jne 0x57225; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000457413: jne 0x57395; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000457778: jne 0x57790; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004577d9: jne 0x57820; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000457c70: jne 0x57c78; add rsp, 0x10; pop rbx; ret; 
0x0000000000457cf8: jne 0x57cdd; neg eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000457cb2: jne 0x57d08; mov r9d, 0xffffffff; xor r8d, r8d; mov edx, ebp; mov eax, 0xca; syscall; 
0x0000000000457db5: jne 0x57e00; xor cl, 0x86; mov esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000457e8e: jne 0x57e96; add rsp, 0x10; pop rbx; ret; 
0x0000000000458999: jne 0x588cf; sub dword ptr [rdi + 4], 1; je 0x588f0; xor eax, eax; ret; 
0x00000000004588c5: jne 0x588cf; test eax, eax; jne 0x58bb0; mov eax, 1; ret; 
0x0000000000458bf6: jne 0x58a5a; sub dword ptr [rdi + 4], 1; je 0x58bbd; mov eax, 0x83; ret; 
0x00000000004588c9: jne 0x58bb0; mov eax, 1; ret; 
0x0000000000458fbf: jne 0x59000; mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000458ff6: jne 0x59067; add rsp, 0x98; ret; 
0x0000000000459780: jne 0x5975d; and ch, 4; lea rdx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x0000000000459807: jne 0x5981e; add byte ptr [rax], al; cmove rdx, rax; mov rax, rdx; ret; 
0x0000000000459ea2: jne 0x59e7d; and ch, 4; lea rdx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x000000000045a23b: jne 0x5a241; vzeroupper; ret; 
0x000000000045ac45: jne 0x5ad20; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045ace7: jne 0x5ad40; xor eax, eax; ret; 
0x000000000045acb7: jne 0x5ad60; xor eax, eax; ret; 
0x000000000045b157: jne 0x5ae50; ret; 
0x000000000045b088: jne 0x5ae50; xor eax, eax; vzeroupper; ret; 
0x000000000045af93: jne 0x5aec0; vzeroupper; ret; 
0x000000000045ae49: jne 0x5aec3; vzeroupper; ret; 
0x000000000045afc1: jne 0x5b004; vzeroupper; ret; 
0x000000000045aff6: jne 0x5b040; vzeroupper; ret; 
0x000000000045b10d: jne 0x5b0f0; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b0d8: jne 0x5b0f0; ret; 
0x000000000045b557: jne 0x5b250; ret; 
0x000000000045b261: jne 0x5b267; vzeroupper; ret; 
0x000000000045b50d: jne 0x5b4f0; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045b4d8: jne 0x5b4f0; ret; 
0x000000000045b5a7: jne 0x5b5b0; ret; 
0x000000000045b7d8: jne 0x5b6a4; ret; 
0x000000000045b6a1: jne 0x5b6aa; ret; 
0x000000000045b6d6: jne 0x5b700; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000045b806: jne 0x5b80d; ret; 
0x000000000045b857: jne 0x5b86c; ret; 
0x000000000045b8e0: jne 0x5b8eb; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000045b8b1: jne 0x5b8f0; xor eax, eax; ret; 
0x000000000045b951: jne 0x5b954; ret; 
0x000000000045ba24: jne 0x5ba27; ret; 
0x000000000045be3b: jne 0x5be41; vzeroupper; ret; 
0x000000000045c2f1: jne 0x5c302; kmovq rax, k4; bsr rax, rax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000045c765: jne 0x5c724; ret; 
0x000000000045c759: jne 0x5c73d; lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x000000000045c7c0: jne 0x5c79d; and ch, 4; lea rdx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000045c82a: jne 0x5c828; push rsi; ret 0x7420; 
0x000000000045c854: jne 0x5c852; dec dword ptr [rax - 0x73]; adc eax, 0xfffc6b62; cmove rax, rdx; ret; 
0x000000000045c84b: jne 0x5c862; and ch, 4; lea rax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x000000000045ca6d: jne 0x5ca60; ret; 
0x000000000045ce64: jne 0x5ce6a; vzeroupper; ret; 
0x000000000045d6db: jne 0x5d6e1; vzeroupper; ret; 
0x000000000045e155: jne 0x5e230; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045e1f7: jne 0x5e260; xor eax, eax; ret; 
0x000000000045e1c7: jne 0x5e2a0; xor eax, eax; ret; 
0x000000000045e443: jne 0x5e469; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000045e737: jne 0x5e772; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000045e8a5: jne 0x5e880; mov eax, edi; ret; 
0x000000000045e929: jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea1f: jne 0x5ea29; movzx eax, al; add rsp, 0x58; ret; 
0x000000000045ea7c: jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000045eb93: jne 0x5ebb3; mov eax, edx; add rsp, 0x38; ret; 
0x000000000045f71a: jne 0x5f6bc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000460893: jne 0x60868; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x60868; ret; 
0x000000000046088d: jne 0x60868; cmp dword ptr [rdx + 8], 5; jne 0x60868; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x60868; ret; 
0x000000000046089c: jne 0x60868; ret; 
0x00000000004646ae: jne 0x64698; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000464708: jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x0000000000464e6a: jne 0x64da8; movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x45c]; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x000000000046624b: jne 0x66260; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x0000000000466297: jne 0x6629b; pop rbx; ret; 
0x00000000004662db: jne 0x662e0; pop rbx; ret; 
0x0000000000466766: jne 0x6676a; call rax; 
0x0000000000466c67: jne 0x66bf0; add al, byte ptr [rax]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x0000000000466e31: jne 0x66e35; call rax; 
0x0000000000466f31: jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x000000000046763e: jne 0x67642; call rax; 
0x00000000004677ca: jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000468197: jne 0x68180; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000468338: jne 0x68370; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000004683d8: jne 0x68410; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000046902a: jne 0x68ffa; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x0000000000469731: jne 0x69760; add rsp, 0x38; ret; 
0x00000000004697e8: jne 0x697f0; add rsp, 0x20; pop rbx; ret; 
0x00000000004698ff: jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a9: jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a29: jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469af5: jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469be5: jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046b117: jne 0x6b15e; leave; ret; 
0x000000000046b462: jne 0x6b478; test rdx, rdx; jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046b467: jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046b512: jne 0x6b4f8; mov eax, 1; ret; 
0x000000000046b50b: jne 0x6b4fe; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x000000000046b4f1: jne 0x6b508; test rsi, rsi; jne 0x6b520; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000046b4f6: jne 0x6b520; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000046b62b: jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000046b73b: jne 0x6b778; xor eax, eax; ret; 
0x000000000046b7a4: jne 0x6b7b0; xend; xor eax, eax; ret; 
0x000000000046bd03: jne 0x6bd40; add rsp, 0x118; ret; 
0x000000000046c4a1: jne 0x6cb50; ret; 
0x000000000046cfff: jne 0x6cff0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046d0be: jne 0x6d04b; xor r10d, r10d; mov qword ptr [rip + 0x377fe], r9; mov rax, r10; add rsp, 0x28; ret; 
0x000000000046d216: jne 0x6d1a0; ret; 
0x000000000046dc35: jne 0x6dc20; ret; 
0x000000000046dd12: jne 0x6dd00; mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x000000000046e425: jne 0x6e431; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000046f2a8: jne 0x6f2ad; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000470298: jne 0x7038a; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000047063a: jne 0x70680; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004706e3: jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707b5: jne 0x707bc; add rsp, 0x38; ret; 
0x0000000000470825: jne 0x7082c; add rsp, 0x38; ret; 
0x000000000047090b: jne 0x70912; add rsp, 0x38; ret; 
0x0000000000470970: jne 0x70977; add rsp, 0x38; ret; 
0x0000000000470a03: jne 0x70a0f; add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000470a86: jne 0x70a92; add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000470b28: jne 0x70b34; add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000470bab: jne 0x70bb7; add rsp, 0x38; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000472b59: jne 0x72b65; add rsp, 0x28; ret; 
0x0000000000472ee7: jne 0x73028; mov rax, rcx; add rsp, 0x38; ret; 
0x00000000004732cc: jne 0x732d5; cmp qword ptr [r9 + 0x38], 0; je 0x7332a; add rsp, 0x18; ret; 
0x00000000004754a5: jne 0x754bb; lea rdx, [rip + 0x36f82]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x00000000004754fc: jne 0x75510; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x00000000004758eb: jne 0x758dd; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475a8f: jne 0x75a81; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475be3: jne 0x75bd5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475c67: jne 0x75c59; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e35: jne 0x75e27; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000475e87: jne 0x75e79; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475f5a: jne 0x75f4c; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000477618: jne 0x77620; ret; 
0x0000000000477948: jne 0x77950; ret; 
0x00000000004077cb: jne 0x77a4; mov byte ptr [rsi], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000478275: jne 0x78260; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004782c0: jne 0x78298; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004783d5: jne 0x783b8; pop rbx; ret; 
0x00000000004784db: jne 0x784c8; call 0x1d050; test rbx, rbx; jne 0x784cd; pop rbx; ret; 
0x00000000004784e5: jne 0x784cd; pop rbx; ret; 
0x00000000004789ae: jne 0x78990; pop rbx; pop rbp; pop r12; ret; 
0x000000000040872d: jne 0x8708; ret; 
0x0000000000408764: jne 0x8770; pop rbx; ret; 
0x0000000000409878: jne 0x9860; mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000040a5e4: jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6b3: jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb44: jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000040fc84: jne 0xfcc4; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000435350: jne 0xfffffffff36ec816; bsf eax, eax; ret; 
0x0000000000437790: jne 0xfffffffff36eec56; bsf eax, eax; ret; 
0x0000000000410a75: jno 0x10a77; add cl, ch; ret 0xfffe; 
0x00000000004206a0: jno 0x206a0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208da: jno 0x208da; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420a41: jno 0x20a49; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420b91: jno 0x20c0f; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b98: jno 0x20c16; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b9f: jno 0x20c1d; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba6: jno 0x20c24; adc qword ptr [rdi - 8], rdi; ret; 
0x000000000045c6c3: jno 0x5c6bd; add al, 0; ret; 
0x000000000045c86f: jno 0x5c86d; dec dword ptr [rax - 0x73]; add eax, 0xfffc7387; cmove rax, rdx; ret; 
0x000000000045e902: jno 0x5e908; add byte ptr [rax], al; je 0x5e965; mov eax, 0x101; syscall; 
0x000000000046a114: jno 0x6a15f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046e203: jno 0x6e204; jmp qword ptr [rsi + 0x2e]; 
0x000000000041ea01: jnp 0x1ea55; add byte ptr [rax], al; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000042427f: jnp 0x24214; rol ah, 0xc2; jp 0x2427d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x00000000004243ff: jnp 0x24394; rol ah, 0xc2; jp 0x243fd; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x00000000004544b9: jnp 0x558edbd3; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000405e24: jnp 0x5e2e; dec dword ptr [rdi]; xchg ebp, eax; ret 0x3145; 
0x0000000000405e60: jnp 0x5e6a; dec dword ptr [rdi]; xchg ebp, eax; ret 0xc2eb; 
0x0000000000469c11: jnp 0x69c24; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000470751: jnp 0x7070f; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000044e4d9: jnp 0xffffffff894675f3; adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000044e25c: jnp 0xffffffff89467876; adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000044e889: jnp 0xffffffff894679a3; adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000044e792: jnp 0xffffffff89467dac; adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000041e6ae: jns 0x1e69e; and ch, 2; lea rdx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e7ae: jns 0x1e79e; and ch, 2; lea rdx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e8ae: jns 0x1e89e; and ch, 2; lea rdx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x00000000004206a7: jns 0x206a8; ret; 
0x00000000004208e1: jns 0x208e2; ret; 
0x0000000000420a48: jns 0x20a51; ret; 
0x0000000000422a19: jns 0x22a6b; ret; 
0x000000000042625b: jns 0x26259; ret 0x41c4; 
0x00000000004262b3: jns 0x262b1; ret 0x41c4; 
0x0000000000426318: jns 0x26316; ret 0x41c4; 
0x0000000000426369: jns 0x26367; ret 0x41c4; 
0x00000000004263c9: jns 0x263c7; ret 0x41c4; 
0x000000000042641b: jns 0x26419; ret 0x41c4; 
0x0000000000426c7b: jns 0x26c79; ret 0x41c4; 
0x0000000000426cd3: jns 0x26cd1; ret 0x41c4; 
0x0000000000426d38: jns 0x26d36; ret 0x41c4; 
0x0000000000426d89: jns 0x26d87; ret 0x41c4; 
0x0000000000426de9: jns 0x26de7; ret 0x41c4; 
0x0000000000426e3b: jns 0x26e39; ret 0x41c4; 
0x00000000004556ad: jns 0x556b2; add byte ptr [rbx + 0xb], dh; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000045c6b3: jns 0x5c6ad; add al, 0; ret; 
0x000000000046c534: jns 0x6c52f; jmp qword ptr [rsi + 0xf]; 
0x0000000000470913: jns 0x708b9; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004732d0: jns 0x7330a; add byte ptr [rbp + rdx*2 + 0x48], dh; add esp, 0x18; ret; 
0x000000000047343a: jns 0x733f2; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000457b39: jns 0xce5ff07; cmp eax, 4; je 0x57b21; ret; 
0x0000000000416ea9: jo 0x16ec3; mov rcx, rsi; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000041ca7e: jo 0x1ca88; add byte ptr [rax], al; cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000043adff: jo 0x3ae49; cmp dword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000043ba35: jo 0x3ba6f; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x00000000004657cc: jo 0x657f3; std; call qword ptr [rbp + 0x48]; 
0x000000000046dcb2: jo 0x6dcbc; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x6dca1; ret; 
0x000000000041eb36: jp 0x1eb0b; or byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x000000000041f960: jp 0x1f982; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000042104c: jp 0x2104f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000421896: jp 0x21899; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000422035: jp 0x22047; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000424284: jp 0x2427d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000424404: jp 0x243fd; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000043c5c2: jp 0x3c55d; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; ret; 
0x0000000000458872: jp 0x5882a; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045c632: jp 0x5c64f; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000460890: jp 0x6089a; add eax, 0x7a81d375; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000460896: jp 0x608a4; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000041280d: js 0x12810; ret; 
0x0000000000412d58: js 0x12d87; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000418057: js 0x1808a; rcr byte ptr [rbx - 0x77], cl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004191d4: js 0x191f6; add byte ptr [rdi + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x000000000041f6a3: js 0x1f6c0; and edx, 8; lea rax, [rip + 0x164c1]; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x00000000004225f0: js 0x22622; ret; 
0x000000000042b3f7: js 0x2b3ec; bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x000000000042b41e: js 0x2b415; leave; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000042b44e: js 0x2b445; leave; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004358b4: js 0x358ca; jae 0x294b989c; ret 0xc748; 
0x000000000043930f: js 0x392e2; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000043af82: js 0x3af88; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000043fbf4: js 0x3fbf2; jae 0x3fc68; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000464038: js 0x64056; mov eax, 0xca; syscall; 
0x000000000046b824: js 0x6b82e; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000046f2df: js 0x6f2fd; mov eax, 0xca; syscall; 
0x000000000046f4fb: js 0x6f519; mov eax, 0xca; syscall; 
0x0000000000470626: js 0x7062c; add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004728de: js 0x7293b; pop rbp; pop r12; pop r13; ret; 
0x0000000000472a54: js 0x72a72; mov eax, 0xca; syscall; 
0x00000000004756cb: js 0x756cf; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004756db: js 0x756df; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047626e: js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e0e: js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x00000000004094bf: js 0x98c0; mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000043103e: kmovd eax, k0; sarx eax, eax, edx; test eax, eax; je 0x30f67; tzcnt eax, eax; ret; 
0x000000000042c0e8: kmovd eax, k0; shl rcx, 0x20; or rax, rcx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042425b: kmovd eax, k0; test eax, eax; je 0x242e0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000004243db: kmovd eax, k0; test eax, eax; je 0x24460; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042bf70: kmovd eax, k0; test eax, eax; je 0x2bfd0; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000430eff: kmovd eax, k0; test eax, eax; je 0x30f60; tzcnt eax, eax; ret; 
0x000000000045ce9f: kmovd eax, k0; test eax, eax; je 0x5cf00; tzcnt eax, eax; ret; 
0x000000000045a663: kmovd eax, k0; tzcnt eax, eax; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a929: kmovd eax, k0; tzcnt eax, eax; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045db3b: kmovd eax, k0; tzcnt eax, eax; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045de06: kmovd eax, k0; tzcnt eax, eax; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000043794b: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bfb5: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042bf85: kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045c15d: kmovd eax, k1; test eax, eax; je 0x5c0f4; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c0fb: kmovd eax, k1; test eax, eax; je 0x5c109; bsr eax, eax; add rax, rsi; ret; 
0x000000000045b5a1: kmovd eax, k1; test eax, eax; jne 0x5b5b0; ret; 
0x000000000045b800: kmovd eax, k1; test eax, eax; jne 0x5b80d; ret; 
0x000000000045b851: kmovd eax, k1; test eax, eax; jne 0x5b86c; ret; 
0x000000000045c24a: kmovd eax, k4; test eax, eax; je 0x5c110; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x000000000045b7d2: kmovd ecx, k1; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b69b: kmovd ecx, k1; test ecx, ecx; jne 0x5b6aa; ret; 
0x00000000004378d1: kmovd edx, k2; shl eax, 8; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000430ff7: kmovd edx, k2; shl rax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000423cd1: kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423a9e: kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000043101c: kmovq rax, k0; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c2f3: kmovq rax, k4; bsr rax, rax; lea rax, [rsi + rax + 0x40]; ret; 
0x000000000042bfb0: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042bf80: kord k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000437947: kunpckbw k0, k1, k0; kmovd eax, k0; tzcnt eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004306ed: lahf; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000477ccd: lahf; out 0xff, al; dec dword ptr [rcx + 0x74ff3cc1]; ja 0x77c61; ret 0xe283; 
0x0000000000435387: lahf; ret; 
0x00000000004370f7: lahf; shr eax, 2; vzeroupper; ret; 
0x000000000045c134: lea eax, [rax + rax + 0x20]; ret; 
0x000000000045c25a: lea eax, [rax + rax + 0x60]; ret; 
0x000000000045780e: lea eax, [rax + rax*4]; mov qword ptr [rdx + 0x40], rsi; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577dc: lea eax, [rax + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000437114: lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000437104: lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x00000000004370f4: lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x00000000004370d4: lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x0000000000424734: lea eax, [rax + rdi + 0x10]; ret; 
0x0000000000424744: lea eax, [rax + rdi + 0x20]; ret; 
0x0000000000424714: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000045bb07: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ba47: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000040193b: lea eax, [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x000000000040ee4c: lea eax, [rax]; add cl, ch; xchg esi, eax; call 0x1f10ee55; add al, bpl; ret; 
0x0000000000401c91: lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x0000000000401845: lea eax, [rbx + 1]; pop rbx; ret; 
0x000000000046ba38: lea eax, [rcx + rax + 0x4000]; ret; 
0x00000000004377d4: lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377c4: lea eax, [rcx + rax - 0x19]; ret; 
0x00000000004353a4: lea eax, [rcx + rax - 0x21]; ret; 
0x0000000000435394: lea eax, [rcx + rax - 0x41]; ret; 
0x0000000000435384: lea eax, [rcx + rax - 0x61]; ret; 
0x0000000000435374: lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377e4: lea eax, [rcx + rax - 9]; ret; 
0x00000000004225a0: lea eax, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000435e84: lea eax, [rcx - 1]; ret; 
0x0000000000401939: lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x00000000004258bc: lea eax, [rdi + 0x10]; ret; 
0x00000000004258d1: lea eax, [rdi + 0x11]; ret; 
0x00000000004258ef: lea eax, [rdi + 0x12]; ret; 
0x000000000042590f: lea eax, [rdi + 0x13]; ret; 
0x0000000000425932: lea eax, [rdi + 0x14]; ret; 
0x0000000000425951: lea eax, [rdi + 0x15]; ret; 
0x0000000000425971: lea eax, [rdi + 0x16]; ret; 
0x0000000000425991: lea eax, [rdi + 0x17]; ret; 
0x00000000004259b4: lea eax, [rdi + 0x18]; ret; 
0x00000000004259d9: lea eax, [rdi + 0x19]; ret; 
0x00000000004259f7: lea eax, [rdi + 0x1a]; ret; 
0x0000000000425a17: lea eax, [rdi + 0x1b]; ret; 
0x0000000000425a33: lea eax, [rdi + 0x1c]; ret; 
0x0000000000425a53: lea eax, [rdi + 0x1d]; ret; 
0x0000000000425a73: lea eax, [rdi + 0x1e]; ret; 
0x0000000000425a93: lea eax, [rdi + 0x1f]; ret; 
0x000000000042580d: lea eax, [rdi + 0xa]; ret; 
0x000000000042582d: lea eax, [rdi + 0xb]; ret; 
0x000000000042584f: lea eax, [rdi + 0xc]; ret; 
0x000000000042586f: lea eax, [rdi + 0xd]; ret; 
0x000000000042588f: lea eax, [rdi + 0xe]; ret; 
0x00000000004258a9: lea eax, [rdi + 0xf]; ret; 
0x0000000000425247: lea eax, [rdi + 1]; ret; 
0x0000000000424a47: lea eax, [rdi + 1]; vzeroupper; ret; 
0x000000000042525b: lea eax, [rdi + 2]; ret; 
0x0000000000424a5b: lea eax, [rdi + 2]; vzeroupper; ret; 
0x0000000000425265: lea eax, [rdi + 3]; ret; 
0x0000000000424a75: lea eax, [rdi + 3]; vzeroupper; ret; 
0x0000000000425788: lea eax, [rdi + 4]; ret; 
0x000000000042579d: lea eax, [rdi + 5]; ret; 
0x00000000004257bb: lea eax, [rdi + 6]; ret; 
0x00000000004257c7: lea eax, [rdi + 7]; ret; 
0x00000000004257da: lea eax, [rdi + 8]; ret; 
0x00000000004257ef: lea eax, [rdi + 9]; ret; 
0x0000000000437928: lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000437a13: lea eax, [rdi + rax + 0x18]; ret; 
0x00000000004242a5: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045a6c5: lea eax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000045bc05: lea eax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004246fd: lea eax, [rdi + rax + 0x30]; ret; 
0x00000000004242b5: lea eax, [rdi + rax + 0x40]; ret; 
0x000000000045a6ad: lea eax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x00000000004242c5: lea eax, [rdi + rax + 0x60]; ret; 
0x00000000004242d5: lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045a995: lea eax, [rdi + rax + 0xa0]; ret; 
0x000000000045a9a5: lea eax, [rdi + rax + 0xc0]; ret; 
0x000000000045a978: lea eax, [rdi + rax + 0xe0]; ret; 
0x000000000045bbe4: lea eax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000437969: lea eax, [rdi + rax + 8]; ret; 
0x000000000042438b: lea eax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004243a5: lea eax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x0000000000424398: lea eax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000045da25: lea eax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da35: lea eax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da45: lea eax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da55: lea eax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045de75: lea eax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000045de85: lea eax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045de5b: lea eax, [rdi + rax*4 + 0xe0]; ret; 
0x000000000045d9b7: lea eax, [rdi + rax*4]; ret; 
0x000000000045db95: lea eax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000042b64c: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042c197: lea eax, [rdi + rax]; ret; 
0x000000000042527d: lea eax, [rdi + rdx]; ret; 
0x0000000000424a8d: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000469648: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x69658; ret; 
0x000000000044df78: lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000004251c5: lea eax, [rdi]; ret; 
0x00000000004249c5: lea eax, [rdi]; vzeroupper; ret; 
0x0000000000424d79: lea eax, [rdi]; xtest; jne 0x24d84; vzeroupper; ret; 
0x0000000000476279: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000043adfc: lea eax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000041662e: lea eax, [rdx + rdi]; ret; 
0x00000000004019a7: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000041ed2c: lea eax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000045c7f2: lea eax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ed6f: lea eax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ee21: lea eax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ee0f: lea eax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041edc7: lea eax, [rip + 0x12293]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041ee8c: lea eax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x000000000045978d: lea eax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000041eea1: lea eax, [rip + 0x13019]; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000043673c: lea eax, [rip + 0x132e]; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x0000000000459805: lea eax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041e85d: lea eax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ef11: lea eax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000041f6a9: lea eax, [rip + 0x164c1]; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041eeff: lea eax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041eeb7: lea eax, [rip + 0x16723]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x000000000041e75d: lea eax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000045c7cd: lea eax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000045c787: lea eax, [rip + 0x17a3]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041e65d: lea eax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ec1: lea eax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041e8bb: lea eax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x0000000000459eaf: lea eax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x0000000000459e67: lea eax, [rip + 0x2513]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x000000000041e7bb: lea eax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6bb: lea eax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8eb: lea eax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7eb: lea eax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6eb: lea eax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000045c75c: lea eax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x000000000041e88d: lea eax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e78d: lea eax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e68d: lea eax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e968: lea eax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9da: lea eax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x00000000004556b3: lea eax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000045414a: lea eax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004540b4: lea eax, [rip + 0x4dd66]; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454025: lea eax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000045358a: lea eax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000041e9b4: lea eax, [rip + 0x5026]; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041ea06: lea eax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e982: lea eax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000041ea92: lea eax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041ea6d: lea eax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000448ccc: lea eax, [rip + 0x5b94e]; mov qword ptr [rbx - 0x80], rsi; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x00000000004488f1: lea eax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x000000000043d281: lea eax, [rip + 0x689b9]; ret; 
0x000000000041eadc: lea eax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000041eb6c: lea eax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000045c771: lea eax, [rip + 0x709]; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000043aebb: lea eax, [rip + 0x70d8f]; ret; 
0x000000000043ae7f: lea eax, [rip + 0x70dcb]; ret; 
0x000000000041eb81: lea eax, [rip + 0x8369]; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000043676c: lea eax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000040e45c: lea eax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b9: lea eax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e35e: lea eax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e306: lea eax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2ae: lea eax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000045c72c: lea eax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000046ba8f: lea eax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000041ebe9: lea eax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ebae: lea eax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x00000000004597b2: lea eax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041ec61: lea eax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ec4f: lea eax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041ec07: lea eax, [rip + 0xd543]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041ecce: lea eax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x000000000041e90b: lea eax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041ece1: lea eax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000041e80b: lea eax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041eca3: lea eax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x0000000000436781: lea eax, [rip + 0xfd9]; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000041e70b: lea eax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000045c851: lea eax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x000000000045c873: lea eax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000045c2fd: lea eax, [rsi + rax + 0x40]; ret; 
0x000000000045bcb5: lea eax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd64: lea eax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000043902c: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004307c6: lea ebx, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430791: lea ebx, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430765: lea ebx, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043074f: lea ebx, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043072d: lea ebx, [rip + 0x4be5d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430708: lea ebx, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306eb: lea ebx, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430693: lea ebx, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425726: lea ebx, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256f1: lea ebx, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256c5: lea ebx, [rip + 0x56c59]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256af: lea ebx, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042568d: lea ebx, [rip + 0x56c91]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425668: lea ebx, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042564b: lea ebx, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255f3: lea ebx, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000470d21: lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000045c9fe: lea ecx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000436365: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004314d7: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x314b2; xor eax, eax; vzeroupper; ret; 
0x0000000000432197: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x00000000004101a5: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004255fe: lea ecx, [rbx + rcx]; jmp rcx; 
0x00000000004225a4: lea ecx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000042eb87: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000047296f: lea ecx, [rip + 0x22053]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x0000000000455898: lea ecx, [rip + 0x38506]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000042aed9: lea ecx, [rip + 0x54941]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429904: lea ecx, [rip + 0x55f16]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040fe51: lea ecx, [rip + 0x6ad09]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040feab: lea ecx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043ae15: lea ecx, [rip + 0x6ad85]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000422548: lea ecx, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000403ffd: lea ecx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x0000000000403843: lea ecx, [rip + 0x75917]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000414506: lea ecx, [rip + 0x92194]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000042257e: lea ecx, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000043ab6e: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000043ab57: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x00000000004362c7: lea ecx, [rsp + 0x20]; call rbx; 
0x000000000045ca02: lea ecx, [rsp + 0x28]; call rbx; 
0x000000000043650d: lea ecx, [rsp + 0x30]; call rbx; 
0x0000000000464037: lea edi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000043c28f: lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000043b8dd: lea edi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000046df28: lea edi, [rbx + rdx*8]; nop dword ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000043c22c: lea edi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004215ef: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000045d9c5: lea edi, [rdi + rsi*4]; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x0000000000457de9: lea edi, [rip + 0x230e1]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000466c65: lea edi, [rip + 0x28775]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000043d272: lea edi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x000000000043c084: lea edi, [rip + 0x41191]; mov eax, 0x15; syscall; 
0x000000000043a415: lea edi, [rip + 0x42a15]; call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x000000000043a3d5: lea edi, [rip + 0x42a35]; call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000044ace9: lea edi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x0000000000418135: lea edi, [rip + 0x62d95]; call 0x12c40; mov eax, 0x23; ret; 
0x0000000000417caf: lea edi, [rip + 0x6321b]; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000417c5a: lea edi, [rip + 0x63270]; call 0x12c40; nop dword ptr [rax]; ret; 
0x00000000004088ab: lea edi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x0000000000407c80: lea edi, [rip + 0x720fa]; mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004018f0: lea edi, [rip + 0x777ca]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000004701c8: lea edi, [rip - 0x343e]; call 0x70390; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000043d345: lea edi, [rsp + 1]; cmp rax, 0x17; ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000415e72: lea edi, [rsp + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x00000000004188f3: lea edx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000046dcb5: lea edx, [rax + 8]; cmp rcx, rsi; jb 0x6dca1; ret; 
0x0000000000468235: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000470d1b: lea edx, [rax - 1]; je 0x70d36; lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004101a9: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000040186c: lea edx, [rbx + 1]; pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x000000000043af75: lea edx, [rcx + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000043ae11: lea edx, [rdi + rdi*4]; lea rcx, [rip + 0x6ad85]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046827f: lea edx, [rdx + rcx*4]; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000468240: lea edx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000041e704: lea edx, [rip + 0x1076]; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041ed33: lea edx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ee08: lea edx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000046ba88: lea edx, [rip + 0x132]; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000045c7eb: lea edx, [rip + 0x144f]; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ee5c: lea edx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x0000000000436743: lea edx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000041eef8: lea edx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041e856: lea edx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ed68: lea edx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041e756: lea edx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e656: lea edx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ea8: lea edx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597fe: lea edx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x00000000004705a5: lea edx, [rip + 0x2416d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041e8b4: lea edx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b4: lea edx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b4: lea edx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e4: lea edx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e4: lea edx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e4: lea edx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000045c630: lea edx, [rip + 0x31b7a]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000041e894: lea edx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e794: lea edx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x00000000004754a8: lea edx, [rip + 0x36f82]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x000000000041e694: lea edx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x00000000004225ad: lea edx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000438477: lea edx, [rip + 0x44727]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000043812f: lea edx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000437fff: lea edx, [rip + 0x44a0b]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000041e961: lea edx, [rip + 0x4ad9]; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d3: lea edx, [rip + 0x4c27]; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041e9bb: lea edx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041e9ff: lea edx, [rip + 0x527b]; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e97b: lea edx, [rip + 0x545f]; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000042af27: lea edx, [rip + 0x548f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042af0d: lea edx, [rip + 0x5490d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea66: lea edx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x00000000004296d7: lea edx, [rip + 0x56143]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296bd: lea edx, [rip + 0x5615d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea8b: lea edx, [rip + 0x592f]; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041e25f: lea edx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041eae3: lea edx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000043aea5: lea edx, [rip + 0x6acf5]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043adf1: lea edx, [rip + 0x6ada9]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000040f840: lea edx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x0000000000459786: lea edx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c733: lea edx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000041eb3c: lea edx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000045c7c6: lea edx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041ebb5: lea edx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000041ec48: lea edx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041e904: lea edx, [rip + 0xe36]; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041ecaa: lea edx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000041e804: lea edx, [rip + 0xf76]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x00000000004597ab: lea edx, [rip + 0xfcf]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041f6b0: lea edx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000045c86c: lea edx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000045c858: lea edx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x00000000004215e3: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000468231: lea edx, [rsi + rsi]; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000439061: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040c52b: lea esi, [rax]; idiv edi; dec dword ptr [rcx - 0x77]; ret 0x2949; 
0x0000000000464e7a: lea esi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x00000000004760f7: lea esi, [rbx + rdi*8]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000403c88: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004674a6: lea esi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x000000000045583e: lea esi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000043d26b: lea esi, [rip + 0x400f3]; lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000453941: lea esi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417e9f: lea esi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x00000000004088a4: lea esi, [rip + 0x71936]; lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x00000000004069c7: lea esi, [rip + 0x731f7]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040681d: lea esi, [rip + 0x73215]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004069fc: lea esi, [rip + 0x73246]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406852: lea esi, [rip + 0x73264]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406877: lea esi, [rip + 0x732c3]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406660: lea esi, [rip + 0x7334e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040610f: lea esi, [rip + 0x7368f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406001: lea esi, [rip + 0x73695]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040614b: lea esi, [rip + 0x736d7]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406187: lea esi, [rip + 0x7371f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004061bc: lea esi, [rip + 0x7376e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000403d80: lea esi, [rip + 0x75742]; syscall; 
0x0000000000403cb1: lea esi, [rip + 0x75841]; syscall; 
0x0000000000401977: lea esi, [rip + 0x777a3]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004215f4: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000045b146: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b546: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5b250; ret; 
0x000000000043635c: lea esi, [rsp + 0x20]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000460671: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004094b5: lea esp, [rcx + rax]; mov rdi, r12; call rbx; 
0x00000000004307c5: lea r11, [rip + 0x4bdc4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430790: lea r11, [rip + 0x4bdf9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430764: lea r11, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043074e: lea r11, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043072c: lea r11, [rip + 0x4be5d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430707: lea r11, [rip + 0x4be82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306ea: lea r11, [rip + 0x4be9f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430692: lea r11, [rip + 0x4bef7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425725: lea r11, [rip + 0x56bf8]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256f0: lea r11, [rip + 0x56c2d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256c4: lea r11, [rip + 0x56c59]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ae: lea r11, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042568c: lea r11, [rip + 0x56c91]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425667: lea r11, [rip + 0x56cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042564a: lea r11, [rip + 0x56cd3]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255f2: lea r11, [rip + 0x56d2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004094b4: lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x00000000004760f6: lea r14, [rbx + r15*8]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000043d344: lea r15, [r12 + 1]; cmp rax, 0x17; ja 0x3d320; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000415e71: lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000046df27: lea r15, [rbx + rdx*8]; nop dword ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000042259f: lea r8d, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000422547: lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000042257d: lea r9, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004362c6: lea r9, [rsp + 0x20]; call rbx; 
0x000000000045ca01: lea r9, [rsp + 0x28]; call rbx; 
0x000000000043650c: lea r9, [rsp + 0x30]; call rbx; 
0x000000000045c133: lea rax, [r8 + rax + 0x20]; ret; 
0x000000000045c259: lea rax, [r8 + rax + 0x60]; ret; 
0x000000000045780d: lea rax, [r8 + rax*4]; mov qword ptr [rdx + 0x40], rsi; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577db: lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000424733: lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000424743: lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000424713: lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000401844: lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000046ba37: lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000435e83: lea rax, [rcx - 1]; ret; 
0x00000000004258bb: lea rax, [rdi + 0x10]; ret; 
0x00000000004258d0: lea rax, [rdi + 0x11]; ret; 
0x00000000004258ee: lea rax, [rdi + 0x12]; ret; 
0x000000000042590e: lea rax, [rdi + 0x13]; ret; 
0x0000000000425931: lea rax, [rdi + 0x14]; ret; 
0x0000000000425950: lea rax, [rdi + 0x15]; ret; 
0x0000000000425970: lea rax, [rdi + 0x16]; ret; 
0x0000000000425990: lea rax, [rdi + 0x17]; ret; 
0x00000000004259b3: lea rax, [rdi + 0x18]; ret; 
0x00000000004259d8: lea rax, [rdi + 0x19]; ret; 
0x00000000004259f6: lea rax, [rdi + 0x1a]; ret; 
0x0000000000425a16: lea rax, [rdi + 0x1b]; ret; 
0x0000000000425a32: lea rax, [rdi + 0x1c]; ret; 
0x0000000000425a52: lea rax, [rdi + 0x1d]; ret; 
0x0000000000425a72: lea rax, [rdi + 0x1e]; ret; 
0x0000000000425a92: lea rax, [rdi + 0x1f]; ret; 
0x000000000042580c: lea rax, [rdi + 0xa]; ret; 
0x000000000042582c: lea rax, [rdi + 0xb]; ret; 
0x000000000042584e: lea rax, [rdi + 0xc]; ret; 
0x000000000042586e: lea rax, [rdi + 0xd]; ret; 
0x000000000042588e: lea rax, [rdi + 0xe]; ret; 
0x00000000004258a8: lea rax, [rdi + 0xf]; ret; 
0x0000000000425246: lea rax, [rdi + 1]; ret; 
0x0000000000424a46: lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000042525a: lea rax, [rdi + 2]; ret; 
0x0000000000424a5a: lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000425264: lea rax, [rdi + 3]; ret; 
0x0000000000424a74: lea rax, [rdi + 3]; vzeroupper; ret; 
0x0000000000425787: lea rax, [rdi + 4]; ret; 
0x000000000042579c: lea rax, [rdi + 5]; ret; 
0x00000000004257ba: lea rax, [rdi + 6]; ret; 
0x00000000004257c6: lea rax, [rdi + 7]; ret; 
0x00000000004257d9: lea rax, [rdi + 8]; ret; 
0x00000000004257ee: lea rax, [rdi + 9]; ret; 
0x0000000000437927: lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a12: lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004242a4: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a6c4: lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000045bc04: lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004246fc: lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004242b4: lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6ac: lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x00000000004242c4: lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242d4: lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045a994: lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000045a9a4: lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000045a977: lea rax, [rdi + rax + 0xe0]; ret; 
0x000000000045bbe3: lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000437968: lea rax, [rdi + rax + 8]; ret; 
0x000000000042438a: lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004243a4: lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x0000000000424397: lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000045da24: lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da34: lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da44: lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da54: lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045de74: lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000045de84: lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045de5a: lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x000000000045d9b6: lea rax, [rdi + rax*4]; ret; 
0x000000000045db94: lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000042b64b: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042c196: lea rax, [rdi + rax]; ret; 
0x000000000042527c: lea rax, [rdi + rdx]; ret; 
0x0000000000424a8c: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000469647: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x69658; ret; 
0x00000000004251c4: lea rax, [rdi]; ret; 
0x00000000004249c4: lea rax, [rdi]; vzeroupper; ret; 
0x0000000000424d78: lea rax, [rdi]; xtest; jne 0x24d84; vzeroupper; ret; 
0x0000000000476278: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000043adfb: lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000041ed2b: lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000045c7f1: lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ed6e: lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ee20: lea rax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ee0e: lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041edc6: lea rax, [rip + 0x12293]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041ee8b: lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x000000000045978c: lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000041eea0: lea rax, [rip + 0x13019]; test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000043673b: lea rax, [rip + 0x132e]; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x0000000000459804: lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x000000000041e85c: lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ef10: lea rax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000041f6a8: lea rax, [rip + 0x164c1]; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041eefe: lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041eeb6: lea rax, [rip + 0x16723]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x000000000041e75c: lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000045c7cc: lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000045c786: lea rax, [rip + 0x17a3]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041e65c: lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ec0: lea rax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041e8ba: lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x0000000000459eae: lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x0000000000459e66: lea rax, [rip + 0x2513]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x000000000041e7ba: lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6ba: lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8ea: lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7ea: lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6ea: lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000045c75b: lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x000000000041e88c: lea rax, [rip + 0x35ed]; lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e78c: lea rax, [rip + 0x372d]; lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e68c: lea rax, [rip + 0x382d]; lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x000000000041e967: lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d9: lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x00000000004556b2: lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000454149: lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004540b3: lea rax, [rip + 0x4dd66]; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454024: lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000453589: lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000041e9b3: lea rax, [rip + 0x5026]; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041ea05: lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e981: lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000041ea91: lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041ea6c: lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000448ccb: lea rax, [rip + 0x5b94e]; mov qword ptr [rbx - 0x80], rsi; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x00000000004488f0: lea rax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x000000000043d280: lea rax, [rip + 0x689b9]; ret; 
0x000000000041eadb: lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000041eb6b: lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000045c770: lea rax, [rip + 0x709]; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000043aeba: lea rax, [rip + 0x70d8f]; ret; 
0x000000000043ae7e: lea rax, [rip + 0x70dcb]; ret; 
0x000000000041eb80: lea rax, [rip + 0x8369]; test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000043676b: lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000040e45b: lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b8: lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e35d: lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e305: lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2ad: lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000045c72b: lea rax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000046ba8e: lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000041ebe8: lea rax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ebad: lea rax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x00000000004597b1: lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041ec60: lea rax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ec4e: lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041ec06: lea rax, [rip + 0xd543]; mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041eccd: lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x000000000041e90a: lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041ece0: lea rax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000041e80a: lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x000000000041eca2: lea rax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x0000000000436780: lea rax, [rip + 0xfd9]; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000041e70a: lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000045c850: lea rax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x000000000045c872: lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000045c2fc: lea rax, [rsi + rax + 0x40]; ret; 
0x000000000045bcb4: lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd63: lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000043902b: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x0000000000470d20: lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004255fd: lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045c9fd: lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000436364: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004101a4: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004225a3: lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000042eb86: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000047296e: lea rcx, [rip + 0x22053]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x0000000000455897: lea rcx, [rip + 0x38506]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000042aed8: lea rcx, [rip + 0x54941]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429903: lea rcx, [rip + 0x55f16]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040fe50: lea rcx, [rip + 0x6ad09]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040feaa: lea rcx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043ae14: lea rcx, [rip + 0x6ad85]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000403ffc: lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x0000000000403842: lea rcx, [rip + 0x75917]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000414505: lea rcx, [rip + 0x92194]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000043ab6d: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000043ab56: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x000000000040fe4f: lea rcx, es:[rip + 0x6ad09]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000464036: lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000043c28e: lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000043b8dc: lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000043c22b: lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004215ee: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000045d9c4: lea rdi, [rdi + rsi*4]; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x0000000000457de8: lea rdi, [rip + 0x230e1]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000466c64: lea rdi, [rip + 0x28775]; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000043d271: lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x000000000043c083: lea rdi, [rip + 0x41191]; mov eax, 0x15; syscall; 
0x000000000043a414: lea rdi, [rip + 0x42a15]; call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x000000000043a3d4: lea rdi, [rip + 0x42a35]; call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000044ace8: lea rdi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x0000000000418134: lea rdi, [rip + 0x62d95]; call 0x12c40; mov eax, 0x23; ret; 
0x0000000000417cae: lea rdi, [rip + 0x6321b]; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000417c59: lea rdi, [rip + 0x63270]; call 0x12c40; nop dword ptr [rax]; ret; 
0x00000000004088aa: lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x0000000000407c7f: lea rdi, [rip + 0x720fa]; mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004018ef: lea rdi, [rip + 0x777ca]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000004701c7: lea rdi, [rip - 0x343e]; call 0x70390; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x0000000000468234: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000043af74: lea rdx, [r9 + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x00000000004188f2: lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000046dcb4: lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x6dca1; ret; 
0x0000000000470d1a: lea rdx, [rax - 1]; je 0x70d36; lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004101a8: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043ae10: lea rdx, [rdi + rdi*4]; lea rcx, [rip + 0x6ad85]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046827e: lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000046823f: lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000041e703: lea rdx, [rip + 0x1076]; lea rax, [rip + 0xfff]; cmovne rax, rdx; ret; 
0x000000000041ed32: lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ee07: lea rdx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000046ba87: lea rdx, [rip + 0x132]; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000045c7ea: lea rdx, [rip + 0x144f]; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ee5b: lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x0000000000436742: lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000041eef7: lea rdx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x000000000041e855: lea rdx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041ed67: lea rdx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041e755: lea rdx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e655: lea rdx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x0000000000459ea7: lea rdx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x00000000004597fd: lea rdx, [rip + 0x207c]; lea rax, [rip + 0x1575]; cmove rdx, rax; mov rax, rdx; ret; 
0x00000000004705a4: lea rdx, [rip + 0x2416d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041e8b3: lea rdx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7b3: lea rdx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6b3: lea rdx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x000000000041e8e3: lea rdx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7e3: lea rdx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6e3: lea rdx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000045c62f: lea rdx, [rip + 0x31b7a]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000041e893: lea rdx, [rip + 0x35a6]; cmove rax, rdx; ret; 
0x000000000041e793: lea rdx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x00000000004754a7: lea rdx, [rip + 0x36f82]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x000000000041e693: lea rdx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x00000000004225ac: lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000438476: lea rdx, [rip + 0x44727]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000043812e: lea rdx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000437ffe: lea rdx, [rip + 0x44a0b]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000041e960: lea rdx, [rip + 0x4ad9]; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d2: lea rdx, [rip + 0x4c27]; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041e9ba: lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000041e9fe: lea rdx, [rip + 0x527b]; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000041e97a: lea rdx, [rip + 0x545f]; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000042af26: lea rdx, [rip + 0x548f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042af0c: lea rdx, [rip + 0x5490d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea65: lea rdx, [rip + 0x54d4]; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x00000000004296d6: lea rdx, [rip + 0x56143]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296bc: lea rdx, [rip + 0x5615d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000041ea8a: lea rdx, [rip + 0x592f]; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000041e25e: lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041eae2: lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000043aea4: lea rdx, [rip + 0x6acf5]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043adf0: lea rdx, [rip + 0x6ada9]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000040f83f: lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x0000000000459785: lea rdx, [rip + 0x7d4]; lea rax, [rip + 0x12bd]; cmove rax, rdx; ret; 
0x000000000045c732: lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000041eb3b: lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000045c7c5: lea rdx, [rip + 0xc14]; lea rax, [rip + 0x175d]; cmove rax, rdx; ret; 
0x000000000041ebb4: lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000041ec47: lea rdx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000041e903: lea rdx, [rip + 0xe36]; lea rax, [rip + 0xdef]; cmovne rax, rdx; ret; 
0x000000000041eca9: lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000041e803: lea rdx, [rip + 0xf76]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x00000000004597aa: lea rdx, [rip + 0xfcf]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041f6af: lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000045c86b: lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000045c857: lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x00000000004215e2: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000439060: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000468233: lea rdx, ss:[r8 + rdx*4]; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000464e79: lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000403c87: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004674a5: lea rsi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x000000000045583d: lea rsi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000043d26a: lea rsi, [rip + 0x400f3]; lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000453940: lea rsi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417e9e: lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x00000000004088a3: lea rsi, [rip + 0x71936]; lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x00000000004069c6: lea rsi, [rip + 0x731f7]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040681c: lea rsi, [rip + 0x73215]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004069fb: lea rsi, [rip + 0x73246]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406851: lea rsi, [rip + 0x73264]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406876: lea rsi, [rip + 0x732c3]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040665f: lea rsi, [rip + 0x7334e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040610e: lea rsi, [rip + 0x7368f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406000: lea rsi, [rip + 0x73695]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040614a: lea rsi, [rip + 0x736d7]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406186: lea rsi, [rip + 0x7371f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004061bb: lea rsi, [rip + 0x7376e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000403d7f: lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403cb0: lea rsi, [rip + 0x75841]; syscall; 
0x0000000000401976: lea rsi, [rip + 0x777a3]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004215f3: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000045b145: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b545: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5b250; ret; 
0x000000000043635b: lea rsi, [rsp + 0x20]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000460670: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041c8cf: leave; add dword ptr [rax], eax; cmp rax, -1; je 0x1c8e0; add rsp, 8; ret; 
0x0000000000430b97: leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000472f32: leave; add rsp, 0x38; and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x0000000000459ec3: leave; and dword ptr [rax], eax; add bh, dh; ret 0; 
0x000000000045b8f2: leave; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000042b44b: leave; bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b41b: leave; bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000432348: leave; cmp rdx, rcx; ja 0x32327; nop; xor eax, eax; ret; 
0x000000000042b15e: leave; cmp sil, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x0000000000401c8e: leave; cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x000000000043ba7e: leave; jb 0x3ba3f; cmp rdx, r9; jae 0x3ba2f; ret; 
0x0000000000422553: leave; jmp rcx; 
0x000000000042b450: leave; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b420: leave; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000435c60: leave; jne 0x35c50; ret; 
0x0000000000435d10: leave; jne 0x35d00; ret; 
0x0000000000435fd0: leave; jne 0x35fc0; sub rax, 1; ret; 
0x000000000045b7d7: leave; jne 0x5b6a4; ret; 
0x000000000045b6a0: leave; jne 0x5b6aa; ret; 
0x0000000000423cd0: leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423a9d: leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000432196: leave; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x0000000000436a23: leave; mov dword ptr [rax], eax; add bl, ch; ret; 
0x000000000041ca86: leave; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000042e96c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042ce63: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042c3a5: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce74: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042c3c3: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce85: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c3d7: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce53: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c393: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x0000000000418836: leave; or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418856: leave; or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000418816: leave; or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x0000000000418821: leave; or byte ptr [rax], al; ret; 
0x000000000040175d: leave; ret; 
0x000000000045e46b: leave; std; jmp qword ptr [rsi - 0x70]; 
0x000000000045b7d5: leave; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b69e: leave; test ecx, ecx; jne 0x5b6aa; ret; 
0x0000000000423cd4: leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423aa2: leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x00000000004362c3: leave; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000402022: lock add cl, byte ptr [rdi]; xchg esp, eax; ret 0xca21; 
0x000000000041c593: lock add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x000000000043b6a6: lock add eax, dword ptr [rax]; add al, ch; int1; adc edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000417be3: lock cmpxchg dword ptr [rcx], esi; jne 0x17bde; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x000000000046b737: lock cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000046613b: lock inc dword ptr [r8 + 0x10]; pop rbx; pop rbp; ret; 
0x000000000042f510: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000403428: lodsb al, byte ptr [rsi]; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000045c538: lodsb al, byte ptr [rsi]; bsr eax, eax; add rax, rdi; ret; 
0x0000000000460008: lodsb al, byte ptr [rsi]; in eax, 2; add al, ch; fistp qword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000401750: lodsb al, byte ptr [rsi]; mov es, word ptr [rax]; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000434094: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045043f: lodsd eax, dword ptr [rsi]; cmp bh, bl; jmp qword ptr [rsi + 0x66]; 
0x0000000000414358: lodsd eax, dword ptr [rsi]; nop dword ptr [rax]; ret; 
0x000000000041eb76: lodsd eax, dword ptr [rsi]; ret; 
0x00000000004131f1: loope 0x131f1; jmp qword ptr [rsi + 0x66]; 
0x0000000000417a9e: loope 0x17a9f; jmp qword ptr [rsi + 0xf]; 
0x000000000041a797: loope 0x1a798; jmp qword ptr [rsi + 0xf]; 
0x000000000041ead9: loope 0x1eae3; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000041ebab: loope 0x1ebb1; lea rax, [rip + 0xca4c]; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000041ed29: loope 0x1ed33; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x0000000000420db9: loope 0x20db9; jg 0x20dc5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420e25: loope 0x20e25; jg 0x20e31; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420e86: loope 0x20e86; sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000420e94: loope 0x20e94; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000420ec4: loope 0x20ec4; jg 0x20ed0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000421055: loope 0x21055; jg 0x2105b; ret; 
0x00000000004210f2: loope 0x210f2; jg 0x21176; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x0000000000421636: loope 0x21636; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004216a2: loope 0x216a2; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421722: loope 0x21722; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000042189f: loope 0x2189f; sub byte ptr [rdi + 1], bh; ret; 
0x000000000042254f: loope 0x22557; add rcx, r9; jmp rcx; 
0x0000000000422588: loope 0x22590; add rcx, r9; jmp rcx; 
0x0000000000422585: loope 0x22596; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000423a09: loope 0x23a09; jg 0x23a15; ret; 
0x0000000000423a59: loope 0x23a59; jg 0x23a65; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000423a9f: loope 0x23a9c; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000423aa4: loope 0x23b25; jg 0x23aa9; ret; 
0x0000000000423b71: loope 0x23b71; sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000423b77: loope 0x23b77; sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000423b81: loope 0x23b81; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423b87: loope 0x23b87; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000423c46: loope 0x23c46; sub byte ptr [rdi + 7], bh; ret; 
0x0000000000423c96: loope 0x23c96; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423d55: loope 0x23d55; sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000423cd6: loope 0x23d57; sub dword ptr [rdi], edi; ret; 
0x0000000000423d91: loope 0x23d91; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423d97: loope 0x23d97; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000424380: loope 0x243a2; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000424af3: loope 0x24b3d; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004250a8: loope 0x250a8; sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x0000000000425735: loope 0x2579d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000042b4d2: loope 0x2b4d1; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000042ba4b: loope 0x2ba4d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000042c032: loope 0x2c031; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000042c0ee: loope 0x2c110; or rax, rcx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000430148: loope 0x30148; sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x000000000043075e: loope 0x306f0; bsf rdx, rdx; lea r11, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004307d5: loope 0x3083d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043101d: loope 0x3101a; xchg ebx, eax; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004311ec: loope 0x3120e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004354ed: loope 0x354ea; xchg ebx, eax; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004357e8: loope 0x3580a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000435a0d: loope 0x35a0a; xchg ebx, eax; ret; 
0x000000000043a60d: loope 0x3a611; jne 0x3a640; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000043b611: loope 0x3b617; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000457deb: loope 0x57e1d; add al, byte ptr [rax]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x00000000004588cb: loope 0x588cf; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000045a6a2: loope 0x5a6c4; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000045b10e: loope 0x5b158; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b50e: loope 0x5b558; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045c126: loope 0x5c10c; fcmovb st(0), st(4); loope 0x5c128; xchg ebx, eax; ret; 
0x000000000045c12b: loope 0x5c128; xchg ebx, eax; ret; 
0x000000000045c276: loope 0x5c25c; fcmovb st(0), st(4); loope 0x5c278; xchg ebx, eax; ret; 
0x000000000045c27b: loope 0x5c278; xchg ebx, eax; ret; 
0x000000000045c318: loope 0x5c2fe; fcmovb st(0), st(4); loope 0x5c31a; xchg ebx, eax; ret; 
0x000000000045c31d: loope 0x5c31a; xchg ebx, eax; ret; 
0x000000000045c334: loope 0x5c334; sub byte ptr [rdi + 0x58], ch; jg 0x5c39d; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000045cfe8: loope 0x5cff1; sarx eax, eax, ecx; test eax, eax; je 0x5cf07; tzcnt eax, eax; ret; 
0x000000000045db79: loope 0x5db9b; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000045efcb: loope 0x5efed; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000046a117: loope 0x6a165; mov dword ptr [rdi], ecx; ret; 
0x000000000046a148: loope 0x6a196; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000046a1bd: loope 0x6a20b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000046bffe: loope 0x6c048; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000046e247: loope 0x6e245; jmp qword ptr [rsi + 0xf]; 
0x0000000000472f38: loope 0x72f3c; sub rcx, 1; mov rax, rcx; ret; 
0x00000000004783d6: loope 0x78433; ret; 
0x000000000045e92b: mov ah, 0; add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000047567a: mov ah, 0xd7; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000045e771: mov ah, 0xe8; sbb esi, eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000450ef4: mov ah, dh; adc al, 0; add dh, dh; ret 0xf40; 
0x00000000004755b7: mov al, 0; add byte ptr [rax], al; ret; 
0x0000000000439a19: mov al, 0x41; call rdi; 
0x000000000040af94: mov al, 0x89; ret; 
0x0000000000457b59: mov al, 0xfb; dec dword ptr [rcx + 0x48a6ebc2]; mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000431265: mov al, 0xff; dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043fcd3: mov al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000425241: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000424a41: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004302e1: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000042fb11: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000045d9c7: mov bh, 0x31; sar byte ptr [rcx], 0xf2; cmovg rax, rdi; ret; 
0x00000000004018f9: mov bh, 0x48; add eax, edi; jmp rax; 
0x000000000045bd98: mov bh, 0x48; bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042b8e8: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000438131: mov bh, 0x49; add al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000447818: mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000470657: mov bh, 0x87; rol byte ptr [rdx], 1; add byte ptr [rax], al; mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x0000000000452dd5: mov bh, 0xb5; idiv rdi; jmp qword ptr [rsi - 0x77]; 
0x000000000040d093: mov bh, 0xb5; pop rsp; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000425251: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a51: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb21: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000043b63b: mov bh, 6; add bl, ch; cmovs ebp, dword ptr [rcx]; ret; 
0x000000000041a0ee: mov bh, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000437116: mov bh, bl; shr eax, 2; vzeroupper; ret; 
0x00000000004244ff: mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000045de3c: mov bl, 0x45; and byte ptr [rdi], bl; ret 0xc500; 
0x000000000044ff20: mov bl, 0x5b; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000042b49d: mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000430fcd: mov bl, 0x7d; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000424f41: mov bl, 0x7d; and byte ptr [rdi], bh; ret 0xc500; 
0x0000000000424f67: mov bl, 0x7d; and byte ptr [rdi], bh; ret; 
0x00000000004378a3: mov bl, 0x7d; and byte ptr [rdi], bl; ret 0x6200; 
0x0000000000437941: mov bl, 0x7d; and byte ptr [rdi], bl; ret; 
0x0000000000411fc8: mov bl, 0xa0; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and cl, r13b; ret; 
0x000000000040f6e7: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x6520; 
0x0000000000455573: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shl dword ptr [rax], 0x65; add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x000000000045603f: mov bl, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442d0a: mov bl, 3; add al, ch; ficom word ptr [rcx]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000044a723: mov bl, 5; add byte ptr [rax], al; je 0x4a740; mov eax, 0x13e; syscall; 
0x0000000000467154: mov byte ptr [r8 - 0x75], r9b; push rbx; adc byte ptr [rax + 3], cl; push rcx; or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x00000000004302d2: mov byte ptr [rax + 0x48], 0x83; mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043ba93: mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000043ba3b: mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000423ba3: mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000467155: mov byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 3], cl; push rcx; or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000440463: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043b755: mov byte ptr [rax - 3], 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000044a5ce: mov byte ptr [rax], al; add byte ptr [rax], al; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000043a4cf: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000423b66: mov byte ptr [rax], cl; ret; 
0x0000000000452b26: mov byte ptr [rbp + 0x1fffff1], bh; ret; 
0x000000000040c906: mov byte ptr [rbp + 0x1fffff2], bl; ret; 
0x0000000000417c87: mov byte ptr [rbp + 0x31], 0xd2; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041810f: mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000040c355: mov byte ptr [rbp - 0x8e8], bl; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x000000000040c354: mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x000000000040c35c: mov byte ptr [rbp - 0x900], al; call rax; 
0x000000000040c35b: mov byte ptr [rbp - 0x900], r8b; call rax; 
0x0000000000468283: mov byte ptr [rbx + rax], cl; add byte ptr [rax], al; mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000449098: mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000458fc6: mov byte ptr [rcx - 0x46], 8; add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000046a704: mov byte ptr [rcx - 7], ch; push qword ptr [rcx]; ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041ec9b: mov byte ptr [rcx], 0x74; adc eax, 0x4808e283; lea eax, [rip + 0xfb17]; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x0000000000407796: mov byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000045c7f4: mov byte ptr [rcx], dl; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000004258b8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308e8: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042592e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043093e: mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004259b0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309c0: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000423574: mov byte ptr [rdi + 1], dh; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000423573: mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000425256: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a56: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f6: mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb26: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000425766: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000430806: mov byte ptr [rdi + 2], dh; ret; 
0x0000000000425782: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000430822: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004257d3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000430863: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000423578: mov byte ptr [rdi + rdx - 1], dh; ret; 
0x0000000000423577: mov byte ptr [rdi + rdx - 1], sil; ret; 
0x00000000004251c1: mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x00000000004249c1: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000424d75: mov byte ptr [rdi], 0; lea rax, [rdi]; xtest; jne 0x24d84; vzeroupper; ret; 
0x0000000000430261: mov byte ptr [rdi], 0; ret; 
0x000000000042fa91: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000042fe25: mov byte ptr [rdi], 0; xtest; jne 0x2fe31; vzeroupper; ret; 
0x000000000041f7d2: mov byte ptr [rdi], cl; ret; 
0x0000000000425740: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000423571: mov byte ptr [rdi], dh; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042353c: mov byte ptr [rdi], dh; ret; 
0x0000000000423570: mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042353b: mov byte ptr [rdi], sil; ret; 
0x0000000000408ada: mov byte ptr [rdx + rcx*2], ch; mov rbp, 0x4a6c90; cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004526b9: mov byte ptr [rdx], ch; idiv bh; inc dword ptr [rcx]; ret; 
0x00000000004731b4: mov byte ptr [rip + 0x39285], 8; ret; 
0x00000000004731ad: mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x00000000004731a6: mov byte ptr [rip + 0x39291], 8; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x000000000047319f: mov byte ptr [rip + 0x39297], 8; mov byte ptr [rip + 0x39291], 8; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x0000000000473198: mov byte ptr [rip + 0x3929d], 8; mov byte ptr [rip + 0x39297], 8; mov byte ptr [rip + 0x39291], 8; mov byte ptr [rip + 0x3928b], 8; mov byte ptr [rip + 0x39285], 8; ret; 
0x000000000046c041: mov byte ptr [rip + 0x3ad18], 1; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000040160a: mov byte ptr [rip + 0xa568f], 1; pop rbp; ret; 
0x00000000004077cd: mov byte ptr [rsi], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412525: mov byte ptr [rsi], al; add al, ch; ret; 
0x000000000040d67e: mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x0000000000451554: mov ch, 0x30; idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040baea: mov ch, 0x48; idiv edi; dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x000000000040b452: mov ch, 0x48; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000452dd6: mov ch, 0x4c; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000451942: mov ch, 0x58; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040d094: mov ch, 0x5c; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000401ca3: mov ch, 0xa0; or al, byte ptr [rax]; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004789d1: mov ch, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x0000000000454c2e: mov ch, 0xff; inc dword ptr [rcx - 0x77]; ret; 
0x000000000040ee82: mov ch, 6; add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x000000000043f407: mov cl, 0x15; ret; 
0x000000000046b739: mov cl, 0x17; jne 0x6b778; xor eax, eax; ret; 
0x0000000000417be5: mov cl, 0x31; jne 0x17bde; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x000000000044a813: mov cl, 0x68; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000457e0a: mov cl, 0xeb; stosb byte ptr [rdi], al; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000045dfad: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e244: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e264: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e284: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000458db3: mov cl, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000456247: mov cl, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x0000000000405f3f: mov cl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000041a03e: mov cl, 8; add byte ptr [rcx], bh; ret 0xa7e; 
0x00000000004737c4: mov cl, byte ptr [rax + 1]; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000468242: mov cl, byte ptr [rax - 0x77]; nop; sub byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004296c5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000468281: mov cl, byte ptr [rcx + 0x30c88]; add byte ptr [rax - 0x77], cl; nop; and byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000044bd44: mov cl, byte ptr [rcx - 0x14343]; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x000000000045b912: mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000041f7c4: mov cl, byte ptr [rsi]; je 0x1f7d2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000041ff54: mov cl, byte ptr [rsi]; je 0x1ff62; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000420e5a: mov cl, byte ptr [rsi]; je 0x20e68; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004216d5: mov cl, byte ptr [rsi]; je 0x216e3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000421eef: mov cl, byte ptr [rsi]; je 0x21efd; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004224cc: mov cl, byte ptr [rsi]; je 0x224da; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x0000000000420780: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000455847: mov cs, word ptr [rax + 1]; int1; jmp rcx; 
0x000000000043ab59: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x3ab68; ret; 
0x000000000042076e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004258c4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004259c8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309d8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425760: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000430800: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000042076d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000472c98: mov dh, 0; add byte ptr [rax], al; mov eax, 1; add rsp, 0x38; ret; 
0x000000000041423d: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041421b: mov dh, 0; ret; 
0x0000000000476451: mov dh, 0x10; add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x00000000004540b0: mov dh, 0x14; add dword ptr [rax - 0x73], ecx; add eax, 0x4dd66; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b5: mov dh, 0x14; add dword ptr [rax - 0x73], ecx; add eax, 0x92f81; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2aa: mov dh, 0x14; add dword ptr [rax - 0x73], ecx; add eax, 0x9308c; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000408729: mov dh, 0x17; test dl, dl; jne 0x8708; ret; 
0x0000000000415e6e: mov dh, 0x34; and al, 0x4d; lea edi, [rsp + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000041e796: mov dh, 0x36; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000041e696: mov dh, 0x37; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000408641: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78f8c], eax; ret 0xfff0; 
0x000000000044fded: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000406d59: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000407919: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000459d9e: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000408659: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040b5ff: mov dh, 0x47; or al, 0x83; ret; 
0x000000000047343b: mov dh, 0x48; mov edx, dword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000043be17: mov dh, 0x4a; add dword ptr [rcx - 0x7d], ecx; ret 0x4801; 
0x0000000000443104: mov dh, 0x50; dec dword ptr [rbp - 0x77]; ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x000000000044d726: mov dh, 0x50; or al, 0xf6; ret 0xf40; 
0x0000000000409dd6: mov dh, 0x53; add al, byte ptr [rcx - 0x42]; sldt word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000406c89: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000455981: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000044e1b1: mov dh, 0x56; or al, 0xf6; ret 0xf01; 
0x0000000000450f37: mov dh, 0x57; or al, 0x83; ret; 
0x0000000000450ec4: mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x000000000042566a: mov dh, 0x6c; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000456246: mov dh, 0xb1; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045ea22: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000040fe58: mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040fda8: mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000405a84: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000414731: mov dh, 0xc0; neg eax; ret; 
0x0000000000401928: mov dh, 0xc1; pop rbx; ret; 
0x0000000000401998: mov dh, 0xc2; pop rbx; ret; 
0x0000000000414e31: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423ab2: mov dh, 0xc6; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423bca: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440462: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004188a6: mov dh, 0xc8; or byte ptr [rax], al; ret; 
0x000000000042e7b1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043126c: mov dh, 0xe; sub eax, ecx; ret; 
0x000000000045c94c: mov dh, 0xf3; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000458873: mov dh, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000457626: mov dh, 0xfb; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000470ca7: mov dh, 0xfd; pop rbx; pop rbp; jmp rdx; 
0x000000000042af24: mov dh, 7; lea rdx, [rip + 0x548f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296d4: mov dh, 7; lea rdx, [rip + 0x56143]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000431269: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042e7b4: mov dh, 7; sub eax, ecx; ret; 
0x0000000000437115: mov dil, r11b; shr eax, 2; vzeroupper; ret; 
0x000000000043862d: mov dl, 0; add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004261ad: mov dl, 0x29; ret 0xfec5; 
0x0000000000427218: mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x840f; 
0x0000000000427530: mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf78: mov dl, 0x46; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000045908a: mov dl, 0x57; add byte ptr [rax], al; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x000000000045b6cb: mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000042b3eb: mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000045b6bd: mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042b567: mov dl, 0x6e; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000427230: mov dl, 0x6e; and dword ptr [rsi], esp; ret 0xfbc5; 
0x0000000000417b91: mov dword ptr [0x2f8], edi; ret; 
0x000000000043b9a9: mov dword ptr [0x698], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000420776: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000420761: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000046dca8: mov dword ptr [rax + 0x10], 0; ret; 
0x0000000000456ae7: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000457168: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000416ea8: mov dword ptr [rax + 0x18], esi; mov rcx, rsi; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000045e38c: mov dword ptr [rax + 0x28], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000457164: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000468282: mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000468239: mov dword ptr [rax + 0x320], edx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000468289: mov dword ptr [rax + 0x320], edx; ret; 
0x0000000000468244: mov dword ptr [rax + 0x328], edx; ret; 
0x000000000046ffa5: mov dword ptr [rax + 0x360], edx; pop rbx; ret; 
0x000000000043ba34: mov dword ptr [rax + 0x38], esi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000457049: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000042af95: mov dword ptr [rax + 0x3a], 0xec750734; add rax, rdi; vzeroupper; ret; 
0x000000000043ba38: mov dword ptr [rax + 0x40], edx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000456aeb: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000456ab0: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000043ba30: mov dword ptr [rax + 0x48], ecx; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000043ba98: mov dword ptr [rax + 0x48], edx; ret; 
0x00000000004571b7: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000416471: mov dword ptr [rax + 0xa0], 0xffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416461: mov dword ptr [rax + 0xa8], 0; ret; 
0x000000000041cc0b: mov dword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004163ac: mov dword ptr [rax + 8], 0; ret; 
0x0000000000416eb2: mov dword ptr [rax + 8], ecx; xor eax, eax; ret; 
0x000000000046b823: mov dword ptr [rax + 8], edi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000043ae24: mov dword ptr [rax + 8], edx; ret; 
0x0000000000423b9b: mov dword ptr [rax + rdx - 4], ecx; ret; 
0x0000000000423b94: mov dword ptr [rax + rdx - 8], ecx; ret; 
0x0000000000425236: mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004302d6: mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042fb02: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000004163a5: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000044a4f0: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393e8: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000041ebec: mov dword ptr [rax], 0xc2f700; add byte ptr [rax], al; je 0x1ebc9; ret; 
0x0000000000439298: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d7df: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000041baa8: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x000000000045e498: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000412818: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000436a24: mov dword ptr [rax], eax; add bl, ch; ret; 
0x0000000000437093: mov dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000046b536: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000046b55b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000423ba1: mov dword ptr [rax], ecx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000423b99: mov dword ptr [rax], ecx; mov dword ptr [rax + rdx - 4], ecx; ret; 
0x00000000004572c5: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423b91: mov dword ptr [rax], ecx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x00000000004705cd: mov dword ptr [rax], edi; pop rbx; ret; 
0x000000000046b7e3: mov dword ptr [rax], edx; mov qword ptr [rip + 0x404d8], 0; ret; 
0x00000000004705c1: mov dword ptr [rax], edx; pop rbx; ret; 
0x0000000000476271: mov dword ptr [rax], edx; ret; 
0x00000000004756c5: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000467e5b: mov dword ptr [rbp - 0x88], ecx; add rax, rcx; call rax; 
0x000000000040bef2: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c62a: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040cc27: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c207: mov dword ptr [rbp - 0x8b8], eax; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000451999: mov dword ptr [rbp - 0x938], edx; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000451998: mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004519a0: mov dword ptr [rbp - 0x940], ebx; call rax; 
0x000000000045199f: mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004677cd: mov dword ptr [rbp - 0xa0], edx; call rax; 
0x0000000000466f34: mov dword ptr [rbp - 0xb8], edx; call rax; 
0x0000000000467e54: mov dword ptr [rbp - 0xb8], edx; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000467e4d: mov dword ptr [rbp - 0xc0], ebx; mov qword ptr [rbp - 0xb8], r10; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000416dab: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046ba6b: mov dword ptr [rbp], edx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041e3ed: mov dword ptr [rbp], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000045f0b2: mov dword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000447f0a: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000046982e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004696d3: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047065d: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x0000000000470ab9: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x00000000004158b1: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a477: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000044a458: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000415d5a: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004161de: mov dword ptr [rbx + 0x40], esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004164df: mov dword ptr [rbx + 0x48], 0; test byte ptr [rbx], 0x80; jne 0x16500; pop rbx; ret; 
0x0000000000415916: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000416daf: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041453a: mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x000000000045704c: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412d5b: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004134a5: mov dword ptr [rbx + 0x90], esi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000043b19b: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000040df50: mov dword ptr [rbx - 0x16000007], esp; idiv dil; jmp qword ptr [rsi + 0xf]; 
0x0000000000448cd3: mov dword ptr [rbx - 0x80], esi; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x000000000043e493: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000478ac6: mov dword ptr [rbx], 0; mov eax, 1; pop rbx; ret; 
0x000000000043c4f2: mov dword ptr [rbx], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000436cde: mov dword ptr [rbx], 0; pop rbx; ret; 
0x0000000000458ebe: mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000046f2ab: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000472829: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000415d5d: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000439705: mov dword ptr [rbx], eax; pop rbx; pop rbp; ret; 
0x000000000041d0be: mov dword ptr [rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000044fe36: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045716d: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000412cda: mov dword ptr [rbx], esp; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x0000000000412cd9: mov dword ptr [rbx], r12d; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x00000000004191de: mov dword ptr [rcx + 0x20], edx; add rsp, 8; ret; 
0x0000000000450402: mov dword ptr [rcx + 0x5c], 0x89485d41; clc; pop r14; ret; 
0x000000000042b105: mov dword ptr [rcx + 0x7343a40], 0x1481c75; clc; vzeroupper; ret; 
0x000000000045cb07: mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000430c37: mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x000000000044afbb: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000420777: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000420762: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000420751: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000469022: mov dword ptr [rcx], 0x1c18348; test dl, dl; jne 0x68ffa; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x000000000045cac7: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000430c17: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x0000000000405182: mov dword ptr [rcx], 0x83480288; ret 0x4101; 
0x0000000000407445: mov dword ptr [rcx], 0xff9c7ce8; dec dword ptr [rax + 0x29]; ret; 
0x00000000004384ca: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000464846: mov dword ptr [rcx], edi; mov rsi, 0xffffffffffffffff; pop rbx; mov rax, rsi; ret; 
0x0000000000464826: mov dword ptr [rcx], edi; xor esi, esi; pop rbx; mov rax, rsi; ret; 
0x000000000044a3d8: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a30c: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047550b: mov dword ptr [rcx], edx; ret; 
0x0000000000417b8c: mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004258cd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000042590b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042598d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000042592b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000043093b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004259ad: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309bd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004308fd: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004259f0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000430a00: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a10: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a20: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259d1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309e1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004259f3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000430a03: mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000046b6a1: mov dword ptr [rdi + 0x18], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004259d5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x0000000000425a13: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004309e5: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000415830: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000418014: mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000043af80: mov dword ptr [rdi + 0x478], edx; add rsp, 8; ret; 
0x0000000000415834: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157f9: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000475555: mov dword ptr [rdi + 0x98], esi; ret; 
0x00000000004106a9: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000042594d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000043095d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000004258eb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000042596d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000043091b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004257b7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000430847: mov dword ptr [rdi + 3], edx; ret; 
0x0000000000425799: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x0000000000430839: mov dword ptr [rdi + 4], edx; ret; 
0x000000000042584b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308ab: mov dword ptr [rdi + 5], edx; ret; 
0x000000000042586b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308bb: mov dword ptr [rdi + 6], edx; ret; 
0x0000000000425809: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000042588b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000430889: mov dword ptr [rdi + 7], edx; ret; 
0x000000000044af43: mov dword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x000000000046b268: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000458609: mov dword ptr [rdi + 8], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000046b1f4: mov dword ptr [rdi + 8], ecx; ret; 
0x0000000000425829: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004257eb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x000000000046b410: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000046b2d4: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000046b694: mov dword ptr [rdi + 8], edx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000043087b: mov dword ptr [rdi + 8], edx; ret; 
0x000000000046a6ad: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000420e64: mov dword ptr [rdi + rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x00000000004224d6: mov dword ptr [rdi + rdx - 1], esi; mov byte ptr [rdi], cl; ret; 
0x000000000041f7ce: mov dword ptr [rdi + rdx - 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000425278: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000424a88: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430318: mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042fb48: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000041f7db: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x00000000004224c3: mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000042529c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000424aac: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043032c: mov dword ptr [rdi + rdx - 7], ecx; ret; 
0x000000000042fb5c: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x000000000041f80c: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x00000000004224b6: mov dword ptr [rdi + rdx - 8], esi; ret; 
0x0000000000420e3a: mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000475511: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000046a1bf: mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000046a1b8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a14a: mov dword ptr [rdi - 8], ecx; ret; 
0x000000000046b469: mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046b62d: mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000458cfa: mov dword ptr [rdi], 0; xor eax, eax; add rsp, 8; ret; 
0x000000000046b4a8: mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000046b602: mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000043b0e8: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000046a144: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046b1ee: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000046a1b1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046b261: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000425785: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004257d7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x0000000000425254: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a54: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb24: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000425764: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000430804: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004257b5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000430845: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000425807: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000430887: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000425827: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000430897: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004224c1: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000420e38: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000423827: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000425272: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000424a82: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430312: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042fb42: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000425848: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425868: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425888: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000425299: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aa9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430329: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb59: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000004224b3: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000425796: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000430836: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004257e8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430878: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000423833: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000401d87: mov dword ptr [rdi], ecx; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000430825: mov dword ptr [rdi], ecx; ret; 
0x0000000000425244: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000424a44: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000425262: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000424a72: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000004257c4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000450224: mov dword ptr [rdi], edx; mov eax, ecx; ret; 
0x00000000004302e4: mov dword ptr [rdi], edx; ret; 
0x000000000042fb14: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000423f31: mov dword ptr [rdi], esi; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042075f: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000423f29: mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000042074e: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000046b691: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041f809: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000423f21: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000420773: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000041f7df: mov dword ptr [rdi], esi; ret; 
0x0000000000457841: mov dword ptr [rdx + 0x10], ecx; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x00000000004191da: mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000457812: mov dword ptr [rdx + 0x40], esi; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x000000000041450d: mov dword ptr [rdx + 0xe0], ecx; pop rbx; ret; 
0x00000000004106b7: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x000000000046b7df: mov dword ptr [rdx + 8], eax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x404d8], 0; ret; 
0x000000000043b8d2: mov dword ptr [rdx + 8], eax; mov qword ptr [rip + 0x70414], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000447f1f: mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000041cc07: mov dword ptr [rdx + rbx*2], ecx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046b4f8: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000046b562: mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000408778: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000437d32: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000046b53f: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043876a: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000470641: mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000416e11: mov dword ptr [rdx], eax; ret; 
0x0000000000457816: mov dword ptr [rdx], eax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577e0: mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000456de8: mov dword ptr [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046dca5: mov dword ptr [rdx], ecx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004733f3: mov dword ptr [rdx], edx; pop rbx; ret; 
0x00000000004783cc: mov dword ptr [rip + 0x2f79e], ebx; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x00000000004789fd: mov dword ptr [rip + 0x337d1], 0; add rsp, 8; ret; 
0x00000000004785f8: mov dword ptr [rip + 0x33a26], 0; add rsp, 8; ret; 
0x000000000046d5ed: mov dword ptr [rip + 0x372dd], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046d0c4: mov dword ptr [rip + 0x377fe], ecx; mov rax, r10; add rsp, 0x28; ret; 
0x000000000047200f: mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x000000000046dd15: mov dword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x000000000046b82a: mov dword ptr [rip + 0x40494], 0; ret; 
0x000000000046b7e6: mov dword ptr [rip + 0x404d8], 0; ret; 
0x0000000000469669: mov dword ptr [rip + 0x42c7d], 0; add rsp, 8; ret; 
0x0000000000464539: mov dword ptr [rip + 0x47d51], eax; add rsp, 8; ret; 
0x000000000046440b: mov dword ptr [rip + 0x47e7f], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045908e: mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000459083: mov dword ptr [rip + 0x4d43b], eax; call 0x5e840; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x0000000000457e34: mov dword ptr [rip + 0x4e696], eax; ret; 
0x0000000000457e23: mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000457b93: mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b83: mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b73: mov dword ptr [rip + 0x4e93b], eax; ret; 
0x0000000000457b63: mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000457bbc: mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000044a2dd: mov dword ptr [rip + 0x5c14d], eax; mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000044a2e4: mov dword ptr [rip + 0x5c14e], edx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000043b9a1: mov dword ptr [rip + 0x67a61], ebx; mov qword ptr fs:[0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000043a5c9: mov dword ptr [rip + 0x6b4b9], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043af79: mov dword ptr [rip + 0x6bde9], edx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000043af3d: mov dword ptr [rip + 0x6bded], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043c735: mov dword ptr [rip + 0x6f5ed], eax; add rsp, 0x1a8; ret; 
0x000000000043b8d6: mov dword ptr [rip + 0x70414], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000043aeb4: mov dword ptr [rip + 0x70d9e], eax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043ae67: mov dword ptr [rip + 0x70df3], eax; mov qword ptr [rip + 0x70dfc], rdi; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000043ae6e: mov dword ptr [rip + 0x70dfc], edi; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x0000000000439278: mov dword ptr [rip + 0x729ca], eax; cmp rax, rdi; jb 0x39290; xor eax, eax; ret; 
0x0000000000418924: mov dword ptr [rip + 0x8c896], eax; ret; 
0x00000000004188b4: mov dword ptr [rip + 0x8c89e], eax; ret; 
0x0000000000418911: mov dword ptr [rip + 0x8c8a1], eax; ret; 
0x00000000004188f7: mov dword ptr [rip + 0x8c8ab], edx; ret; 
0x000000000041888e: mov dword ptr [rip + 0x8c8ac], eax; ret; 
0x00000000004188a4: mov dword ptr [rip + 0x8c8b6], eax; ret; 
0x000000000041885e: mov dword ptr [rip + 0x8c8e4], eax; ret; 
0x0000000000418883: mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418853: mov dword ptr [rip + 0x8c92b], 1; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041881e: mov dword ptr [rip + 0x8c92c], eax; ret; 
0x000000000041883d: mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418833: mov dword ptr [rip + 0x8c94b], 1; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418813: mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000041ca87: mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000041720c: mov dword ptr [rip + 0x90982], 0; ret; 
0x0000000000417195: mov dword ptr [rip + 0x909fd], ebx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000418956: mov dword ptr [rip + 0x932bc], eax; ret; 
0x0000000000418873: mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000401ca1: mov dword ptr [rip + 0xaa0b5], 0x800; pop rbx; ret; 
0x0000000000401c98: mov dword ptr [rip + 0xaa0c2], eax; pop rbx; ret; 
0x0000000000401b38: mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b32: mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b2c: mov dword ptr [rip + 0xaa306], ebx; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b26: mov dword ptr [rip + 0xaa308], eax; mov dword ptr [rip + 0xaa306], ebx; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000403c98: mov dword ptr [rsi + 0x10], esi; syscall; 
0x000000000046d011: mov dword ptr [rsi + 0x18], 0; ret; 
0x000000000046d009: mov dword ptr [rsi + 0x18], edx; ret; 
0x0000000000403c8c: mov dword ptr [rsi + 8], eax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046b619: mov dword ptr [rsi + 8], eax; mov eax, 2; ret; 
0x000000000046b5ff: mov dword ptr [rsi + 8], ecx; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000478654: mov dword ptr [rsi + rbp*8], edx; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x00000000004488ed: mov dword ptr [rsi + riz*8], eax; lea rax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x0000000000423836: mov dword ptr [rsi - 2], ecx; ret; 
0x0000000000423829: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000437ce4: mov dword ptr [rsi], 0xc0854800; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000475542: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043b0f2: mov dword ptr [rsi], eax; ret; 
0x000000000044a301: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046b827: mov dword ptr [rsi], edi; mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000046b4a6: mov dword ptr [rsi], edx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000046b483: mov dword ptr [rsi], edx; ret; 
0x000000000046b5f9: mov dword ptr [rsi], edx; sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000403c95: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043a368: mov dword ptr [rsp + 0x1008], eax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004095d7: mov dword ptr [rsp + 0x10], ecx; nop dword ptr [rax + rax]; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x0000000000465481: mov dword ptr [rsp + 0x18], eax; call 0x64d70; add rsp, 0xd8; ret; 
0x0000000000476146: mov dword ptr [rsp + 0x18], ecx; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000439031: mov dword ptr [rsp + 0x20], eax; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004388c8: mov dword ptr [rsp + 0x20], eax; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x000000000045eb16: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004533da: mov dword ptr [rsp + 0x30], 0x20; jmp rax; 
0x0000000000453bd7: mov dword ptr [rsp + 0x30], 0x20; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040d676: mov dword ptr [rsp + 0x40], 0; mov byte ptr [rsp + 0x4c], 0x20; jmp rax; 
0x0000000000438748: mov dword ptr [rsp + 8], eax; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000043983f: mov dword ptr [rsp + 8], eax; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004390be: mov dword ptr [rsp + 8], eax; xor eax, eax; cmp esi, 9; je 0x390f0; mov eax, 0x48; syscall; 
0x0000000000411357: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x00000000004094f9: mov dword ptr [rsp + 8], edi; mov r15, rdi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000043983e: mov dword ptr [rsp + 8], r8d; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040119b: mov dword ptr [rsp], 0x20; syscall; 
0x0000000000472bee: mov dword ptr [rsp], eax; call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000472f7b: mov dword ptr [rsp], ecx; call 0x730c0; mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000413940: mov dword ptr [rsp], ecx; mov rdi, rbx; call rax; 
0x000000000044a4ef: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393e7: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000439297: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d7de: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000041baa7: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000045e497: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000412817: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000041d0bd: mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004384c9: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000408777: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000437d31: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000438769: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000041f7da: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000425792: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000430832: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004257e3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430873: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000425750: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004307f0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000401754: mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401005: mov eax, 0; test rax, rax; je 0x1012; call rax; 
0x000000000040157d: mov eax, 0; test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015bf: mov eax, 0; test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x0000000000439162: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000043860a: mov eax, 0x101; syscall; 
0x0000000000438593: mov eax, 0x106; syscall; 
0x0000000000438593: mov eax, 0x106; syscall; cmp eax, 0xfffff000; ja 0x385a8; xor eax, eax; ret; 
0x000000000041894c: mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0x932bc], rax; ret; 
0x00000000004019e0: mov eax, 0x10; pop rbx; ret; 
0x000000000045eb1f: mov eax, 0x10; syscall; 
0x000000000043b92f: mov eax, 0x111; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000045ead3: mov eax, 0x11; syscall; 
0x000000000045ead3: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000439237: mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000439237: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x39250; ret; 
0x000000000044a729: mov eax, 0x13e; syscall; 
0x000000000044a729: mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x4a790; ret; 
0x0000000000464e80: mov eax, 0x14; syscall; 
0x000000000043b976: mov eax, 0x14e; syscall; 
0x000000000043c08a: mov eax, 0x15; syscall; 
0x000000000041e401: mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000000457d64: mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000000417fd0: mov eax, 0x16; ret; 
0x00000000004384b0: mov eax, 0x18; syscall; 
0x00000000004384b0: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x384c0; ret; 
0x000000000043a614: mov eax, 0x19; syscall; 
0x0000000000439480: mov eax, 0x1c; syscall; 
0x0000000000439480: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x00000000004019d9: mov eax, 0x20; pop rbx; ret; 
0x0000000000418140: mov eax, 0x23; ret; 
0x0000000000470c30: mov eax, 0x26; syscall; 
0x0000000000470c30: mov eax, 0x26; syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x0000000000437d90: mov eax, 0x27; syscall; 
0x0000000000437d90: mov eax, 0x27; syscall; ret; 
0x00000000004019cb: mov eax, 0x30; pop rbx; ret; 
0x00000000004019c4: mov eax, 0x40; pop rbx; ret; 
0x000000000041e984: mov eax, 0x48000054; cmove eax, edx; ret; 
0x000000000043903a: mov eax, 0x48; syscall; 
0x00000000004388d7: mov eax, 0x4f; syscall; 
0x00000000004019bd: mov eax, 0x60; pop rbx; ret; 
0x000000000043a690: mov eax, 0x63; syscall; 
0x000000000043a690: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000041d104: mov eax, 0x64ffffb9; mov dword ptr [rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000044a4eb: mov eax, 0x64ffffff; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393e3: mov eax, 0x64ffffff; mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000439293: mov eax, 0x64ffffff; mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d7da: mov eax, 0x64ffffff; mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000041baa3: mov eax, 0x64ffffff; mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x000000000045e493: mov eax, 0x64ffffff; mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000412813: mov eax, 0x64ffffff; mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000408773: mov eax, 0x64ffffff; mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000046cfa0: mov eax, 0x64ffffff; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000469822: mov eax, 0x6a000003; add ch, al; ret; 
0x000000000045e590: mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000004019b6: mov eax, 0x80; pop rbx; ret; 
0x0000000000458c02: mov eax, 0x83; ret; 
0x0000000000447845: mov eax, 0x89000000; rcr byte ptr [rbx + 0x41], 1; pop rsp; ret; 
0x000000000040ee2a: mov eax, 0x8941ffff; ret 0xf883; 
0x000000000045e780: mov eax, 0x8f; syscall; 
0x000000000045e780: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7b0: mov eax, 0x90; syscall; 
0x000000000045e7b0: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7e0: mov eax, 0x91; syscall; 
0x000000000045e7e0: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e810: mov eax, 0x92; syscall; 
0x000000000045e810: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e840: mov eax, 0x93; syscall; 
0x000000000045e840: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x0000000000403c8f: mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000439450: mov eax, 0xa; syscall; 
0x0000000000439450: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000439420: mov eax, 0xb; syscall; 
0x0000000000439420: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x0000000000417f50: mov eax, 0xba; syscall; 
0x0000000000439270: mov eax, 0xc; syscall; 
0x0000000000458924: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417c3f: mov eax, 0xca; syscall; 
0x0000000000458f43: mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x0000000000417cdd: mov eax, 0xca; syscall; ret; 
0x0000000000457b1c: mov eax, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000417c90: mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000004182b1: mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000043a374: mov eax, 0xcc; syscall; 
0x000000000045e59c: mov eax, 0xd9; syscall; 
0x000000000045e59c: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000044a5d8: mov eax, 0xd; syscall; 
0x000000000043b8e3: mov eax, 0xda; syscall; 
0x0000000000437d00: mov eax, 0xe4; syscall; 
0x0000000000403cbe: mov eax, 0xe7; syscall; 
0x000000000041d254: mov eax, 0xe80008e9; ret; 
0x0000000000401195: mov eax, 0xe; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000417ea5: mov eax, 0xe; syscall; 
0x0000000000417f33: mov eax, 0xea; syscall; 
0x000000000041ecf8: mov eax, 0xf60008d1; ret 0x7420; 
0x00000000004384c3: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000437d2b: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000438763: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000044a511: mov eax, 0xf; syscall; 
0x000000000046b538: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000044a321: mov eax, 0xffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044a4e9: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393e1: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000439291: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d7d8: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000041baa1: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000045e491: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000412811: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000046cf9e: mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000044a381: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000044a361: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000044a341: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000046d2ca: mov eax, 0xffffffff; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416201: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000004121c4: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044ab6e: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000004560c4: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000040877a: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041281e: mov eax, 0xffffffff; ret; 
0x0000000000472c9c: mov eax, 1; add rsp, 0x38; ret; 
0x0000000000403d7a: mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403cab: mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x000000000046b55d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000046b47d: mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000044fe4a: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000041e54f: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004560a6: mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000478acc: mov eax, 1; pop rbx; ret; 
0x00000000004588cf: mov eax, 1; ret; 
0x0000000000438799: mov eax, 1; syscall; 
0x0000000000438799: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x38800; ret; 
0x0000000000439200: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x0000000000460480: mov eax, 1; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x000000000045d210: mov eax, 2; ret; 
0x000000000045d218: mov eax, 3; ret; 
0x0000000000438fd0: mov eax, 3; syscall; 
0x0000000000438fd0: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x000000000045d220: mov eax, 4; ret; 
0x000000000045d228: mov eax, 5; ret; 
0x000000000045d230: mov eax, 6; ret; 
0x000000000045d238: mov eax, 7; ret; 
0x00000000004019d2: mov eax, 8; pop rbx; ret; 
0x000000000043e328: mov eax, 8; ret; 
0x0000000000438830: mov eax, 8; syscall; 
0x0000000000438830: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x00000000004393cc: mov eax, 9; syscall; 
0x00000000004393cc: mov eax, 9; syscall; cmp rax, -0x1000; ja 0x39400; ret; 
0x000000000046402f: mov eax, dword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000418782: mov eax, dword ptr [0x10]; ret; 
0x000000000046b699: mov eax, dword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000426f8d: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b4d: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x0000000000427279: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000411c01: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000044a3db: mov eax, dword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000416338: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x000000000041ca7c: mov eax, dword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000045700d: mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000457126: mov eax, dword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000411bfa: mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046ddb3: mov eax, dword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000469681: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000469691: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000478658: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x000000000044a32f: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004556ba: mov eax, dword ptr [rax + rdi*8]; ret; 
0x000000000040e2b5: mov eax, dword ptr [rax + rdx*8]; jmp rax; 
0x00000000004488f8: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x48902; call rax; 
0x000000000046cfa5: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000456de5: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a32c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004754b9: mov eax, dword ptr [rax]; ret; 
0x0000000000416e01: mov eax, dword ptr [rax]; test rax, rax; jne 0x16df8; ret; 
0x00000000004136c2: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000415bcc: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000040418c: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043ec59: mov eax, dword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x000000000046b10b: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x6b15e; leave; ret; 
0x0000000000470d43: mov eax, dword ptr [rbp]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000466f28: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467635: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e28: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677c0: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004705c9: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004705b9: mov eax, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041596d: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041598e: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415f49: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041615b: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000000411bef: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004705a1: mov eax, dword ptr [rbx + 8]; lea rdx, [rip + 0x2416d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000426f8e: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b4e: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042727a: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000043a5c6: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x6b4b9], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042990a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000436035: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x000000000042aee2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000046470a: mov eax, dword ptr [rcx]; ret; 
0x0000000000417af1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000416e20: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000416e48: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000045777a: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000457790: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000415828: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157ed: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000044cbed: mov eax, dword ptr [rdi + 0x38]; mov r11, r8; mov rdx, r12; mov rsi, r11; mov rdi, rbx; call rax; 
0x0000000000417151: mov eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000412808: mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x12810; ret; 
0x00000000004754c5: mov eax, dword ptr [rdi + 0x90]; ret; 
0x0000000000475525: mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000456ff1: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x0000000000475565: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x00000000004755c5: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x00000000004755b5: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x0000000000475575: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x0000000000475535: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000414211: mov eax, dword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x0000000000417247: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x0000000000475f75: mov eax, dword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000041de6a: mov eax, dword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000045b8d1: mov eax, dword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x00000000004188c1: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x188d0; ret; 
0x0000000000418931: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000418901: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x18910; ret; 
0x0000000000457e21: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000457b91: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b81: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b71: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x0000000000457b61: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000418881: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418851: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x8c92b], 1; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000418831: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x8c94b], 1; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418811: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x0000000000418871: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000416e0e: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000457e31: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x0000000000418921: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x00000000004188b1: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x8c89e], rax; ret; 
0x00000000004188a1: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000046b6c6: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000458f70: mov eax, dword ptr [rdi]; test al, 2; je 0x58f80; xor eax, eax; ret; 
0x000000000046b7a0: mov eax, dword ptr [rdi]; test eax, eax; jne 0x6b7b0; xend; xor eax, eax; ret; 
0x0000000000477614: mov eax, dword ptr [rdi]; test eax, eax; jne 0x77620; ret; 
0x0000000000477944: mov eax, dword ptr [rdi]; test eax, eax; jne 0x77950; ret; 
0x00000000004296c6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b5ce: mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043aeb0: mov eax, dword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x00000000004572c7: mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046ba2e: mov eax, dword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000046bf70: mov eax, dword ptr [rip + 0x3fd2a]; ret; 
0x000000000045c6f1: mov eax, dword ptr [rip + 0x4f859]; ret; 
0x000000000045c6e1: mov eax, dword ptr [rip + 0x4f861]; ret; 
0x000000000045c6d1: mov eax, dword ptr [rip + 0x4f869]; ret; 
0x000000000045c6c1: mov eax, dword ptr [rip + 0x4f871]; ret; 
0x000000000045c6b1: mov eax, dword ptr [rip + 0x4f879]; ret; 
0x000000000045c6a1: mov eax, dword ptr [rip + 0x4f881]; ret; 
0x000000000045c691: mov eax, dword ptr [rip + 0x4f889]; ret; 
0x000000000045c681: mov eax, dword ptr [rip + 0x4f891]; ret; 
0x000000000045c671: mov eax, dword ptr [rip + 0x4f899]; ret; 
0x000000000045c661: mov eax, dword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c651: mov eax, dword ptr [rip + 0x4f8a9]; ret; 
0x000000000045c641: mov eax, dword ptr [rip + 0x4f911]; ret; 
0x0000000000457bb0: mov eax, dword ptr [rip + 0x54212]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x0000000000447721: mov eax, dword ptr [rip + 0x648f9]; ret; 
0x000000000043b0eb: mov eax, dword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000043b0e1: mov eax, dword ptr [rip + 0x6bc61]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x0000000000437ce1: mov eax, dword ptr [rip + 0x6c7a1]; test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000439341: mov eax, dword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x000000000043e441: mov eax, dword ptr [rip + 0x6db99]; ret; 
0x000000000043e431: mov eax, dword ptr [rip + 0x6dba1]; ret; 
0x000000000043a570: mov eax, dword ptr [rip + 0x7172a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000417131: mov eax, dword ptr [rip + 0x8da09]; ret; 
0x0000000000418aa0: mov eax, dword ptr [rip + 0x9316e]; test eax, eax; jne 0x18ab0; ret; 
0x000000000046675a: mov eax, dword ptr [rsi + 0x10]; add rax, qword ptr [r12]; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x000000000040db52: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x000000000046d5e8: mov eax, dword ptr [rsi + rbp - 0x18]; mov qword ptr [rip + 0x372dd], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047559a: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000443d15: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x000000000043c4f9: mov eax, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000043984c: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000441781: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x00000000004406a9: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x00000000004411c4: mov eax, dword ptr [rsp + 0x30]; call rax; 
0x0000000000408ef8: mov eax, dword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000438752: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401a7e: mov eax, dword ptr [rsp + 8]; call rax; 
0x000000000041318a: mov eax, dword ptr [rsp + 8]; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000408fa1: mov eax, dword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000472bf7: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000046cfa4: mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000438682: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004387d2: mov eax, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000438732: mov eax, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044a761: mov eax, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x000000000045e986: mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000407c87: mov eax, eax; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x00000000004019f9: mov eax, eax; ret; 
0x0000000000457b2c: mov eax, eax; syscall; 
0x0000000000434f45: mov eax, eax; vzeroupper; ret; 
0x00000000004352e7: mov eax, eax; xtest; jne 0x352f2; vzeroupper; ret; 
0x000000000043772a: mov eax, eax; xtest; jne 0x37735; vzeroupper; ret; 
0x0000000000414179: mov eax, ebp; movups xmmword ptr [rbx + 8], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004575a6: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x0000000000419f60: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046fe47: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x00000000004394f2: mov eax, ebp; pop rbx; mov esi, 2; pop rbp; pop r12; jmp rax; 
0x0000000000439528: mov eax, ebp; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004559b9: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041049c: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411eb7: mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000046b413: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000437cc7: mov eax, ebx; cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475846: mov eax, ebx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x0000000000475375: mov eax, ebx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000041993f: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414615: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419e81: mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000041e013: mov eax, ebx; pop rbx; ret; 
0x00000000004018aa: mov eax, ebx; pop rbx; shr eax, 0x16; add eax, 1; ret; 
0x000000000046b2d7: mov eax, ecx; adc eax, eax; ret; 
0x0000000000472eee: mov eax, ecx; add rsp, 0x38; ret; 
0x0000000000457b3a: mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x57b21; ret; 
0x000000000046ba28: mov eax, ecx; div rsi; mov rax, qword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000045783e: mov eax, ecx; mov qword ptr [rdx + 0x10], rcx; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000412cde: mov eax, ecx; pop rbp; pop r12; ret; 
0x0000000000401a0f: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000040194e: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x000000000040a740: mov eax, ecx; ret; 
0x0000000000412b61: mov eax, ecx; syscall; 
0x000000000045c693: mov eax, edi; add al, 0; ret; 
0x00000000004751f9: mov eax, edi; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000044ade3: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x000000000045807b: mov eax, edi; not esi; and esi, 0x80; syscall; 
0x0000000000450408: mov eax, edi; pop r14; ret; 
0x000000000045035a: mov eax, edi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000417161: mov eax, edi; ret; 
0x000000000040884a: mov eax, edx; add qword ptr [rip + 0x9eecc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044a6aa: mov eax, edx; add rsp, 0x148; ret; 
0x000000000046d0cb: mov eax, edx; add rsp, 0x28; ret; 
0x000000000045eb95: mov eax, edx; add rsp, 0x38; ret; 
0x000000000046b611: mov eax, edx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000041805b: mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000447849: mov eax, edx; pop rbx; pop r12; ret; 
0x0000000000408892: mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004019b2: mov eax, edx; pop rbx; ret; 
0x0000000000412724: mov eax, edx; ret; 
0x0000000000401aaa: mov eax, edx; syscall; 
0x000000000042350d: mov eax, edx; vzeroupper; ret; 
0x000000000046dc9f: mov eax, esi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000458fc2: mov eax, esi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000044a4c6: mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000471d72: mov eax, esi; pop r12; pop r13; pop r14; ret; 
0x0000000000471d58: mov eax, esi; pop r14; ret; 
0x00000000004355d0: mov eax, esi; ret; 
0x0000000000437d65: mov eax, esi; syscall; 
0x0000000000404029: mov eax, esp; pop r12; ret; 
0x0000000000416005: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040ffa8: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000403f8b: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000459529: mov eax, r12d; pop r12; ret; 
0x00000000004594ea: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000045807a: mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x000000000044df6d: mov eax, r8d; ret; 
0x0000000000457b2b: mov eax, r8d; syscall; 
0x0000000000412b60: mov eax, r9d; syscall; 
0x000000000043af6f: mov ebp, 0x1c750006; lea rdx, [r9 + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x0000000000452b27: mov ebp, 0x1fffff1; ret; 
0x000000000045c131: mov ebp, 0x448d49c0; add byte ptr [rax], ah; ret; 
0x000000000045978f: mov ebp, 0x48000012; cmove eax, edx; ret; 
0x0000000000408adf: mov ebp, 0x4a6c90; cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000430794: mov ebp, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000434f86: mov ebp, 0x83d72948; shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000043af7c: mov ebp, 0x89480006; xchg edi, eax; js 0x3af88; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004488f4: mov ebp, 0x8b4a0005; add al, 0xe0; test rax, rax; je 0x48902; call rax; 
0x000000000045c3ed: mov ebp, 0xc0014cc0; ret; 
0x000000000045bbbe: mov ebp, 0xc0014cc0; vzeroupper; ret; 
0x000000000045c104: mov ebp, 0xf00148c0; ret; 
0x000000000045c0d5: mov ebp, 0xf80148c0; ret; 
0x000000000045bb93: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000045be33: mov ebp, 0xf80148c0; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000042721c: mov ebp, 0xffd093fb; ret 0x840f; 
0x0000000000427534: mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000042cf7c: mov ebp, 0xffd093fb; ret 0x8b74; 
0x000000000045155e: mov ebp, 0xfffff740; call qword ptr [rbx + 0x38]; 
0x0000000000452077: mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b71: mov ebp, 0xfffff740; mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000451990: mov ebp, 0xfffff740; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000464e74: mov ebp, 0xfffffba4; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000411f63: mov ebp, 0xffffffff; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004392e3: mov ebp, 0xffffffff; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004758e6: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000443309: mov ebp, dword ptr [rbp - 0x2117fffd]; or edi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000475a96: mov ebp, dword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044a4cc: mov ebp, ecx; jmp rdx; 
0x0000000000464c2f: mov ebp, esp; mov rsi, rbp; syscall; 
0x000000000043e3c1: mov ebp, esp; std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000043b8de: mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x0000000000408ad8: mov ebx, 0x4a6c88; mov rbp, 0x4a6c90; cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000044eb01: mov ebx, 0xe9fffc1c; outsd dx, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000042bd15: mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043129d: mov ebx, 0xf44b60f; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000044c6c8: mov ebx, 0xf6000002; ret 0xf40; 
0x00000000004031c1: mov ebx, 0xf6000005; ret 0xf20; 
0x000000000040283d: mov ebx, 0xf7fffffd; ret 0; 
0x000000000040175a: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004685db: mov ebx, dword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000457d2f: mov ebx, eax; mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x000000000044cbf1: mov ebx, eax; mov rdx, r12; mov rsi, r11; mov rdi, rbx; call rax; 
0x0000000000458f09: mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f09: mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000457005: mov ebx, edi; test byte ptr [rdi], 2; jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000465f2b: mov ecx, 0x31000291; shr al, 0xfa; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000435a95: mov ecx, 0x38fffffe; or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x000000000043a5cb: mov ecx, 0x480006b4; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000045af46: mov ecx, 0x83d72948; jmp qword ptr [rax + 0x73]; 
0x0000000000448ccf: mov ecx, 0x89480005; jae 0x48c56; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x0000000000403ede: mov ecx, 0x89480008; ret; 
0x000000000041ee23: mov ecx, 0xf7000120; ret 0; 
0x0000000000474e08: mov ecx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x00000000004384c1: mov ecx, 0xffffffb8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000044a304: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000423cc7: mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423a93: mov ecx, 0xffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000419fc5: mov ecx, 0xffffffff; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x0000000000457d37: mov ecx, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x0000000000457cb5: mov ecx, 0xffffffff; xor r8d, r8d; mov edx, ebp; mov eax, 0xca; syscall; 
0x00000000004540ba: mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004146c0: mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000426f91: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b51: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042727d: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000425e0a: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426561: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xtest; jne 0x26570; vzeroupper; ret; 
0x000000000046dca2: mov ecx, dword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000467e46: mov ecx, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb8], r10; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000426f92: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b52: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042727e: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000425e0b: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426562: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xtest; jne 0x26570; vzeroupper; ret; 
0x000000000042076f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000042075c: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000042074a: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004754ff: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000457b38: mov ecx, dword ptr [rdi]; mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x57b21; ret; 
0x00000000004296c3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000464511: mov ecx, dword ptr [rip + 0x47d69]; cmp rcx, rdi; je 0x64520; ret; 
0x0000000000425904: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425924: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000430934: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430924: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000425985: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430995: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004258c5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004259e8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004309f8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a08: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a18: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259c9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309d9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425945: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430955: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004258e4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000430914: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000425965: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430975: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000425274: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000424a84: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430314: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042fb44: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000041f7d5: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000425294: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aa4: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430324: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb54: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000045b8cc: mov ecx, dword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000041f801: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000425780: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000430820: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004257d1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000430861: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000425270: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000430310: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042fb40: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000425790: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000430830: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004257e1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430871: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004257b0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000430840: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000425801: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000430881: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000425821: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000430891: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004224bb: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000420e33: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000425291: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000430321: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb51: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000425841: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425861: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425881: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004224ab: mov ecx, dword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000425761: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000430801: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043c49f: mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000441e16: mov ecx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e93: mov ecx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004422f7: mov ecx, dword ptr [rsp + 0x18]; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000444a50: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044069a: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b5: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441772: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044528f: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440ba3: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000443d06: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004422fc: mov ecx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000442efc: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000472f84: mov ecx, dword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x000000000042075b: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000043ab68: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000464703: mov ecx, eax; cmp rcx, rdx; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x0000000000436033: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x000000000044ad87: mov ecx, eax; mov rax, rcx; ret; 
0x0000000000475378: mov ecx, ebp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000475849: mov ecx, ebp; mov esi, 1; mov edi, 1; call rax; 
0x00000000004751fc: mov ecx, ebx; mov edi, 1; call rax; 
0x0000000000430b96: mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000436610: mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000041ea2d: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x1ea40; ret; 
0x000000000045974d: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x59760; ret; 
0x000000000045c78d: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x5c7a0; ret; 
0x000000000041ec0d: mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041edcd: mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eebd: mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000459e6d: mov ecx, edx; and ecx, 0x128; cmp ecx, 0x128; je 0x59e80; ret; 
0x0000000000423ab5: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423505: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000423bc6: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004220d9: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000416eac: mov ecx, esi; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000416eea: mov ecx, esi; add rcx, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000046fecf: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x0000000000402cbb: mov edi, 0x3948ffff; ret 0x1d73; 
0x0000000000401545: mov edi, 0x401655; call 0x28e0; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040cf2e: mov edi, 0x440f48c0; ret 0x5de9; 
0x000000000041e8bd: mov edi, 0x48000024; cmovne eax, edx; ret; 
0x0000000000401600: mov edi, 0x494d98; call 0x77930; mov byte ptr [rip + 0xa568f], 1; pop rbp; ret; 
0x0000000000401587: mov edi, 0x4a64d8; jmp rax; 
0x0000000000403cb9: mov edi, 0x7f; mov eax, 0xe7; syscall; 
0x0000000000435991: mov edi, 0x80fffffe; cmp al, byte ptr [rax]; jne 0x35988; xor eax, eax; ret; 
0x000000000043d5f1: mov edi, 0x890006e8; ret 0xcc80; 
0x0000000000478650: mov edi, 0x89490002; adc al, 0xee; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x000000000045c283: mov edi, 0xc0bd0f48; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000443a2d: mov edi, 0xe8fffc04; pop rdx; jae 0x43a34; jmp qword ptr [rsi + 0x2e]; 
0x0000000000438605: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043916a: mov edi, 0xffffff9c; syscall; 
0x00000000004751fe: mov edi, 1; call rax; 
0x0000000000475f80: mov edi, 1; jmp rax; 
0x0000000000417eed: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000403d75: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000403ca6: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000412b5b: mov edi, 2; mov eax, r9d; syscall; 
0x0000000000464e73: mov edi, dword ptr [rbp - 0x45c]; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x000000000045155d: mov edi, dword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x0000000000452076: mov edi, dword ptr [rbp - 0x8c0]; mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b70: mov edi, dword ptr [rbp - 0x8c0]; mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x000000000045198f: mov edi, dword ptr [rbp - 0x8c0]; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x00000000004758ee: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x0000000000475a92: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000436cd6: mov edi, dword ptr [rbx]; call 0x1d050; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000044a4c3: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000458f0c: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f0c: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000470ab1: mov edi, dword ptr [rdi]; call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000047098d: mov edi, dword ptr [rdi]; call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000408e78: mov edi, dword ptr [rdi]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000457d32: mov edi, dword ptr [rsp + 0x10]; mov r9d, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x0000000000439844: mov edi, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000401a79: mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000043c4fe: mov edi, dword ptr [rsp + 0x18]; call rax; 
0x000000000043c4a4: mov edi, dword ptr [rsp + 0x18]; call rcx; 
0x000000000045e98d: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004094c6: mov edi, dword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004388d3: mov edi, dword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x000000000044735a: mov edi, dword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443d10: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000441e20: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a5a: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000442306: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411bf: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000445299: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a4: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044177c: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440bad: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000415f7b: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044a764: mov edi, dword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x00000000004387d4: mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000476152: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760ff: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000438734: mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000415996: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041986d: mov edi, dword ptr [rsp]; mov rsi, qword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x000000000045c9f6: mov edi, dword ptr [rsp]; push 1; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000408b3d: mov edi, eax; call rax; 
0x000000000044ad56: mov edi, eax; cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x0000000000417f62: mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000417f2e: mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000438745: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000450401: mov edi, eax; pop r12; pop r13; mov rax, rdi; pop r14; ret; 
0x000000000041825d: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000046de0a: mov edi, ebp; call qword ptr [rax]; 
0x0000000000456ee3: mov edi, ebp; call qword ptr [rbx + 0x18]; 
0x000000000046df36: mov edi, ebp; call qword ptr [rbx]; 
0x000000000040adf7: mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x0000000000408a83: mov edi, ebp; call rax; 
0x00000000004095e4: mov edi, ebp; mov rdx, rbp; call rbx; 
0x000000000041861c: mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040d89f: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x000000000041587c: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x0000000000415ddd: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000041655d: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x000000000040d4ae: mov edi, ebx; call qword ptr [rbp + 0x38]; 
0x0000000000413eb5: mov edi, ebx; call qword ptr [rbp + 0x40]; 
0x00000000004146cb: mov edi, ebx; call qword ptr [rbp + 0x48]; 
0x0000000000410603: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000415d2b: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000413fa4: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x00000000004101b2: mov edi, ebx; call rax; 
0x000000000043b974: mov edi, ebx; mov eax, 0x14e; syscall; 
0x000000000045826a: mov edi, ebx; mov eax, 0xca; syscall; 
0x0000000000458078: mov edi, ebx; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x000000000045849b: mov edi, ebx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000439525: mov edi, ebx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000412e26: mov edi, ebx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000411bf6: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004136ca: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x0000000000456e4e: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000041373a: mov edi, ebx; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000418335: mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000408fa9: mov edi, edi; call rax; 
0x0000000000408ef5: mov edi, edi; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x00000000004094fe: mov edi, edi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000044ade6: mov edi, edx; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x000000000045af8f: mov edi, edx; inc ecx; jne 0x5aec0; vzeroupper; ret; 
0x000000000046b6c9: mov edi, edx; jmp rax; 
0x000000000040baf3: mov edi, esi; call qword ptr [rax + 0x38]; 
0x0000000000415e77: mov edi, esi; call qword ptr [rbx + 0x18]; 
0x000000000040beff: mov edi, esi; call qword ptr [rbx + 0x38]; 
0x000000000040c637: mov edi, esi; call qword ptr [rcx + 0x38]; 
0x000000000040c34f: mov edi, esi; mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x0000000000413194: mov edi, esp; call qword ptr [rax + 0x18]; 
0x000000000043ec5d: mov edi, esp; call rax; 
0x00000000004094b9: mov edi, esp; call rbx; 
0x0000000000436618: mov edi, esp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000436507: mov edi, esp; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000408a82: mov edi, r13d; call rax; 
0x0000000000438744: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000042b646: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000410838: mov edx, 0x10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043c2ac: mov edx, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000403d70: mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x00000000004384a2: mov edx, 0x2e66fffc; nop dword ptr [rax + rax]; nop; mov eax, 0x18; syscall; 
0x0000000000403ca1: mov edx, 0x34; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000401a9e: mov edx, 0x3c; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000046ff97: mov edx, 0x46d230; movups xmmword ptr [rax + 0x2a0], xmm0; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x000000000043a576: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000004182ac: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458f39: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000418257: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418641: mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040cd2a: mov edx, 0x83fffff8; ret; 
0x000000000046b615: mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x0000000000408794: mov edx, 0xa; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x000000000043882c: mov edx, 0xb8001f0f; or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000464afd: mov edx, 0xe8ff894c; ret 0xf9c5; 
0x000000000041a12f: mov edx, 0xf7480008; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000408771: mov edx, 0xffffffb8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000437d29: mov edx, 0xffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000438761: mov edx, 0xffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044a3df: mov edx, 0xffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a30f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000440467: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000046b732: mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000045891f: mov edx, 1; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417cf7: mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000417cf7: mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000417cd3: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd3: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c4b: mov edx, 1; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000418616: mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004146c5: mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x000000000041832f: mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045401b: mov edx, 1; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000417c8b: mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000417c35: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046833d: mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000043a3fe: mov edx, 2; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x000000000044a5d3: mov edx, 8; mov eax, 0xd; syscall; 
0x0000000000458fc8: mov edx, 8; mov eax, 0xe; syscall; 
0x0000000000417e96: mov edx, 8; mov rdx, r12; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x000000000046dc2f: mov edx, dword ptr [rax + 0x10]; test rdx, rdx; jne 0x6dc20; ret; 
0x000000000041271a: mov edx, dword ptr [rax + 0x4c]; cmp dword ptr [rax + 0x48], edx; je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x0000000000430bc1: mov edx, dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, ecx; ret; 
0x00000000004733ec: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476281: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000046762e: mov edx, dword ptr [rbp - 0xa4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x67642; call rax; 
0x0000000000475842: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x0000000000475371: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000417da7: mov edx, dword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x000000000047063d: mov edx, dword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000413939: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004751f6: mov edx, dword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000042aedf: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000042990d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043ae20: mov edx, dword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000043ab5a: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x0000000000417af5: mov edx, dword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004705bd: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000411350: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000470624: mov edx, dword ptr [rdi + 0x478]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004106b0: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000046b6c2: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046d002: mov edx, dword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x00000000004157b5: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a65: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000047343d: mov edx, dword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476291: mov edx, dword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000046bd8a: mov edx, dword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043b07a: mov edx, dword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x0000000000401a6e: mov edx, dword ptr [rip + 0xaa1cc]; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004309f5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000430a15: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004257b2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000430842: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000425793: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000430833: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000425844: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425864: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425803: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000430883: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000425884: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000425823: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000430893: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004257e4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430874: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043ba91: mov edx, dword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000425260: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000424a70: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x0000000000430300: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000042fb30: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000004257c1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000430851: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000425751: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004307f1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000436613: mov edx, dword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000447350: mov edx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004698f2: mov edx, dword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x0000000000408e7b: mov edx, dword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000408f9d: mov edx, dword ptr [rsp]; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x000000000047614e: mov edx, dword ptr [rsp]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760fb: mov edx, dword ptr [rsp]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000408eee: mov edx, dword ptr [rsp]; mov rsi, rbx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000401966: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000043c28c: mov edx, eax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x0000000000416dfe: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0x16df8; ret; 
0x000000000046ddb7: mov edx, ebp; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004095e7: mov edx, ebp; call rbx; 
0x0000000000457cbd: mov edx, ebp; mov eax, 0xca; syscall; 
0x0000000000417f2c: mov edx, ebp; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000417f5e: mov edx, ebp; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000409880: mov edx, ebp; mov rdi, r12; call rbx; 
0x00000000004094cb: mov edx, ebp; mov rsi, r12; call rbx; 
0x000000000046de05: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000046df31: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000409524: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000040baf0: mov edx, ebx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000438600: mov edx, ebx; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043867c: mov edx, ebx; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000438591: mov edx, ecx; mov eax, 0x106; syscall; 
0x000000000045ead1: mov edx, ecx; mov eax, 0x11; syscall; 
0x000000000045ead1: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000457b24: mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x00000000004393c1: mov edx, ecx; test r9d, 0xfff; jne 0x393e0; mov eax, 9; syscall; 
0x000000000044ad53: mov edx, edi; mov rdi, rax; cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x000000000040adf1: mov edx, edi; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000413f9e: mov edx, edi; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040d947: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454328: mov edx, edi; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000423ab8: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423508: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000439160: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000045198c: mov edx, esi; mov rdi, qword ptr [rbp - 0x8c0]; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000436504: mov edx, esi; mov rdi, r12; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x000000000040c34c: mov edx, esi; mov rdi, r14; mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x000000000045207d: mov edx, esi; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000412e29: mov edx, esi; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000451b77: mov edx, esi; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040d899: mov edx, esi; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453673: mov edx, esi; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045375f: mov edx, esi; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000439231: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000417e9c: mov edx, esp; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x000000000045eb1d: mov edx, esp; mov eax, 0x10; syscall; 
0x000000000043a372: mov edx, esp; mov eax, 0xcc; syscall; 
0x00000000004390f1: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000045155a: mov edx, esp; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040d4ab: mov edx, esp; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000040bef9: mov edx, esp; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c631: mov edx, esp; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000044cbf4: mov edx, esp; mov rsi, r11; mov rdi, rbx; call rax; 
0x000000000040dbfe: mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413eaf: mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x000000000040c20e: mov edx, esp; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc2e: mov edx, esp; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000045a4ee: mov es, word ptr [rax]; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000401751: mov es, word ptr [rax]; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043ab70: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x0000000000439065: mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044f6e1: mov esi, 0x1382474; ret; 
0x000000000043b96e: mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000041eb3e: mov esi, 0x480000ab; cmove eax, edx; ret; 
0x000000000041880c: mov esi, 0x489066ff; mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x0000000000430696: mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000417c3a: mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000457b26: mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000468342: mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000458e32: mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000417cd8: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000458f3e: mov esi, 0x81; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x0000000000417cd8: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000004099ba: mov esi, 0x83480153; ret; 
0x000000000043fa72: mov esi, 0x83480173; ret; 
0x0000000000407df7: mov esi, 0x83480234; ret; 
0x0000000000469586: mov esi, 0x8b4cffff; call 0x41d7a; jmp qword ptr [rsi + 0xf]; 
0x000000000047537a: mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004690ba: mov esi, 0xc02944c2; ret; 
0x000000000043c280: mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x000000000045712c: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041318e: mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000415876: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004165f3: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000464849: mov esi, 0xffffffff; pop rbx; mov rax, rsi; ret; 
0x0000000000458c50: mov esi, 1; mov eax, 0xca; syscall; 
0x000000000047584b: mov esi, 1; mov edi, 1; call rax; 
0x00000000004101ac: mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004394f5: mov esi, 2; pop rbp; pop r12; jmp rax; 
0x000000000045849d: mov esi, 7; mov eax, 0xca; syscall; 
0x000000000046dcb1: mov esi, dword ptr [rax + 8]; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x6dca1; ret; 
0x0000000000448cd7: mov esi, dword ptr [rax + riz*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x00000000004758ea: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475a8e: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000040bae9: mov esi, dword ptr [rbp - 0x8b8]; mov rdx, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000451553: mov esi, dword ptr [rbp - 0x8d0]; mov rdx, r12; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x0000000000466e21: mov esi, dword ptr [rbp - 0xa4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x66e35; call rax; 
0x0000000000439849: mov esi, dword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000408e75: mov esi, dword ptr [rbx]; mov rdi, qword ptr [r15]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047614b: mov esi, dword ptr [rcx]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000044a4bf: mov esi, dword ptr [rdi + 0x20]; mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000470aad: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000470989: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004224bd: mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x00000000004224ae: mov esi, dword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000420e35: mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000042076c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000041f7d9: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042075a: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000041f806: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000476104: mov esi, dword ptr [rsi]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000420747: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045e989: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004387cd: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000043872d: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044a75c: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000415f76: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000043661b: mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x0000000000401a75: mov esi, dword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040987b: mov esi, dword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000441e1b: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447355: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443d0b: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000445e98: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a55: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044069f: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000442301: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411ba: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441777: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440ba8: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000445294: mov esi, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000415991: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040d4a6: mov esi, dword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x0000000000419871: mov esi, dword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x0000000000458fc5: mov esi, eax; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000045e243: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e263: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e283: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000417c86: mov esi, eax; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000438603: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043867f: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000408b3a: mov esi, ebp; mov rdi, r8; call rax; 
0x000000000041083e: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413fa1: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000456e4b: mov esi, ebp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000464c32: mov esi, ebp; syscall; 
0x00000000004182a7: mov esi, ebp; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000043c2b2: mov esi, ebx; mov eax, 9; syscall; 
0x0000000000417f60: mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000040c211: mov esi, ebx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc31: mov esi, ebx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x0000000000408fa6: mov esi, ebx; mov rdi, r15; call rax; 
0x0000000000408ef2: mov esi, ebx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x000000000044cbf7: mov esi, ebx; mov rdi, rbx; call rax; 
0x00000000004094b2: mov esi, ecx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x0000000000457dba: mov esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041839d: mov esi, ecx; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000040c352: mov esi, edi; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x0000000000451996: mov esi, edi; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000439235: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000439168: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x0000000000456ee0: mov esi, edi; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000453676: mov esi, edi; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000475f79: mov esi, edi; test rax, rax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000040befc: mov esi, edx; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c634: mov esi, edx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x0000000000417f31: mov esi, esi; mov eax, 0xea; syscall; 
0x0000000000409527: mov esi, esi; mov rdi, r12; call rbx; 
0x000000000040d94a: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413eb2: mov esi, esi; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000452080: mov esi, esp; call qword ptr [rax + 0x38]; 
0x0000000000412e2c: mov esi, esp; call qword ptr [rbp + 0x78]; 
0x0000000000451b7a: mov esi, esp; call qword ptr [rbx + 0x38]; 
0x00000000004094ce: mov esi, esp; call rbx; 
0x0000000000417eeb: mov esi, esp; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000412b59: mov esi, esp; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046de08: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x000000000046df34: mov esi, esp; mov edi, ebp; call qword ptr [rbx]; 
0x000000000046ddbd: mov esi, esp; mov edi, ebp; call rax; 
0x00000000004095e1: mov esi, esp; mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000040adf4: mov esi, esp; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040d89c: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000408b39: mov esi, r13d; mov rdi, r8; call rax; 
0x0000000000417f30: mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000456edf: mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000417c85: mov esi, r8d; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041839c: mov esi, r9d; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000041ecd0: mov esi, ss; add byte ptr [rax], al; test dh, 4; jne 0x1ec8a; ret; 
0x0000000000435382: mov esp, 0x1448dc0; lahf; ret; 
0x00000000004377d2: mov esp, 0x1448dc0; out dx, eax; ret; 
0x000000000044fe48: mov esp, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000004306e8: mov esp, 0x1d8d4cd2; lahf; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425665: mov esp, 0x1d8d4cd2; mov dh, 0x6c; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043072a: mov esp, 0x1d8d4cd2; pop rbp; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425648: mov esp, 0x1d8d4cd2; shr dword ptr [rbp + rax], cl; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000434de2: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000000435075: mov esp, 0x26de9c0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045d422: mov esp, 0x2e2c1c0; vzeroupper; cmp edx, eax; jle 0x5d43f; add rax, rdi; ret; 
0x00000000004373b2: mov esp, 0x2e8c1c0; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000437099: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x000000000045ce5c: mov esp, 0x2e8c1c0; xtest; jne 0x5ce6a; vzeroupper; ret; 
0x000000000045d9c2: mov esp, 0x3c8d48f0; mov bh, 0x31; sar byte ptr [rcx], 0xf2; cmovg rax, rdi; ret; 
0x000000000042b15b: mov esp, 0x40c931c0; cmp dh, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x0000000000435582: mov esp, 0x40ee83c0; cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000434dd2: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000000424711: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x0000000000424741: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000424731: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000045da22: mov esp, 0x448d48c0; xchg dword ptr [rax], esp; ret; 
0x000000000045c5d8: mov esp, 0x48c0bd0f; add eax, edi; ret; 
0x0000000000435913: mov esp, 0x48d49d3; adc dword ptr [rax - 0x77], ecx; ret 0xe281; 
0x0000000000434dc2: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x00000000004354cc: mov esp, 0x72c639c0; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043791a: mov esp, 0x72c639c0; or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379aa: mov esp, 0x72c639c0; push 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043554a: mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004354fe: mov esp, 0x72c639c0; xlatb; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045d550: mov esp, 0x76c239c0; pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a0bd: mov esp, 0x76c239c0; push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000459fa2: mov esp, 0x77f8c5c0; cmp edx, eax; jle 0x59fbd; add rax, rdi; ret; 
0x0000000000430c07: mov esp, 0x77f8c5c0; ret; 
0x000000000045a681: mov esp, 0x80ea83c0; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a941: mov esp, 0x80ea83c0; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045cb02: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000430c32: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x0000000000437112: mov esp, 0x88448dc0; ffreep st(1); call 0x77fc3620; ret; 
0x00000000004370f2: mov esp, 0x88448dc0; lahf; shr eax, 2; vzeroupper; ret; 
0x000000000040e080: mov esp, 0x8900000c; ret 0xc083; 
0x0000000000456fca: mov esp, 0x8944fffb; dec byte ptr [rcx + rcx*4 - 0x11]; call qword ptr [rbx + 0x18]; 
0x000000000042b9f0: mov esp, 0xa8000000; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b644: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045e241: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e261: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e281: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045cec2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 8]; ret; 
0x000000000045aaca: mov esp, 0xc22948c0; jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad31: mov esp, 0xc22948c0; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad41: mov esp, 0xc22948c0; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad51: mov esp, 0xc22948c0; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad61: mov esp, 0xc22948c0; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004355d5: mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x0000000000435022: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000042b101: mov esp, 0xc78348c0; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x0000000000423f92: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x0000000000423f82: mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000042afb8: mov esp, 0xc78348c0; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042bcd1: mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x0000000000423f72: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000042af91: mov esp, 0xc7ff48c0; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042428d: mov esp, 0xc80148c0; ret; 
0x000000000042408e: mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000042b5f1: mov esp, 0xd00148c0; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000045b955: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b80e: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b006: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c141: mov esp, 0xd00148c0; ret; 
0x000000000042bd1b: mov esp, 0xd00148c0; vzeroupper; ret; 
0x00000000004311f3: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000437c38: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000433d52: mov esp, 0xd32949d2; jbe 0x33d64; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000434d32: mov esp, 0xd32949d2; jbe 0x34d44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000430ebc: mov esp, 0xd6010fc0; jne 0x30ec7; vzeroupper; ret; 
0x000000000041d7d2: mov esp, 0xd6ebffff; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000437332: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fb2: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000437312: mov esp, 0xd72948c0; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fa2: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435562: mov esp, 0xd72948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435572: mov esp, 0xd72948c0; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379e2: mov esp, 0xd72948c0; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379c2: mov esp, 0xd72948c0; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000045db51: mov esp, 0xe0ea83c0; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de21: mov esp, 0xe0ea83c0; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000043c768: mov esp, 0xe800040c; jg 0x3c7e6; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000045a132: mov esp, 0xef8348c0; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000424052: mov esp, 0xef8348c0; jg 0x240a1; add eax, edi; vzeroupper; ret; 
0x0000000000430d12: mov esp, 0xef8348c0; jg 0x30d61; add eax, edi; vzeroupper; ret; 
0x0000000000434f12: mov esp, 0xef8348c0; jg 0x34f61; add eax, edi; vzeroupper; ret; 
0x0000000000437262: mov esp, 0xef8348c0; jg 0x372b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000045cc02: mov esp, 0xef8348c0; jg 0x5cc51; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000437282: mov esp, 0xef8348c0; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424062: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045a502: mov esp, 0xf70148f0; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x00000000004245ab: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000042b5a5: mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x0000000000424265: mov esp, 0xf80148c0; ret; 
0x0000000000423f68: mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000004240c8: mov esp, 0xf80148c0; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042bd79: mov esp, 0xf80148c0; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a233: mov esp, 0xf80148c0; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045d6d3: mov esp, 0xf80148c0; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x000000000045cac2: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000430c12: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x00000000004758e2: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000044a4c9: mov esp, eax; mov rbp, r9; jmp rdx; 
0x00000000004685d8: mov esp, ebx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000475a9a: mov esp, ecx; pop rcx; jmp rcx; 
0x0000000000406182: mov gs, word ptr [rdi - 0x72b70001]; xor eax, 0x7371f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000417b90: mov qword ptr [0x2f8], rdi; ret; 
0x000000000043b9a8: mov qword ptr [0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000004733f2: mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000439704: mov qword ptr [r11], rax; pop rbx; pop rbp; ret; 
0x00000000004488ec: mov qword ptr [r14 + r12*8], rax; lea rax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x0000000000478653: mov qword ptr [r14 + rbp*8], rdx; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x000000000046b535: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000046b55a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000476270: mov qword ptr [r8], rdx; ret; 
0x0000000000420750: mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000464845: mov qword ptr [r9], rdi; mov rsi, 0xffffffffffffffff; pop rbx; mov rax, rsi; ret; 
0x0000000000464825: mov qword ptr [r9], rdi; xor esi, esi; pop rbx; mov rax, rsi; ret; 
0x000000000046dca7: mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000456ae6: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000457167: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000416ea7: mov qword ptr [rax + 0x18], rsi; mov rcx, rsi; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000457163: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000468238: mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000468288: mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000468243: mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000046ffa4: mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x0000000000457048: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000043ba33: mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000043ba37: mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000456aea: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000456aaf: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000043ba2f: mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000043ba97: mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004571b6: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000416470: mov qword ptr [rax + 0xa0], 0xffffffffffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416460: mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041cc0a: mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004163ab: mov qword ptr [rax + 8], 0; ret; 
0x0000000000416eb1: mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000046b822: mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000043ae23: mov qword ptr [rax + 8], rdx; ret; 
0x0000000000423b93: mov qword ptr [rax + rdx - 8], rcx; ret; 
0x00000000004163a4: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000004572c4: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423b90: mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x00000000004705cc: mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000046b7e2: mov qword ptr [rax], rdx; mov qword ptr [rip + 0x404d8], 0; ret; 
0x00000000004705c0: mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004756c4: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000467e5a: mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x000000000040bef1: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c629: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040cc26: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c206: mov qword ptr [rbp - 0x8b8], r8; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004677cc: mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000466f33: mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467e53: mov qword ptr [rbp - 0xb8], r10; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000467e4c: mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb8], r10; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000416daa: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046ba6a: mov qword ptr [rbp], rdx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041e3ec: mov qword ptr [rbp], rdx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000045f0b1: mov qword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000447f09: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000046982d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004696d2: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000470994: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000470ab8: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004158b0: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000415d59: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004161dd: mov qword ptr [rbx + 0x40], r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000004164de: mov qword ptr [rbx + 0x48], 0; test byte ptr [rbx], 0x80; jne 0x16500; pop rbx; ret; 
0x0000000000415915: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000416dae: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412d5a: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004134a4: mov qword ptr [rbx + 0x90], rsi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000043b19a: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000448cd2: mov qword ptr [rbx - 0x80], rsi; mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x000000000043e492: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000478ac5: mov qword ptr [rbx], 0; mov eax, 1; pop rbx; ret; 
0x000000000043c4f1: mov qword ptr [rbx], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000436cdd: mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000044fe35: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000046f2aa: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000472828: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004191dd: mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x000000000044afba: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000044a3d7: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a30b: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047550a: mov qword ptr [rcx], rdx; ret; 
0x000000000046b26e: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000042598c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259ac: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309bc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000043099c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004259ef: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004309ff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a0f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a1f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259d0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309e0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000046b6a0: mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041582f: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000043af7f: mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x0000000000415833: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157f8: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000475554: mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004106a8: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000042594c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000043095c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042596c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000043097c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042584a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308aa: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042586a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308ba: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042588a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308ca: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044af42: mov qword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x000000000046b40f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000046b2d3: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000046b267: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046b1f3: mov qword ptr [rdi + 8], r9; ret; 
0x000000000046b693: mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000046a6ac: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042529b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aab: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043032b: mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb5b: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000041f80b: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004224b5: mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000475510: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000046a1be: mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a1b7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a149: mov qword ptr [rdi - 8], r9; ret; 
0x000000000046a1b0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046b260: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046a143: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046b1ed: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000046a118: mov qword ptr [rdi], r9; ret; 
0x000000000043b0e7: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x00000000004257d6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000425806: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000430886: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000425826: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000430896: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000425847: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425867: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425887: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000425298: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aa8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430328: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb58: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000004224b2: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004257e7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430877: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000430866: mov qword ptr [rdi], rcx; ret; 
0x00000000004257c3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000450223: mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x0000000000430853: mov qword ptr [rdi], rdx; ret; 
0x000000000042074d: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000046b690: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041f808: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000423f20: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000457840: mov qword ptr [rdx + 0x10], rcx; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x00000000004191d9: mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; add rsp, 8; ret; 
0x0000000000457811: mov qword ptr [rdx + 0x40], rsi; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x000000000041450c: mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000004106b6: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000046b7de: mov qword ptr [rdx + 8], rax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x404d8], 0; ret; 
0x000000000043b8d1: mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x70414], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000470640: mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000416e10: mov qword ptr [rdx], rax; ret; 
0x0000000000457815: mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577df: mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000456de7: mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046dca4: mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004783cb: mov qword ptr [rip + 0x2f79e], rbx; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x00000000004789fc: mov qword ptr [rip + 0x337d1], 0; add rsp, 8; ret; 
0x00000000004785f7: mov qword ptr [rip + 0x33a26], 0; add rsp, 8; ret; 
0x000000000046d5ec: mov qword ptr [rip + 0x372dd], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046d0c3: mov qword ptr [rip + 0x377fe], r9; mov rax, r10; add rsp, 0x28; ret; 
0x000000000046dd14: mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x000000000046b829: mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000046b7e5: mov qword ptr [rip + 0x404d8], 0; ret; 
0x0000000000469668: mov qword ptr [rip + 0x42c7d], 0; add rsp, 8; ret; 
0x0000000000464538: mov qword ptr [rip + 0x47d51], rax; add rsp, 8; ret; 
0x000000000046440a: mov qword ptr [rip + 0x47e7f], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000457e33: mov qword ptr [rip + 0x4e696], rax; ret; 
0x000000000044a2dc: mov qword ptr [rip + 0x5c14d], rax; mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000044a2e3: mov qword ptr [rip + 0x5c14e], rdx; cmp qword ptr fs:[rdi], rsi; je 0x4a2f8; ret; 
0x000000000043b9a0: mov qword ptr [rip + 0x67a61], rbx; mov qword ptr fs:[0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000043a5c8: mov qword ptr [rip + 0x6b4b9], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043af78: mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x000000000043af3c: mov qword ptr [rip + 0x6bded], rax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000043c734: mov qword ptr [rip + 0x6f5ed], rax; add rsp, 0x1a8; ret; 
0x000000000043b8d5: mov qword ptr [rip + 0x70414], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000043aeb3: mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000043ae66: mov qword ptr [rip + 0x70df3], rax; mov qword ptr [rip + 0x70dfc], rdi; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000043ae6d: mov qword ptr [rip + 0x70dfc], rdi; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x0000000000439277: mov qword ptr [rip + 0x729ca], rax; cmp rax, rdi; jb 0x39290; xor eax, eax; ret; 
0x0000000000418923: mov qword ptr [rip + 0x8c896], rax; ret; 
0x00000000004188b3: mov qword ptr [rip + 0x8c89e], rax; ret; 
0x0000000000418910: mov qword ptr [rip + 0x8c8a1], rax; ret; 
0x00000000004188f6: mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000041888d: mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x00000000004188a3: mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000041885d: mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041881d: mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000041720b: mov qword ptr [rip + 0x90982], 0; ret; 
0x0000000000417194: mov qword ptr [rip + 0x909fd], rbx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000418955: mov qword ptr [rip + 0x932bc], rax; ret; 
0x0000000000401ca0: mov qword ptr [rip + 0xaa0b5], 0x800; pop rbx; ret; 
0x0000000000401c97: mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x0000000000403c97: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046d010: mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000046d008: mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046b5fe: mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000403c8b: mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046b618: mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000043b0f1: mov qword ptr [rsi], rax; ret; 
0x000000000044a300: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046b826: mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x000000000046b4a5: mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000046b482: mov qword ptr [rsi], rdx; ret; 
0x000000000046b5f8: mov qword ptr [rsi], rdx; sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000403c94: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043a367: mov qword ptr [rsp + 0x1008], rax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004095d6: mov qword ptr [rsp + 0x10], rcx; nop dword ptr [rax + rax]; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x0000000000476145: mov qword ptr [rsp + 0x18], r9; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000465480: mov qword ptr [rsp + 0x18], rax; call 0x64d70; add rsp, 0xd8; ret; 
0x0000000000439030: mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004388c7: mov qword ptr [rsp + 0x20], rax; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x000000000045eb15: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000438747: mov qword ptr [rsp + 8], rax; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000004390bd: mov qword ptr [rsp + 8], rax; xor eax, eax; cmp esi, 9; je 0x390f0; mov eax, 0x48; syscall; 
0x0000000000411356: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004094f8: mov qword ptr [rsp + 8], rdi; mov r15, rdi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000040119a: mov qword ptr [rsp], 0x20; syscall; 
0x0000000000472bed: mov qword ptr [rsp], rax; call 0x730c0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000472f7a: mov qword ptr [rsp], rcx; call 0x730c0; mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x000000000041393f: mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000046b828: mov qword ptr ds:[rip + 0x40494], 0; ret; 
0x0000000000417b8f: mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000043b9a7: mov qword ptr fs:[0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000043c4f0: mov qword ptr fs:[rbx], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000470bf0: mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000044a3d6: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a30a: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a315: mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a2ff: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041f807: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000403c96: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000045ead0: mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000045ead0: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000439230: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000043c2ab: mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000045401a: mov r10d, 1; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000044a5d2: mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000458fc7: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000417e95: mov r10d, 8; mov rdx, r12; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x0000000000438590: mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000004393c0: mov r10d, ecx; test r9d, 0xfff; jne 0x393e0; mov eax, 9; syscall; 
0x000000000044cbf0: mov r11, r8; mov rdx, r12; mov rsi, r11; mov rdi, rbx; call rax; 
0x00000000004758e1: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004758e5: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004758e9: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475a8d: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044a4be: mov r14, qword ptr [rdi + 0x20]; mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000457625: mov r14b, 0xfb; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x00000000004758ed: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475a91: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044a4c2: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000004094fd: mov r15, rdi; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004751f8: mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000475845: mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x0000000000475374: mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000045783d: mov r8, rcx; mov qword ptr [rdx + 0x10], rcx; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x0000000000457b1b: mov r8d, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000046047f: mov r8d, 1; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x0000000000438681: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004387d1: mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000438731: mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044a760: mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x000000000045e985: mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000044a6a9: mov r8d, edx; add rsp, 0x148; ret; 
0x0000000000407c86: mov r8d, r8d; movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x0000000000425293: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aa3: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430323: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb53: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000441e15: mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e92: mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004422f6: mov r9, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000444a4f: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440699: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b4: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441771: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044528e: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440ba2: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000443d05: mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000442efb: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000436032: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x000000000041a03d: mov r9b, 8; add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000457d36: mov r9d, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x0000000000457cb4: mov r9d, 0xffffffff; xor r8d, r8d; mov edx, ebp; mov eax, 0xca; syscall; 
0x0000000000401004: mov rax, 0; test rax, rax; je 0x1012; call rax; 
0x000000000044a510: mov rax, 0xf; syscall; 
0x000000000044a320: mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044a4e8: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393e0: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000439290: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041d7d7: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000041baa0: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000045e490: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000412810: mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000046cf9d: mov rax, 0xffffffffffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000044a380: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000044a360: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000044a340: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000416510: mov rax, 0xffffffffffffffff; ret; 
0x000000000046402e: mov rax, qword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000418781: mov rax, qword ptr [0x10]; ret; 
0x000000000046b698: mov rax, qword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000466759: mov rax, qword ptr [r14 + 0x10]; add rax, qword ptr [r12]; add rbx, r15; test edx, edx; jne 0x6676a; call rax; 
0x000000000044cbec: mov rax, qword ptr [r15 + 0x38]; mov r11, r8; mov rdx, r12; mov rsi, r11; mov rdi, rbx; call rax; 
0x0000000000411c00: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000044a3da: mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000416337: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x000000000041ca7b: mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1ca50; mov dword ptr [rip + 0x8f173], 0; ret; 
0x000000000045700c: mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000457125: mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000411bf9: mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046ddb2: mov rax, qword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000469680: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000469690: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x00000000004488f7: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x0000000000478657: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x000000000044a32e: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004556b9: mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000040e2b4: mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000044a32b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004754b8: mov rax, qword ptr [rax]; ret; 
0x0000000000416e00: mov rax, qword ptr [rax]; test rax, rax; jne 0x16df8; ret; 
0x00000000004136c1: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000415bcb: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000043ec58: mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x000000000046b10a: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x6b15e; leave; ret; 
0x0000000000470d42: mov rax, qword ptr [rbp]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000466f27: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x0000000000467634: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x67642; call rax; 
0x0000000000466e27: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x66e35; call rax; 
0x00000000004677bf: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004705c8: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004705b8: mov rax, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041596c: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041598d: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000415f48: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041615a: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000000411bee: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000043a5c5: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x6b4b9], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417af0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000415827: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157ec: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000417150: mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004754c4: mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000475524: mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000456ff0: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x0000000000475564: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000004755c4: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x00000000004755b4: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000475574: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000475534: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000414210: mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x0000000000417246: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x17270; movzx eax, byte ptr [rax]; ret; 
0x0000000000475f74: mov rax, qword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000041de69: mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000045b8d0: mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x00000000004188c0: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x188d0; ret; 
0x0000000000418930: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000418900: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x18910; ret; 
0x0000000000457e20: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000457b90: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b80: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b70: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x0000000000457b60: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x0000000000418880: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418850: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c92b], 1; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000418830: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c94b], 1; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418810: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x0000000000418870: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000416e0d: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000457e30: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x0000000000418920: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x00000000004188b0: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c89e], rax; ret; 
0x00000000004188a0: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000046b6c5: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000043b5cd: mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043aeaf: mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000046ba2d: mov rax, qword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000045c6f0: mov rax, qword ptr [rip + 0x4f859]; ret; 
0x000000000045c6e0: mov rax, qword ptr [rip + 0x4f861]; ret; 
0x000000000045c6d0: mov rax, qword ptr [rip + 0x4f869]; ret; 
0x000000000045c6c0: mov rax, qword ptr [rip + 0x4f871]; ret; 
0x000000000045c6b0: mov rax, qword ptr [rip + 0x4f879]; ret; 
0x000000000045c6a0: mov rax, qword ptr [rip + 0x4f881]; ret; 
0x000000000045c690: mov rax, qword ptr [rip + 0x4f889]; ret; 
0x000000000045c680: mov rax, qword ptr [rip + 0x4f891]; ret; 
0x000000000045c670: mov rax, qword ptr [rip + 0x4f899]; ret; 
0x000000000045c660: mov rax, qword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c650: mov rax, qword ptr [rip + 0x4f8a9]; ret; 
0x000000000045c640: mov rax, qword ptr [rip + 0x4f911]; ret; 
0x0000000000447720: mov rax, qword ptr [rip + 0x648f9]; ret; 
0x000000000043b0ea: mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x000000000043b0e0: mov rax, qword ptr [rip + 0x6bc61]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x6bc47]; mov qword ptr [rsi], rax; ret; 
0x0000000000437ce0: mov rax, qword ptr [rip + 0x6c7a1]; test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000439340: mov rax, qword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x000000000043e440: mov rax, qword ptr [rip + 0x6db99]; ret; 
0x000000000043e430: mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x0000000000417130: mov rax, qword ptr [rip + 0x8da09]; ret; 
0x000000000040db51: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046d5e7: mov rax, qword ptr [rsi + rbp - 0x18]; mov qword ptr [rip + 0x372dd], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475599: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000443d14: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000043c4f8: mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000043984b: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000441780: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a8: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411c3: mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000408ef7: mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000438751: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401a7d: mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000413189: mov rax, qword ptr [rsp + 8]; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000408fa0: mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000472bf6: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000046402d: mov rax, qword ptr fs:[0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000418780: mov rax, qword ptr fs:[0x10]; ret; 
0x000000000046b697: mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045700b: mov rax, qword ptr fs:[rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000044a32a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000476105: mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x000000000046d0ca: mov rax, r10; add rsp, 0x28; ret; 
0x0000000000404028: mov rax, r12; pop r12; ret; 
0x0000000000416004: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040ffa7: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000403f8a: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000004575a5: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000045755e: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004559b8: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000471d71: mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x0000000000471d57: mov rax, r14; pop r14; ret; 
0x00000000004354db: mov rax, r8; ret; 
0x0000000000434f44: mov rax, r8; vzeroupper; ret; 
0x00000000004352e6: mov rax, r8; xtest; jne 0x352f2; vzeroupper; ret; 
0x0000000000437729: mov rax, r8; xtest; jne 0x37735; vzeroupper; ret; 
0x0000000000414178: mov rax, rbp; movups xmmword ptr [rbx + 8], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419f5f: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004394f1: mov rax, rbp; pop rbx; mov esi, 2; pop rbp; pop r12; jmp rax; 
0x0000000000439527: mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000459f26: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004392ed: mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000437cc6: mov rax, rbx; cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041993e: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414614: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000419e80: mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041e012: mov rax, rbx; pop rbx; ret; 
0x0000000000472eed: mov rax, rcx; add rsp, 0x38; ret; 
0x000000000046ba27: mov rax, rcx; div rsi; mov rax, qword ptr [rip + 0x3a124]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000412cdd: mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000044ad5d: mov rax, rcx; ret; 
0x000000000044ade2: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x0000000000450407: mov rax, rdi; pop r14; ret; 
0x0000000000450359: mov rax, rdi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000417160: mov rax, rdi; ret; 
0x0000000000408849: mov rax, rdx; add qword ptr [rip + 0x9eecc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b610: mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000408891: mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004019b1: mov rax, rdx; pop rbx; ret; 
0x0000000000423abc: mov rax, rdx; ret; 
0x000000000042350c: mov rax, rdx; vzeroupper; ret; 
0x000000000046dc9e: mov rax, rsi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000458fc1: mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004647dc: mov rax, rsi; ret; 
0x0000000000408ade: mov rbp, 0x4a6c90; cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004392e2: mov rbp, 0xffffffffffffffff; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000475a95: mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044a4cb: mov rbp, r9; jmp rdx; 
0x0000000000464c2e: mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000408ad7: mov rbx, 0x4a6c88; mov rbp, 0x4a6c90; cmp rbx, rbp; jae 0x8afb; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000401759: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004685da: mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000458f08: mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f08: mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000457004: mov rbx, rdi; test byte ptr [rdi], 2; jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004384c0: mov rcx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000044a303: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000423a92: mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000419fc4: mov rcx, 0xffffffffffffffff; pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000046dca1: mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000467e45: mov rcx, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb8], r10; mov qword ptr [rbp - 0x88], r9; add rax, rcx; call rax; 
0x0000000000420749: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004754fe: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000464510: mov rcx, qword ptr [rip + 0x47d69]; cmp rcx, rdi; je 0x64520; ret; 
0x0000000000425984: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430994: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000425944: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430954: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000425964: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430974: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045b8cb: mov rcx, qword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000041f800: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004257d0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000430860: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004257e0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000430870: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000425800: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000430880: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000425820: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000430890: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000425290: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000430320: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb50: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000425840: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425860: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425880: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004224aa: mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000043c49e: mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x00000000004422fb: mov rcx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000472f83: mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000420748: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000475848: mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000043660f: mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000464702: mov rcx, rax; cmp rcx, rdx; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x000000000044ad86: mov rcx, rax; mov rax, rcx; ret; 
0x0000000000475377: mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004751fb: mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000423ab4: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423504: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000423bc5: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004220d8: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000416eab: mov rcx, rsi; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000416ee9: mov rcx, rsi; add rcx, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000046fece: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x0000000000401544: mov rdi, 0x401655; call 0x28e0; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000045c9f5: mov rdi, qword ptr [r12]; push 1; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000408e77: mov rdi, qword ptr [r15]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000045155c: mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x0000000000452075: mov rdi, qword ptr [rbp - 0x8c0]; mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000451b6f: mov rdi, qword ptr [rbp - 0x8c0]; mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x000000000045198e: mov rdi, qword ptr [rbp - 0x8c0]; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000436cd5: mov rdi, qword ptr [rbx]; call 0x1d050; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000458f0b: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f0b: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000470ab0: mov rdi, qword ptr [rdi]; call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000047098c: mov rdi, qword ptr [rdi]; call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000457d31: mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; xor r8d, r8d; mov eax, 0xca; syscall; 
0x0000000000439843: mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000043c4fd: mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000043c4a3: mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x00000000004094c5: mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004388d2: mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x0000000000447359: mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443d0f: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000441e1f: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a59: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000442305: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411be: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000445298: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a3: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044177b: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440bac: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000415f7a: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044a763: mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000476151: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760fe: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000415995: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041986c: mov rdi, qword ptr [rsp]; mov rsi, qword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x0000000000413193: mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000043ec5c: mov rdi, r12; call rax; 
0x00000000004094b8: mov rdi, r12; call rbx; 
0x0000000000436617: mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000436506: mov rdi, r12; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000456ee2: mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x00000000004095e3: mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000040baf2: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000415e76: mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000040befe: mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c636: mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c34e: mov rdi, r14; mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x0000000000408fa8: mov rdi, r15; call rax; 
0x0000000000408ef4: mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000408b3c: mov rdi, r8; call rax; 
0x000000000041825c: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000044ad55: mov rdi, rax; cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x0000000000450400: mov rdi, rax; pop r12; pop r13; mov rax, rdi; pop r14; ret; 
0x000000000040adf6: mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000041861b: mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040d89e: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041587b: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000415ddc: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041655c: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040d4ad: mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x0000000000413eb4: mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x00000000004146ca: mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000410602: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000415d2a: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000413fa3: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004101b1: mov rdi, rbx; call rax; 
0x000000000043b973: mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000458269: mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000458077: mov rdi, rbx; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x000000000045849a: mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000439524: mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000412e25: mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000411bf5: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004136c9: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000456e4d: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000413739: mov rdi, rbx; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000418334: mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000044ade5: mov rdi, rdx; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x000000000045af8e: mov rdi, rdx; inc ecx; jne 0x5aec0; vzeroupper; ret; 
0x000000000046b6c8: mov rdi, rdx; jmp rax; 
0x000000000046ff96: mov rdx, 0x46d230; movups xmmword ptr [rax + 0x2a0], xmm0; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x0000000000408770: mov rdx, 0xffffffffffffffb8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000437d28: mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000438760: mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044a3de: mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044a30e: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047614d: mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004760fa: mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000475841: mov rdx, qword ptr [r13]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000041134f: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000046dc2e: mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6dc20; ret; 
0x00000000004733eb: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476280: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000475370: mov rdx, qword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000417da6: mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x17d80; call rdx; 
0x000000000047063c: mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000413938: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004751f5: mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000043ae1f: mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000417af4: mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004705bc: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000470623: mov rdx, qword ptr [rdi + 0x478]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004106af: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000046b6c1: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046d001: mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x00000000004157b4: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a64: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x56a60; ret; 
0x000000000047343c: mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000476290: mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000046bd89: mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043b079: mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x0000000000401a6d: mov rdx, qword ptr [rip + 0xaa1cc]; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004309f4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000430a14: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000425843: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000425863: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004308b3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000425883: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004308c3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000043ba90: mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004257c0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000430850: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000436612: mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044734f: mov rdx, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004698f1: mov rdx, qword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x0000000000408e7a: mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000408f9c: mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000408eed: mov rdx, qword ptr [rsp]; mov rsi, rbx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x0000000000417e9b: mov rdx, r12; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x0000000000451559: mov rdx, r12; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x000000000040d4aa: mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000040bef8: mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c630: mov rdx, r12; mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000044cbf3: mov rdx, r12; mov rsi, r11; mov rdi, rbx; call rax; 
0x000000000040dbfd: mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413eae: mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x000000000040c20d: mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc2d: mov rdx, r12; mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046ddb6: mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046de04: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000046df30: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x0000000000436503: mov rdx, r14; mov rdi, r12; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x000000000045207c: mov rdx, r14; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000412e28: mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000451b76: mov rdx, r14; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040d898: mov rdx, r14; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000453672: mov rdx, r14; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045375e: mov rdx, r14; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040adf0: mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000413f9d: mov rdx, r15; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040d946: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000454327: mov rdx, r15; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043c28b: mov rdx, rax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x0000000000416dfd: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x16df8; ret; 
0x00000000004095e6: mov rdx, rbp; call rbx; 
0x000000000040987f: mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000004094ca: mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000409523: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000040baef: mov rdx, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000044ad52: mov rdx, rdi; mov rdi, rax; cmp rdx, rsi; jae 0x4ad3f; mov rax, rcx; ret; 
0x0000000000423ab7: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423507: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000045198b: mov rdx, rsi; mov rdi, qword ptr [rbp - 0x8c0]; mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x000000000040c34b: mov rdx, rsi; mov rdi, r14; mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x000000000045eb1c: mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000043a371: mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004390f0: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000464848: mov rsi, 0xffffffffffffffff; pop rbx; mov rax, rsi; ret; 
0x0000000000476103: mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047614a: mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000046dcb0: mov rsi, qword ptr [rax + 8]; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x6dca1; ret; 
0x0000000000448cd6: mov rsi, qword ptr [rax + r12*8]; test rsi, rsi; je 0x48ce1; call rsi; 
0x000000000040bae8: mov rsi, qword ptr [rbp - 0x8b8]; mov rdx, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000451552: mov rsi, qword ptr [rbp - 0x8d0]; mov rdx, r12; mov rdi, qword ptr [rbp - 0x8c0]; call qword ptr [rbx + 0x38]; 
0x0000000000439848: mov rsi, qword ptr [rbx]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000408e74: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [r15]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000470aac: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x72a80; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000470988: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x72b70; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004224ad: mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000041f805: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000420746: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045e988: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004387cc: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000043872c: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000044a75b: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000415f75: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000043661a: mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000401a74: mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040987a: mov rsi, qword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000441e1a: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000447354: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443d0a: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000445e97: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a54: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044069e: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000442300: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411b9: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441776: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440ba7: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000445293: mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000040d4a5: mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x0000000000419870: mov rsi, qword ptr [rsp + 8]; test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x000000000040befb: mov rsi, r10; mov rdi, r14; call qword ptr [rbx + 0x38]; 
0x000000000040c633: mov rsi, r10; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000044cbf6: mov rsi, r11; mov rdi, rbx; call rax; 
0x000000000045207f: mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000412e2b: mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x0000000000451b79: mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x00000000004094cd: mov rsi, r12; call rbx; 
0x0000000000417eea: mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000412b58: mov rsi, r12; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046de07: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000046df33: mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x000000000046ddbc: mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004095e0: mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000040adf3: mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040d89b: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041083d: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413fa0: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000409526: mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000040d949: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413eb1: mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x000000000040c351: mov rsi, r15; mov byte ptr [rbp - 0x8e8], r11b; mov byte ptr [rbp - 0x900], r8b; call rax; 
0x0000000000451995: mov rsi, r15; mov dword ptr [rbp - 0x938], r10d; mov dword ptr [rbp - 0x940], r11d; call rax; 
0x0000000000453675: mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000458fc4: mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000438602: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043867e: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000453761: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000464c31: mov rsi, rbp; syscall; 
0x000000000043c2b1: mov rsi, rbx; mov eax, 9; syscall; 
0x000000000040c210: mov rsi, rbx; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040cc30: mov rsi, rbx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x0000000000408fa5: mov rsi, rbx; mov rdi, r15; call rax; 
0x0000000000408ef1: mov rsi, rbx; mov rdi, r15; mov rax, qword ptr [rsp + 8]; add r14, r13; call rax; 
0x00000000004094b1: mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x0000000000439167: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000475f78: mov rsi, rdi; test rax, rax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000044a4c8: mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000004685d7: mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000475a99: mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000042076b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000420775: mov word ptr [r9 - 2], cx; ret; 
0x0000000000423ba0: mov word ptr [rax], cx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000469af7: mov word ptr [rax], es; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x00000000004258cc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308fc: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004259d4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309e4: mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425798: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000430838: mov word ptr [rdi + 4], dx; ret; 
0x00000000004257ea: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000043087a: mov word ptr [rdi + 8], dx; ret; 
0x0000000000420e63: mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004224d5: mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000041f7cd: mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000425253: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a53: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb23: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000425763: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000430803: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000423832: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000425243: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000424a43: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004302e3: mov word ptr [rdi], dx; ret; 
0x000000000042fb13: mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000423f30: mov word ptr [rdi], si; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000420772: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000041cc06: mov word ptr [rdx + rbx*2], cx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000403183: mov word ptr [rdx], cs; add bh, dh; ret 0; 
0x0000000000423835: mov word ptr [rsi - 2], cx; ret; 
0x000000000044b238: mov word ptr [rsi - 5], ds; dec dword ptr [rax + 0x29]; ret; 
0x0000000000456ff3: movabs al, byte ptr [0x30788348000000]; je 0x57000; ret; 
0x000000000046a34f: movabs al, byte ptr [0x348087d8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000046ffa0: movabs al, byte ptr [0x360908948000002]; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004133c2: movabs al, byte ptr [0x415d5be889000000]; pop rsp; ret; 
0x0000000000411bf1: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416473: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rax + 0xa8], 0; ret; 
0x000000000046982a: movabs al, byte ptr [0x5a5810438948ffff]; pop rbx; ret; 
0x0000000000439523: movabs al, byte ptr [0x5d5be88948df8948]; pop r12; jmp rax; 
0x00000000004502ac: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000040b236: movabs al, byte ptr [0x894c40758bfffffb]; ret; 
0x000000000040317c: movabs al, byte ptr [0xa8c42158bffffe8]; add bh, dh; ret 0; 
0x00000000004225a7: movabs al, byte ptr [0xd158d48f0e78348]; add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x00000000004106b2: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000411fc9: movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x000000000043405c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000459eaa: movabs byte ptr [0x24cb058d4800001c], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000043812a: movabs byte ptr [0x49b7158d48000002], al; add al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045c822: movabs byte ptr [0x7593058d480004f5], al; cld; push rsi; ret 0x7420; 
0x0000000000401c90: movabs byte ptr [0x894800000204838d], al; add eax, 0xaa0c2; pop rbx; ret; 
0x000000000043b1aa: movabs byte ptr [0xd88948db31fffe1e], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043435a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000427211: movabs dword ptr [0x46b262fefc25204d], eax; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x840f; 
0x000000000042cf71: movabs dword ptr [0x46b262fefc25204d], eax; and dword ptr [rsi], esp; mov ebp, 0xffd093fb; ret 0x8b74; 
0x0000000000456fc9: movabs dword ptr [0x894cfe8944fffbbc], eax; out dx, eax; call qword ptr [rbx + 0x18]; 
0x0000000000401b35: movabs dword ptr [0xaa3021589000a], eax; pop rbx; ret; 
0x0000000000401b2f: movabs dword ptr [0xaa3040d89000a], eax; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b29: movabs dword ptr [0xaa3061d89000a], eax; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401979: movabs dword ptr [0xe0830ce8c1000777], eax; cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000437ce3: movabs eax, dword ptr [0x1474c085480006c7]; sub rsp, 8; call rax; 
0x0000000000427523: movabs eax, dword ptr [0x204d8362f5ef20cd]; and eax, 0xb262def8; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000046ba31: movabs eax, dword ptr [0x848d48d129480003]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000401a71: movabs eax, dword ptr [0x8b1824748b48000a]; jl 0x1aa0; adc al, 0x48; mov eax, dword ptr [rsp + 8]; call rax; 
0x00000000004384a1: movabs r10, 0x841f0f2e66fffc; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x18; syscall; 
0x0000000000448cce: movabs rcx, 0x8b4a807389480005; xor al, 0xe0; test rsi, rsi; je 0x48ce1; call rsi; 
0x000000000045b110: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b510: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045b117: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b517: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045b10f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b50f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045b116: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b516: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000043b887: movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000043b936: movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004258c0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000425900: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000430930: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430920: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004258e0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000430910: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000425980: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004309b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430990: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000425940: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430950: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000425960: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430970: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000430a90: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a20: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a40: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004258a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004258b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308e0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004308d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000430a94: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a24: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a34: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a44: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a54: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a74: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000425a8d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a9d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a2d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a3d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a4d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a5d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000425a6d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430a7d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004258a4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004258b4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308e4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000425907: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425927: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000430937: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430927: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004258e7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000430917: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000425988: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430998: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004259eb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004309fb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a0b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a1b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259cc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309dc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425948: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430958: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000425968: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430978: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004258c8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000425a89: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a99: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a29: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a39: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a49: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000425a69: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430a79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004308d4: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456aab: movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x00000000004157f4: movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004258c1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000425901: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000430931: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430921: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004258e1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000430911: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000425981: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004309b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430991: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000425941: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430951: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000425961: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430971: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000430a91: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a21: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a31: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a41: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a51: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a71: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004258a1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004258b1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308e1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004308d1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043b886: movq mm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000043b935: movq mm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000430a95: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a25: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a35: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a45: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a55: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a75: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000425a8e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a9e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000425a2e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a3e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x0000000000425a4e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a5e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000425a6e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430a7e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x00000000004258a5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004258b5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308e5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000425908: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000425928: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000430938: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000430928: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004258e8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000430918: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000425989: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004259a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004309b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000430999: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004259ec: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004309fc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425a0c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a1c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259cd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309dd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425949: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000430959: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000425969: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000430979: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004258c9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004308f9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000425a8a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a9a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a2a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a3a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000425a4a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000430a5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000425a6a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430a7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004308d5: movq qword ptr [rdi], mm0; ret; 
0x000000000043b885: movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000043b934: movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004428f6: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000470914: movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004215fa: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044db67: movsb byte ptr [rdi], byte ptr [rsi]; idiv edi; push rsi; ret 0xf10; 
0x0000000000408f9b: movsb byte ptr [rdi], byte ptr [rsi]; mov rdx, qword ptr [rsp]; mov rax, qword ptr [rsp + 8]; mov rsi, rbx; mov rdi, r15; call rax; 
0x00000000004215ec: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041e658: movsb byte ptr [rdi], byte ptr [rsi]; sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x182d; cmovne rax, rdx; ret; 
0x0000000000455840: movsb byte ptr [rdi], byte ptr [rsi]; test byte ptr [rbx], al; add byte ptr [rax + 0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x000000000041fa25: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000042196e: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421121: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000047082e: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004707be: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000046a172: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000047312c: movss xmm0, dword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x000000000046902c: movsx eax, byte ptr [rcx]; neg eax; ret; 
0x00000000004690b9: movsx eax, dl; sub eax, r8d; ret; 
0x000000000044df66: movsx ecx, byte ptr [rsi]; cmp ecx, edi; jb 0x4df50; mov eax, r8d; ret; 
0x000000000043d34f: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000043d308: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000040fe5a: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000404003: movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x0000000000466c6b: movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000004018f6: movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000040fdaa: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000438005: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045c636: movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x00000000004674ac: movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x0000000000405a86: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040196b: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000430b28: movsxd rax, ecx; ret; 
0x00000000004255f9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040b397: movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000401983: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000455844: movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000004496f1: movsxd rcx, dword ptr [rsi + rdi*4]; add rcx, rsi; jmp rcx; 
0x0000000000430bae: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004556a6: movsxd rdi, edi; cmp rdi, qword ptr [rip + 0x37910]; jae 0x556bd; lea rax, [rip + 0x4cc67]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000044a327: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004557aa: movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x0000000000403849: movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000464e70: movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x45c]; lea rsi, [rbp - 0x430]; mov eax, 0x14; syscall; 
0x0000000000407c89: movsxd rsi, dword ptr [rdi + r8*4]; add rsi, rdi; jmp rsi; 
0x000000000047312d: movups xmm0, xmmword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x000000000045b942: movups xmm1, xmmword ptr [rdi + rdx + 0x10]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x0000000000421e6a: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004224e4: movups xmm2, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000422250: movups xmm3, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f26: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000042248c: movups xmm7, xmmword ptr [rsi + rdx - 0x10]; cmp rdx, 0x20; ja 0x22500; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000422fed: movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004225e3: movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422ff2: movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004225e8: movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x00000000004225ed: movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422fe3: movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000422fe9: movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000046d20e: movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x000000000046d209: movups xmmword ptr [r9 - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x0000000000416eef: movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x00000000004225e4: movups xmmword ptr [rax + 0x10], xmm1; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422fee: movups xmmword ptr [rax + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004225e9: movups xmmword ptr [rax + 0x20], xmm0; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000422ff3: movups xmmword ptr [rax + 0x20], xmm5; ret; 
0x000000000046ff9d: movups xmmword ptr [rax + 0x2a0], xmm0; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x00000000004225ee: movups xmmword ptr [rax + 0x30], xmm7; ret; 
0x00000000004571be: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000422fe4: movups xmmword ptr [rax + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000422fea: movups xmmword ptr [rax], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000456aee: movups xmmword ptr [rax], xmm0; ret; 
0x0000000000456ab3: movups xmmword ptr [rax], xmm1; ret; 
0x0000000000417abe: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dbe: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000457940: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000417ac2: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dc2: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000043b93d: movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000041591d: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000412dba: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000041417b: movups xmmword ptr [rbx + 8], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004134b1: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000045f0b9: movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000416450: movups xmmword ptr [rcx + 0x10], xmm0; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416454: movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a08: movups xmmword ptr [rcx + 0x20], xmm10; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000422a09: movups xmmword ptr [rcx + 0x20], xmm2; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416458: movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a0e: movups xmmword ptr [rcx + 0x30], xmm1; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000422a0d: movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041645c: movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000422a13: movups xmmword ptr [rcx + 0x40], xmm0; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000422a12: movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000422a17: movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000046d20f: movups xmmword ptr [rcx - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x000000000046d20a: movups xmmword ptr [rcx - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x6d1a0; ret; 
0x000000000042203b: movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000423edb: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000421f2e: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224ec: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042209e: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423edf: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004220a2: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423ee3: movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004220a6: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000041639b: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000416285: movups xmmword ptr [rdi + 0xa0], xmm0; ret; 
0x0000000000415837: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157fc: movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000423e08: movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000423e67: movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000421e72: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000421f32: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000422264: movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f8b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000042249a: movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042225f: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004224f0: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000421f37: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000421f90: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000042225a: movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f95: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000422255: movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f9a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000423e74: movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000423e70: movups xmmword ptr [rdi - 0x20], xmm0; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000046b81f: movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x0000000000423ed8: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000421f2b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004224e9: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042209b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000423e64: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000421e6f: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000422497: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000423e0d: movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000422033: movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000042202f: movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000042202b: movups xmmword ptr [rdx + 0x30], xmm5; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000045781a: movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004220ab: movups xmmword ptr [rdx + rdi - 0x10], xmm0; ret; 
0x00000000004220aa: movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000422038: movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000422037: movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000043b88e: movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000043b87e: movups xmmword ptr [rip + 0x7046b], xmm0; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000045ea21: movzx eax, al; add rsp, 0x58; ret; 
0x000000000040fe57: movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040fda7: movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000405a83: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000414730: movzx eax, al; neg eax; ret; 
0x0000000000414e2f: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b818: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b010: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042e96d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004165bb: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041423c: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041421a: movzx eax, byte ptr [rax]; ret; 
0x00000000004320c8: movzx eax, byte ptr [rdi + r9 + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045b95f: movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b6f8: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ae79: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b708: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000045ae99: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b877: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000045b04b: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b864: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000045b02b: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000040db4d: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000045b5b8: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae58: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b258: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; xtest; jne 0x5b267; vzeroupper; ret; 
0x0000000000426fa4: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ce64: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042c3a6: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042cff9: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004320c9: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000426fc4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ce75: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042c3c4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000426fe4: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ce86: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c3d8: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042d080: movzx eax, byte ptr [rdi + rcx - 0x20]; movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000426f85: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ce54: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c394: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042cfe4: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042eb8b: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042cfcb: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042af08: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5490d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296b8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5615d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042e7ff: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042e798: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042af23: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x548f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004296d3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x56143]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000431268: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042e7b3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045393c: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x4e8d9]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043602e: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x0000000000414e30: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401927: movzx eax, cl; pop rbx; ret; 
0x0000000000423ab1: movzx eax, dh; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423bc9: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440461: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000401997: movzx eax, dl; pop rbx; ret; 
0x0000000000423ab0: movzx eax, sil; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423bc8: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440460: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000470656: movzx eax, word ptr [rdi + 0x2d0]; mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x00000000004320ce: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004313db: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045b95a: movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b6f3: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045ae74: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b703: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000045ae94: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b813: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b00b: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b872: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000045b046: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b85f: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000045b026: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b5b4: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae54: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000426fa9: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b69: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce69: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042c3ab: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042cffe: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c529: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426fc9: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b89: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce7a: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042c3c9: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004320cf: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c549: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426fe9: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425ba9: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce8b: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c3dd: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042d085: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c5d3: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426f89: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b49: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce58: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c398: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042cfe8: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c508: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042c8f8: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x2c907; vzeroupper; ret; 
0x0000000000431893: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x318a2; vzeroupper; ret; 
0x000000000042cfd0: movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c4ec: movzx ecx, byte ptr [rsi + rdx + 0x60]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000435c5a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35c50; ret; 
0x0000000000435d0a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35d00; ret; 
0x0000000000435fca: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x35fc0; sub rax, 1; ret; 
0x000000000042e794: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042ea56: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x2ea40; xor eax, eax; sub eax, ecx; ret; 
0x000000000042e7b0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043126b: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000425250: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a50: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000042fb20: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000470ca5: movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x000000000045b16e: movzx edi, byte ptr [rdi + rdx - 1]; movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000045b915: movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x0000000000470ca6: movzx edi, ch; pop rbx; pop rbp; jmp rdx; 
0x0000000000476450: movzx edx, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x00000000004540af: movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x4dd66]; mov ecx, 1; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e3b4: movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2a9: movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000453585: movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e301: movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000408728: movzx edx, byte ptr [rdi]; test dl, dl; jne 0x8708; ret; 
0x000000000042e971: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000435e7a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x35e70; lea rax, [rcx - 1]; ret; 
0x0000000000454145: movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454020: movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4ddf5]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e457: movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e359: movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004298ff: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x55f16]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042eb8f: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042e803: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042f7ce: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x2f7d8; xchg edx, eax; sub eax, edx; ret; 
0x0000000000434d13: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x34d1d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000425240: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000424a40: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004302e0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042fb10: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000045c94b: movzx esi, bl; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000415e6c: movzx esi, byte ptr [r12]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000045b173: movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x0000000000415e6d: movzx esi, byte ptr [rsp]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x0000000000420e5e: movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004224d0: movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000041f7c8: movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000041423b: movzx r8, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043602d: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x0000000000464829: neg byte ptr [rbx + 0x48]; mov eax, esi; ret; 
0x0000000000457cfa: neg eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004384c7: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000437d2f: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000438767: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000414733: neg eax; ret; 
0x0000000000410633: neg eax; sbb eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004701d3: neg eax; sbb eax, eax; add rsp, 8; ret; 
0x00000000004647d3: neg eax; test bl, bl; pop rbx; cmove rsi, rax; mov rax, rsi; ret; 
0x00000000004647d2: neg rax; test bl, bl; pop rbx; cmove rsi, rax; mov rax, rsi; ret; 
0x00000000004560bb: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004775db: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000478543: nop dword ptr [rax + rax]; add rsp, 8; ret; 
0x00000000004644cb: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000045c863: nop dword ptr [rax + rax]; and ch, 0x10; lea rdx, [rip - 0x38eb2]; lea rax, [rip - 0x38c79]; cmove rax, rdx; ret; 
0x000000000041ed23: nop dword ptr [rax + rax]; and ecx, 8; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead3: nop dword ptr [rax + rax]; and ecx, 8; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x0000000000424728: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bf98: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ba5b: nop dword ptr [rax + rax]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042f7eb: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000456fc3: nop dword ptr [rax + rax]; call 0x12c70; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000402feb: nop dword ptr [rax + rax]; call qword ptr [rbx + 0x10]; 
0x0000000000408aeb: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000457b9b: nop dword ptr [rax + rax]; cmp dword ptr [rdi], 1; je 0x57bb0; ret; 
0x000000000046dd2b: nop dword ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6dd40; ret; 
0x0000000000475518: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000045b0db: nop dword ptr [rax + rax]; jb 0x5b0f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000045b4db: nop dword ptr [rax + rax]; jb 0x5b4f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042bae8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042baf8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb08: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb18: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb28: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba78: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042ba88: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042ba98: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042baa8: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042bab8: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042bac8: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042bad8: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000041ee1b: nop dword ptr [rax + rax]; lea rax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ef0b: nop dword ptr [rax + rax]; lea rax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x0000000000459ebb: nop dword ptr [rax + rax]; lea rax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041ebe3: nop dword ptr [rax + rax]; lea rax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ec5b: nop dword ptr [rax + rax]; lea rax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ecdb: nop dword ptr [rax + rax]; lea rax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000044ace3: nop dword ptr [rax + rax]; lea rdi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x0000000000425738: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307d8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000042356b: nop dword ptr [rax + rax]; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042575b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004187e3: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000043947b: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000043947b: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x0000000000437d88: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; 
0x0000000000437d88: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; ret; 
0x000000000045e778: nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x000000000045e7ab: nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7ab: nop dword ptr [rax + rax]; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7db: nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e7db: nop dword ptr [rax + rax]; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e80b: nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e80b: nop dword ptr [rax + rax]; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e83b: nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x000000000045e83b: nop dword ptr [rax + rax]; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x000000000043944b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000043944b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000417f48: nop dword ptr [rax + rax]; mov eax, 0xba; syscall; 
0x0000000000411c08: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415d98: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000045d203: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x000000000043e323: nop dword ptr [rax + rax]; mov eax, 8; ret; 
0x000000000043a56b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x7172a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000418a9b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x9316e]; test eax, eax; jne 0x18ab0; ret; 
0x0000000000437d53: nop dword ptr [rax + rax]; mov eax, edx; syscall; 
0x000000000043ab63: nop dword ptr [rax + rax]; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000403d6b: nop dword ptr [rax + rax]; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x00000000004302fb: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000423f1b: nop dword ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000470be8: nop dword ptr [rax + rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000045eac8: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000044a31b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044a338: nop dword ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004170e8: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000469678: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000456feb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x00000000004188bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x188d0; ret; 
0x000000000041892b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x18940; ret; 
0x0000000000457e18: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000457b8b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b7b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b6b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x000000000041887b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418868: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000457e2b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x0000000000418918: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x00000000004188ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c89e], rax; ret; 
0x0000000000418898: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000045c6e8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f859]; ret; 
0x000000000045c6d8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f861]; ret; 
0x000000000045c6c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f869]; ret; 
0x000000000045c6b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f871]; ret; 
0x000000000045c6a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f879]; ret; 
0x000000000045c698: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f881]; ret; 
0x000000000045c688: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f889]; ret; 
0x000000000045c678: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f891]; ret; 
0x000000000045c668: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f899]; ret; 
0x000000000045c658: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c648: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x4f8a9]; ret; 
0x0000000000447718: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x648f9]; ret; 
0x000000000043e438: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x6db99]; ret; 
0x000000000043e428: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x0000000000417158: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000046b60b: nop dword ptr [rax + rax]; mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x00000000004216fb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004257cb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000043086b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000437d23: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000043875b: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000047628b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000043084b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000046df2b: nop dword ptr [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rbx]; 
0x00000000004095db: nop dword ptr [rax + rax]; mov rsi, r12; mov rdi, r13; mov rdx, rbp; call rbx; 
0x000000000042524b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000042fb1b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000439473: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e803: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e833: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439443: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000043a684: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000439264: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x000000000044a504: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000417124: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x0000000000401554: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000435ff5: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004756e7: nop dword ptr [rax + rax]; nop; endbr64; ret; 
0x000000000042ba67: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba57: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000004384a7: nop dword ptr [rax + rax]; nop; mov eax, 0x18; syscall; 
0x0000000000439416: nop dword ptr [rax + rax]; nop; mov eax, 0xb; syscall; 
0x0000000000417106: nop dword ptr [rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000004391f6: nop dword ptr [rax + rax]; nop; mov eax, 1; syscall; 
0x0000000000417146: nop dword ptr [rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adc6: nop dword ptr [rax + rax]; nop; ret; 
0x000000000045e2b6: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x000000000042b897: nop dword ptr [rax + rax]; nop; xor rax, rax; ret; 
0x0000000000401613: nop dword ptr [rax + rax]; ret; 
0x000000000045b0eb: nop dword ptr [rax + rax]; sbb eax, eax; or eax, 1; ret; 
0x00000000004576d3: nop dword ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000416633: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000046b773: nop dword ptr [rax + rax]; sub rsp, 8; call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x0000000000415578: nop dword ptr [rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000046b623: nop dword ptr [rax + rax]; test rdx, rdx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000437a6b: nop dword ptr [rax + rax]; test rsi, rsi; jne 0x37a79; xor rax, rax; ret; 
0x000000000045a11b: nop dword ptr [rax + rax]; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042452b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004242ab: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242bb: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242cb: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045da18: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da2b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da3b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da4b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045b5ab: nop dword ptr [rax + rax]; tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000430f1b: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f2b: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f3b: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045a1ab: nop dword ptr [rax + rax]; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042355b: nop dword ptr [rax + rax]; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000420e6b: nop dword ptr [rax + rax]; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042354b: nop dword ptr [rax + rax]; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x000000000040f84b: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000401aa3: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000040951c: nop dword ptr [rax]; add r14, r13; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000045d1f5: nop dword ptr [rax]; add rax, 3; ret; 
0x00000000004756d5: nop dword ptr [rax]; add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000457d5c: nop dword ptr [rax]; add rsp, 0x28; mov eax, 0x16; pop rbx; pop rbp; ret; 
0x0000000000477524: nop dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004646bc: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000424719: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bb9d: nop dword ptr [rax]; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042bb8d: nop dword ptr [rax]; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000424739: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042470d: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000045ad3c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045bbdc: nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000043535d: nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000000046b475: nop dword ptr [rax]; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000470d24: nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000046f2f4: nop dword ptr [rax]; call rax; 
0x000000000044a719: nop dword ptr [rax]; cmp byte ptr [rip + 0x5b351], 0; je 0x4a740; mov eax, 0x13e; syscall; 
0x000000000043878d: nop dword ptr [rax]; cmp byte ptr [rip + 0x6d2e1], 0; je 0x387b0; mov eax, 1; syscall; 
0x0000000000415cd9: nop dword ptr [rax]; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x000000000047554c: nop dword ptr [rax]; endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x00000000004754bc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047555c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x00000000004755bc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047556c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000045b8dd: nop dword ptr [rax]; jne 0x5b8eb; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043d27d: nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000417fcd: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000418461: nop dword ptr [rax]; mov eax, 0x23; ret; 
0x0000000000470c2c: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000470c2c: nop dword ptr [rax]; mov eax, 0x26; syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x000000000043a68c: nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x000000000043a68c: nop dword ptr [rax]; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000043926c: nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x0000000000437cfd: nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x0000000000438fc9: nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000043882d: nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000043882d: nop dword ptr [rax]; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x0000000000458f6d: nop dword ptr [rax]; mov eax, dword ptr [rdi]; test al, 2; je 0x58f80; xor eax, eax; ret; 
0x000000000040a739: nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000043083d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000410835: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000424a6d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x000000000041646c: nop dword ptr [rax]; mov qword ptr [rax + 0xa0], 0xffffffffffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041890c: nop dword ptr [rax]; mov qword ptr [rip + 0x8c8a1], rax; ret; 
0x000000000046d00d: nop dword ptr [rax]; mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000044a50c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044a4e5: nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004393dc: nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000041ba9c: nop dword ptr [rax]; mov rax, 0xffffffffffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000044a37c: nop dword ptr [rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000044a35c: nop dword ptr [rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000416509: nop dword ptr [rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004705c5: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004705b4: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000041712c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x000000000043599d: nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000421f0d: nop dword ptr [rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000043088d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000043031d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043089d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000004385a4: nop dword ptr [rax]; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004391dd: nop dword ptr [rax]; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000040adec: nop dword ptr [rax]; mov rdx, r15; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x00000000004390ed: nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000412b55: nop dword ptr [rax]; mov rsi, r12; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004308ec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000043090c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000043098c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000043094d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000043096c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004258ad: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004308d9: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000423e6d: nop dword ptr [rax]; movups xmmword ptr [rdi - 0x20], xmm0; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000042e7ad: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042523d: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004302dd: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042fb09: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000457df4: nop dword ptr [rax]; neg eax; ret; 
0x000000000044a4fc: nop dword ptr [rax]; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000045e305: nop dword ptr [rax]; pop rbx; ret; 
0x000000000040155c: nop dword ptr [rax]; ret; 
0x0000000000464505: nop dword ptr [rax]; test rax, rax; je 0x64500; xor eax, eax; ret; 
0x0000000000439f2d: nop dword ptr [rax]; test rdi, rdi; je 0x39f3a; test rsi, rsi; jne 0x39f40; ret; 
0x000000000045d44d: nop dword ptr [rax]; tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043501d: nop dword ptr [rax]; tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004370ed: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x00000000004370cd: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004377c9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377b9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x0000000000435399: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x0000000000435389: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000043537c: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x0000000000435369: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377d9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000045db9c: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000045a98d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000045a99d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000045de7d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045db8c: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x0000000000434ddd: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000434dcd: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000434dac: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000430f0c: nop dword ptr [rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceac: nop dword ptr [rax]; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000430d0d: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000043555c: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043556d: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379dc: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379bd: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000042ce4d: nop dword ptr [rax]; tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000423b69: nop dword ptr [rax]; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000041c8dd: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x00000000004146fc: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000417ccc: nop dword ptr [rax]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000458c45: nop dword ptr [rax]; xor r10d, r10d; mov edx, 1; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000458c75: nop dword ptr [rax]; xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000042bf97: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000475517: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042bae7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042baf7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb07: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb17: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb27: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba77: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042ba87: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042ba97: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042baa7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042bab7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042bac7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042bad7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000425737: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307d7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000411c07: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004170e7: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000457e17: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000418867: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000418897: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x0000000000417157: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000439472: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e802: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e832: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439442: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000043a683: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000439263: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x000000000044a503: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000417123: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x0000000000401553: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000435ff4: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004756e6: nop dword ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000042ba66: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba56: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000004384a6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x18; syscall; 
0x0000000000439415: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x0000000000417105: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000004391f5: nop dword ptr cs:[rax + rax]; nop; mov eax, 1; syscall; 
0x0000000000417145: nop dword ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adc5: nop dword ptr cs:[rax + rax]; nop; ret; 
0x000000000045e2b5: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000042b896: nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000417117: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000415577: nop dword ptr cs:[rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000045da17: nop dword ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x00000000004775da: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004644ca: nop word ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041ed22: nop word ptr [rax + rax]; and ecx, 8; lea rax, [rip + 0x1174e]; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000041ead2: nop word ptr [rax + rax]; and ecx, 8; lea rax, [rip + 0x690e]; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x0000000000424727: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000402fea: nop word ptr [rax + rax]; call qword ptr [rbx + 0x10]; 
0x0000000000408aea: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000457b9a: nop word ptr [rax + rax]; cmp dword ptr [rdi], 1; je 0x57bb0; ret; 
0x000000000041ee1a: nop word ptr [rax + rax]; lea rax, [rip + 0x120b9]; test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041ef0a: nop word ptr [rax + rax]; lea rax, [rip + 0x16409]; test edx, 0x40000000; je 0x1eee8; ret; 
0x0000000000459eba: nop word ptr [rax + rax]; lea rax, [rip + 0x21c9]; test edx, 0x40000000; je 0x59e98; ret; 
0x000000000041ebe2: nop word ptr [rax + rax]; lea rax, [rip + 0xc7d1]; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ec5a: nop word ptr [rax + rax]; lea rax, [rip + 0xd2d9]; test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ecda: nop word ptr [rax + rax]; lea rax, [rip + 0xe139]; test ecx, 0x40000000; je 0x1ecc1; ret; 
0x000000000044ace2: nop word ptr [rax + rax]; lea rdi, [rip + 0x614f1]; call 0x17cd0; xor eax, eax; add rsp, 8; ret; 
0x00000000004187e2: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000045e777: nop word ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x0000000000417f47: nop word ptr [rax + rax]; mov eax, 0xba; syscall; 
0x0000000000415d97: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000043ab62: nop word ptr [rax + rax]; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000043080a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000423f1a: nop word ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000044a31a: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044a337: nop word ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000457b8a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e923], eax; ret; 
0x0000000000457b7a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e92f], eax; ret; 
0x0000000000457b6a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e93b], eax; ret; 
0x000000000041887a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c8fb], 1; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000457e2a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x4e696], rax; ret; 
0x000000000043e427: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x000000000046b60a: nop word ptr [rax + rax]; mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000043086a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042fb1a: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000417cba: nop word ptr [rax + rax]; ret; 
0x00000000004576d2: nop word ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000416632: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000046b622: nop word ptr [rax + rax]; test rdx, rdx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x00000000004242aa: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242ba: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242ca: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045da2a: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da3a: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da4a: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045b5aa: nop word ptr [rax + rax]; tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000040f84a: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000042bf96: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000475516: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042bae6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042baf6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb06: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb16: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb26: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba76: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042ba86: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042ba96: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042baa6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042bab6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042bac6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042bad6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000425736: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307d6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000411c06: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004170e6: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000457e16: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x0000000000418866: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x0000000000418896: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x0000000000417156: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000439471: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e801: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e831: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439441: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000043a682: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000439262: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x000000000044a502: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000417122: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x0000000000401552: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000435ff3: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004756e5: nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000042ba65: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba55: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000004384a5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x18; syscall; 
0x0000000000439414: nop word ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x0000000000417104: nop word ptr cs:[rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000004391f4: nop word ptr cs:[rax + rax]; nop; mov eax, 1; syscall; 
0x0000000000417144: nop word ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adc4: nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000045e2b4: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000042b895: nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000417116: nop word ptr cs:[rax + rax]; ret; 
0x0000000000415576: nop word ptr cs:[rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000045da16: nop word ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000442e97: nop; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000473f38: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000474dfa: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7af0b7c6], al; imul edi, edi, 0xb948ffff; mov eax, 0xf; syscall; 
0x0000000000403a23: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000443332: nop; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045d1ef: nop; add rax, 1; ret; 
0x000000000043e41f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046823a: nop; and byte ptr [rbx], al; add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x000000000046828a: nop; and byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000041e8df: nop; and ch, 2; lea rdx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7df: nop; and ch, 2; lea rdx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6df: nop; and ch, 2; lea rdx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x0000000000457adf: nop; and edi, 2; je 0x57af0; ret; 
0x000000000042bbaf: nop; bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042bbbf: nop; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042b42f: nop; bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x2b42c; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000459faf: nop; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045ad4f: nop; bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad5f: nop; bsf eax, eax; sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043075f: nop; bsf rdx, rdx; lea r11, [rip + 0x4be25]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000434d9f: nop; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000045358c: nop; call 0xffffffff8b4d3596; add al, 0xd0; jmp rax; 
0x000000000043b06f: nop; cmp byte ptr [rip + 0x6bce9], 0; jne 0x3b088; mov rdx, qword ptr [rip + 0x6bce8]; mov rax, rdx; ret; 
0x000000000041c8ff: nop; cmp byte ptr [rip + 0x8f2f9], 0; jne 0x1c910; ret; 
0x0000000000412c6f: nop; cmp qword ptr [rip + 0x91d58], 0; je 0x12c7b; ret; 
0x00000000004755af: nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004756ef: nop; endbr64; ret; 
0x0000000000477d8f: nop; ja 0x77db0; xor eax, eax; ret; 
0x000000000042ba6f: nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba5f: nop; lea rax, [rdi]; ret; 
0x000000000043905f: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004307ef: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004384af: nop; mov eax, 0x18; syscall; 
0x00000000004384af: nop; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x384c0; ret; 
0x000000000045e58f: nop; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000043941f: nop; mov eax, 0xb; syscall; 
0x000000000043941f: nop; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x000000000041710f: nop; mov eax, 0xffffffff; ret; 
0x00000000004391ff: nop; mov eax, 1; syscall; 
0x00000000004391ff: nop; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x000000000045d20f: nop; mov eax, 2; ret; 
0x000000000045d217: nop; mov eax, 3; ret; 
0x000000000045d21f: nop; mov eax, 4; ret; 
0x000000000045d227: nop; mov eax, 5; ret; 
0x000000000045d22f: nop; mov eax, 6; ret; 
0x000000000045d237: nop; mov eax, 7; ret; 
0x0000000000416e1f: nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000046bf6f: nop; mov eax, dword ptr [rip + 0x3fd2a]; ret; 
0x000000000042525f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000042fb2f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000468237: nop; mov qword ptr [rax + 0x320], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x328], rdx; ret; 
0x0000000000423b8f: nop; mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x000000000047550f: nop; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000043858f: nop; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000004170cf: nop; mov rax, 0xffffffffffffffff; ret; 
0x000000000041714f: nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000041420f: nop; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x14220; movzx eax, byte ptr [rax]; ret; 
0x00000000004188ff: nop; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x18910; ret; 
0x000000000041884f: nop; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c92b], 1; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041880f: nop; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x8c96b], 1; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x000000000045c63f: nop; mov rax, qword ptr [rip + 0x4f911]; ret; 
0x0000000000437cdf: nop; mov rax, qword ptr [rip + 0x6c7a1]; test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x000000000043933f: nop; mov rax, qword ptr [rip + 0x6c811]; test rax, rax; je 0x3934d; ret; 
0x000000000043087f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000004308af: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004308bf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004387ff: nop; mov rdx, 0xffffffffffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004257bf: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000043091f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000430a8f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000430a4f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000430a6f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042589f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004308cf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044a500: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000040158f: nop; ret; 
0x0000000000468245: nop; sub byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x0000000000416e4f: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041470f: nop; test rdx, rdx; jne 0x14720; xor eax, eax; ret; 
0x00000000004355df: nop; test rsi, rsi; jne 0x355e9; xor rax, rax; ret; 
0x0000000000423f7f: nop; tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000423f8f: nop; tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000423f9f: nop; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000043710f: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x00000000004370ff: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000042429f: nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045cebf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045cecf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cedf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045a12f: nop; tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042405f: nop; tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000434f0f: nop; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042ce5f: nop; tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042353f: nop; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000423b7f: nop; vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000043234f: nop; xor eax, eax; ret; 
0x000000000043167f: nop; xor eax, eax; vzeroupper; ret; 
0x000000000042b89f: nop; xor rax, rax; ret; 
0x0000000000431250: not ecx; bzhi eax, ecx, edx; jne 0x3123b; xor eax, eax; vzeroupper; ret; 
0x0000000000431f08: not ecx; bzhi eax, ecx, edx; jne 0x31ef9; xor eax, eax; ret; 
0x000000000045807d: not esi; and esi, 0x80; syscall; 
0x000000000044bd52: or al, 0; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000045c7c9: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x175d; cmove rax, rdx; ret; 
0x000000000042a282: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434095: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043929a: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000439271: or al, 0; add byte ptr [rax], al; syscall; 
0x000000000041d7e1: or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041baaa: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c281: or al, 0; add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x000000000040bc58: or al, 0; add byte ptr [rbx - 0x4217d783], cl; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044c6d2: or al, 0; add dh, dh; ret 0xf10; 
0x000000000042e796: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045b913: or al, 0x16; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000042ea58: or al, 0x16; test al, al; jne 0x2ea40; xor eax, eax; sub eax, ecx; ret; 
0x0000000000472f85: or al, 0x24; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000472f7c: or al, 0x24; call 0x730c0; mov rcx, qword ptr [rsp]; add rsp, 0x38; mov rax, rcx; ret; 
0x0000000000413941: or al, 0x24; mov rdi, rbx; call rax; 
0x0000000000460897: or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000043a3e3: or al, 0x48; add esp, 8; ret; 
0x000000000043ab55: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x0000000000415994: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000046bd88: or al, 0x48; mov edx, dword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000434f37: or al, 0x48; sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000041cc08: or al, 0x5a; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045020c: or al, 0x7e; ror dword ptr [rbx - 0x7cb7fbbe], 1; ret 0xb904; 
0x000000000040b601: or al, 0x83; ret; 
0x0000000000450ef0: or al, 0x84; ror byte ptr [rdi], cl; mov ah, dh; adc al, 0; add dh, dh; ret 0xf40; 
0x0000000000401985: or al, 0x86; add rcx, rsi; jmp rcx; 
0x0000000000401965: or al, 0x89; ret 0xe283; 
0x000000000040b399: or al, 0x8a; add rcx, rdx; jmp rcx; 
0x00000000004296c4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000420759: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000426f93: or al, 0x8b; sub eax, ecx; ret; 
0x0000000000425b53: or al, 0x8b; sub eax, ecx; vzeroupper; ret; 
0x000000000042727f: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000425e0c: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426563: or al, 0x8b; sub eax, ecx; xtest; jne 0x26570; vzeroupper; ret; 
0x000000000043ab6f: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000455846: or al, 0x8e; add rcx, rsi; jmp rcx; 
0x000000000043ab58: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x3ab68; ret; 
0x00000000004255fb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255ff: or al, 0xb; jmp rcx; 
0x00000000004496f3: or al, 0xbe; add rcx, rsi; jmp rcx; 
0x0000000000457623: or al, 0xe8; mov r14b, 0xfb; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000044cda8: or al, 0xe9; test eax, 0xc7fffff6; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000426f8b: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000425b4b: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce5a: or al, 0xe; sub eax, ecx; ret; 
0x000000000042c39a: or al, 0xe; sub eax, ecx; vzeroupper; ret; 
0x000000000042cfea: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c50a: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042c8fa: or al, 0xe; sub eax, ecx; xtest; jne 0x2c907; vzeroupper; ret; 
0x0000000000431895: or al, 0xe; sub eax, ecx; xtest; jne 0x318a2; vzeroupper; ret; 
0x000000000045762c: or al, 0xeb; ret 0x5590; 
0x000000000046975d: or al, 0xeb; ret; 
0x0000000000418413: or al, 0xf6; ret 0x7501; 
0x000000000044e1b3: or al, 0xf6; ret 0xf01; 
0x0000000000455983: or al, 0xf6; ret 0xf04; 
0x0000000000450ec6: or al, 0xf6; ret 0xf08; 
0x000000000044d728: or al, 0xf6; ret 0xf40; 
0x0000000000475500: or al, 0xf7; cmp al, 8; jne 0x14d1; mov qword ptr [rcx], rdx; ret; 
0x0000000000410674: or al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000458607: or al, 1; mov dword ptr [rdi + 8], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000047200a: or al, 1; setne al; mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x0000000000468284: or al, 3; add byte ptr [rax], al; mov qword ptr [rax + 0x320], rdx; ret; 
0x000000000043c769: or al, 4; add al, ch; jg 0x3c7e6; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000045b5b6: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae56: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000004314d9: or al, ah; cmp edx, ecx; ja 0x314b2; xor eax, eax; vzeroupper; ret; 
0x0000000000432199: or al, ah; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x000000000042a3f2: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a447: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ed01: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047537b: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000439451: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000439451: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000408795: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x0000000000401ca5: or al, byte ptr [rax]; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040ddc7: or al, byte ptr [rax]; add byte ptr [rdi], cl; test byte ptr [rax], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x000000000040118f: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe; mov qword ptr [rsp], 0x20; syscall; 
0x0000000000401b36: or al, byte ptr [rax]; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b30: or al, byte ptr [rax]; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401b2a: or al, byte ptr [rax]; mov dword ptr [rip + 0xaa306], ebx; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000401a72: or al, byte ptr [rax]; mov rsi, qword ptr [rsp + 0x18]; mov edi, dword ptr [rsp + 0x14]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000401b3c: or al, byte ptr [rax]; pop rbx; ret; 
0x000000000040ddc6: or al, byte ptr es:[rax]; add byte ptr [rdi], cl; test byte ptr [rax], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x000000000040118e: or al, byte ptr gs:[rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe; mov qword ptr [rsp], 0x20; syscall; 
0x000000000047890c: or al, ch; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004387ee: or al, ch; in al, dx; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000419b1b: or al, ch; jmp rax; 
0x0000000000436a21: or al, ch; leave; mov dword ptr [rax], eax; add bl, ch; ret; 
0x0000000000477781: or al, ch; sbb dword ptr [rbx - 6], edx; jmp qword ptr [rsi + 0xf]; 
0x0000000000464963: or al, ch; xchg dword ptr [rsi - 0x76b70005], ecx; ret; 
0x000000000044a6f3: or al, ch; xchg edi, eax; call 0xffffffffc089a6fb; jne 0x4a708; add rsp, 8; ret; 
0x0000000000418b93: or al, ch; xlatb; sbb eax, dword ptr [rdx]; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x00000000004314d8: or al, r12b; cmp edx, ecx; ja 0x314b2; xor eax, eax; vzeroupper; ret; 
0x0000000000432198: or al, r12b; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x0000000000410a82: or bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000044a297: or bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004015ff: or bh, byte ptr [rdi + 0x494d98]; call 0x77930; mov byte ptr [rip + 0xa568f], 1; pop rbp; ret; 
0x0000000000437cfb: or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000044987c: or byte ptr [r11 + 0x54891114], cl; ret; 
0x000000000041417d: or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000041e257: or byte ptr [r11 + 0x627709f8], al; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000412dbc: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000417248: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000414212: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000004705a2: or byte ptr [r8 - 0x73], cl; adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000043b19c: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045fc42: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x000000000044af44: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x4af58; ret; 
0x000000000044a767: or byte ptr [rax + 0x13e], bh; syscall; 
0x0000000000465319: or byte ptr [rax + 0x29], cl; ret 0x394c; 
0x000000000046715d: or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000046dcb7: or byte ptr [rax + 0x39], cl; int1; jb 0x6dca1; ret; 
0x0000000000463d3b: or byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000046c583: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000417249: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000414213: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000403c8e: or byte ptr [rax + 0x9e], bh; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000403c8d: or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000470ca4: or byte ptr [rax + 0xf], al; mov dh, 0xfd; pop rbx; pop rbp; jmp rdx; 
0x000000000041e54e: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004560a5: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x00000000004387d7: or byte ptr [rax + 1], bh; syscall; 
0x0000000000459d29: or byte ptr [rax + 1], cl; ret; 
0x000000000046b61b: or byte ptr [rax + 2], bh; ret; 
0x000000000046b61a: or byte ptr [rax + 2], r15b; ret; 
0x000000000046a355: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x00000000004188c5: or byte ptr [rax + rax], al; add byte ptr [rsi + 5], dh; ret; 
0x000000000043c9f9: or byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000469693: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000469692: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000467deb: or byte ptr [rax - 0x207bf0fd], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 5; ret 0x154; 
0x0000000000401003: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; 
0x0000000000471705: or byte ptr [rax - 0x3f], 0xe0; add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000470d15: or byte ptr [rax - 0x3f], cl; call 0x50945520; push qword ptr [rsi + rdx + 0x49]; lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004705a3: or byte ptr [rax - 0x73], cl; adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041ed2a: or byte ptr [rax - 0x73], cl; add eax, 0x1174e; lea rdx, [rip + 0x11667]; cmove rax, rdx; ret; 
0x000000000043673a: or byte ptr [rax - 0x73], cl; add eax, 0x132e; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000041f6a7: or byte ptr [rax - 0x73], cl; add eax, 0x164c1; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000041eada: or byte ptr [rax - 0x73], cl; add eax, 0x690e; lea rdx, [rip + 0x6827]; cmove rax, rdx; ret; 
0x000000000045c72a: or byte ptr [rax - 0x73], cl; add eax, 0xb0e; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x000000000041eca1: or byte ptr [rax - 0x73], cl; add eax, 0xfb17; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000040f17e: or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfffa; 
0x000000000046dcb3: or byte ptr [rax - 0x73], cl; push rax; or byte ptr [rax + 0x39], cl; int1; jb 0x6dca1; ret; 
0x000000000046ab2c: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000004189ab: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000476155: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000439842: or byte ptr [rax - 0x75], cl; jl 0x3986b; adc byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; and al, 0x18; call rax; 
0x0000000000449094: or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000457810: or byte ptr [rax - 0x77], 0x72; mov qword ptr [rdx], rax; xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x00000000004577de: or byte ptr [rax - 0x77], 2; xor eax, eax; ret; 
0x0000000000423b92: or byte ptr [rax - 0x77], cl; adc al, r15b; ret; 
0x000000000046b7e1: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x39], cl; add eax, 0x404d8; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043b8d4: or byte ptr [rax - 0x77], cl; add eax, 0x70414; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000459f25: or byte ptr [rax - 0x77], cl; call 0x5c46fc88; pop r13; ret; 
0x00000000004081ce: or byte ptr [rax - 0x77], cl; cmp cl, ch; ret 0xfffb; 
0x000000000045f0f8: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000043b19d: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000419e7f: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000408fa4: or byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 1]; call rax; 
0x00000000004136c8: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x000000000046b825: or byte ptr [rax - 0x77], cl; mov qword ptr ds:[rip + 0x40494], 0; ret; 
0x0000000000449761: or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x00000000004604b7: or byte ptr [rax - 0x77], cl; ret 0x14c; 
0x000000000044cfac: or byte ptr [rax - 0x77], cl; ret 0x1be8; 
0x0000000000411364: or byte ptr [rax - 0x77], cl; ret 0x3948; 
0x000000000046a4f2: or byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004220d7: or byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045fc43: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x0000000000457414: or byte ptr [rax - 0x7d], 0xc4; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000432256: or byte ptr [rax - 0x7d], 0xee; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000460581: or byte ptr [rax - 0x7d], cl; rcl byte ptr [rax + 0x48], 0x83; ret 0x4c08; 
0x000000000046c4fb: or byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x0000000000470e60: or byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x0000000000477a5c: or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000040552d: or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004560c3: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000042ef3c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041ed64: or byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; adc eax, 0x172e2; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x0000000000419a21: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000043676f: or byte ptr [rax], al; add byte ptr [rax - 0x428afb1b], al; ret; 
0x000000000044f11c: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 0x83; ret; 
0x000000000044f170: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsi; add al, 0x83; ret; 
0x000000000042ef3d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ef61: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041ca8b: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000441cad: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000044af45: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x4af58; ret; 
0x000000000044a5d4: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000458fc9: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000417e97: or byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r12; lea rsi, [rip + 0x63063]; mov eax, 0xe; syscall; 
0x00000000004019d3: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000043e329: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000438831: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000438831: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x000000000041c904: or byte ptr [rax], al; add byte ptr [rbp + 7], dh; ret; 
0x0000000000418fce: or byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x000000000041ee58: or byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; adc eax, 0x14f1e; cmove rax, rdx; ret; 
0x000000000041eb38: or byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; adc eax, 0xabbe; cmove rax, rdx; ret; 
0x0000000000418837: or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x8c93d], eax; ret; 
0x0000000000418887: or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8ac], rax; ret; 
0x0000000000418857: or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x0000000000418817: or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c92c], rax; ret; 
0x00000000004220d4: or byte ptr [rax], al; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ae03: or byte ptr [rax], al; je 0x3ae10; ret; 
0x0000000000417135: or byte ptr [rax], al; ret; 
0x0000000000464c2a: or byte ptr [rax], dl; add byte ptr [rax], al; mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000043a36b: or byte ptr [rax], dl; add byte ptr [rax], al; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004220d3: or byte ptr [rax], r8b; jae 0x220e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046624a: or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x000000000045c84a: or byte ptr [rbp + 0x15], dh; and ch, 4; lea rax, [rip - 0x38a97]; lea rdx, [rip - 0x3949e]; cmove rax, rdx; ret; 
0x0000000000470d4a: or byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x000000000044e0dd: or byte ptr [rbp + 0x5d8f0fed], al; add al, byte ptr [rax]; add dh, dh; ret 0xf40; 
0x0000000000408efb: or byte ptr [rbp + 1], cl; out dx, al; call rax; 
0x000000000041ecca: or byte ptr [rbp - 0x19], dh; lea rax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x00000000004588c6: or byte ptr [rbp - 0x1e7af040], al; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000045c758: or byte ptr [rbp - 0x1e], dh; lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x0000000000436768: or byte ptr [rbp - 0x1e], dh; lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000041ee88: or byte ptr [rbp - 0x25], dh; lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x000000000041eb68: or byte ptr [rbp - 0x25], dh; lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000041ee01: or byte ptr [rbp - 0x27], dh; and ch, 4; lea rdx, [rip + 0x11dd2]; lea rax, [rip + 0x1224b]; cmove rax, rdx; ret; 
0x000000000041eef1: or byte ptr [rbp - 0x27], dh; and ch, 4; lea rdx, [rip + 0x15e62]; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000459ea1: or byte ptr [rbp - 0x27], dh; and ch, 4; lea rdx, [rip + 0x1ca2]; lea rax, [rip + 0x24cb]; cmove rax, rdx; ret; 
0x000000000041ec41: or byte ptr [rbp - 0x27], dh; and ch, 4; lea rdx, [rip + 0xcef2]; lea rax, [rip + 0xd4fb]; cmove rax, rdx; ret; 
0x000000000040f8ce: or byte ptr [rbp - 0x667bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041c60d: or byte ptr [rbp - 0x73], cl; jl 0x1c617; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000455837: or byte ptr [rbx + 0x1f772ef9], al; lea rsi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000447ed7: or byte ptr [rbx + 0x37403fe], al; pop rbx; ret; 
0x00000000004141ce: or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x000000000044987d: or byte ptr [rbx + 0x54891114], cl; ret; 
0x000000000041e4a3: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000043b578: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041417e: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000404195: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041e258: or byte ptr [rbx + 0x627709f8], al; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000403193: or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x000000000044857f: or byte ptr [rbx - 0x17], bl; retf 0xfd4a; jmp qword ptr [rsi + 0x2e]; 
0x00000000004572c6: or byte ptr [rbx - 0x3b7cb7fe], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000455c8d: or byte ptr [rbx - 0x3d7cb7fe], cl; add al, 0xe9; ret; 
0x0000000000412807: or byte ptr [rbx - 0x3f7a8fb9], cl; js 0x12810; ret; 
0x00000000004183f3: or byte ptr [rbx - 0x763e76f9], cl; ret 0xc983; 
0x000000000046b40b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000046b601: or byte ptr [rcx + 0x2b807], cl; add byte ptr [rax], al; ret; 
0x000000000046b600: or byte ptr [rcx + 0x2b807], r9b; add byte ptr [rax], al; ret; 
0x0000000000469f0f: or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x000000000043c9f6: or byte ptr [rcx + 0x40893], cl; add dh, dh; ret 0x7402; 
0x0000000000455fce: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000047016b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x000000000046a6b0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x000000000046ddb5: or byte ptr [rcx + rcx*4 - 0x16], cl; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046de03: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000040d4a9: or byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x000000000041135a: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000045e8a1: or byte ptr [rcx + rdi - 0x3a], cl; jne 0x5e880; mov eax, edi; ret; 
0x000000000046b412: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000044a457: or byte ptr [rcx - 0x3fcebf8d], cl; pop rbx; ret; 
0x0000000000476102: or byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x0000000000411790: or byte ptr [rcx - 0x75], cl; push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x000000000040b46b: or byte ptr [rcx - 0x763d7639], cl; ret; 
0x000000000046b559: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000044fe15: or byte ptr [rcx - 0x77], al; ret; 
0x00000000004612ed: or byte ptr [rcx - 0x77], al; xchg ebp, eax; or byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x000000000046a415: or byte ptr [rcx - 0x77], cl; fimul word ptr [rax - 0x77]; ret; 
0x000000000040f182: or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfffa; 
0x000000000040ad69: or byte ptr [rcx - 0x77], cl; ret; 
0x00000000004606b4: or byte ptr [rcx], 0xfa; dec dword ptr [rax - 0x77]; ret; 
0x000000000041f62c: or byte ptr [rcx], bh; ret 0xe775; 
0x000000000041f604: or byte ptr [rcx], cl; ret 0xc985; 
0x00000000004378d7: or byte ptr [rcx], cl; sal bl, 1; bsf eax, eax; add rax, rdi; ret; 
0x000000000043ab1b: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000043c7c8: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x000000000043cdd8: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x000000000043cdb7: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000040888e: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000046624d: or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x0000000000423b89: or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x00000000004447ed: or byte ptr [rdi], 0x85; ret; 
0x0000000000423b83: or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000412dbd: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000415c47: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045ea20: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000046f735: or byte ptr [rdi], cl; test byte ptr [rax + rax + 0x438b0000], dl; adc byte ptr [rbp + 0x9840fc0], al; add al, 0; add byte ptr [rax + 1], cl; ret; 
0x00000000004754b1: or byte ptr [rdi], cl; test dword ptr [rbx], edx; sar al, 0xff; mov rax, qword ptr [rax]; ret; 
0x0000000000473acf: or byte ptr [rdi], cl; test ebp, ecx; fprem; dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x0000000000466a42: or byte ptr [rdi], cl; test esp, ebp; adc eax, 0x8b480000; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000438a85: or byte ptr [rdi], cl; xchg esp, eax; ret 0x3948; 
0x00000000004224a7: or byte ptr [rdx + 0x11], dh; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000408793: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x0000000000423811: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000420743: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000043d274: or byte ptr [rdx], al; add al, 0; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000460891: or byte ptr [rip + 0x7a81d375], al; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000439064: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x000000000043778e: or byte ptr [rsi + 0xf], dh; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x000000000041e84f: or byte ptr [rsi + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x1664]; lea rax, [rip + 0x161d]; cmovne rax, rdx; ret; 
0x000000000041e74f: or byte ptr [rsi + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x17a4]; lea rax, [rip + 0x172d]; cmovne rax, rdx; ret; 
0x000000000041e64f: or byte ptr [rsi + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x18a4]; lea rax, [rip + 0x182d]; cmovne rax, rdx; ret; 
0x000000000041318d: or byte ptr [rsi - 1], bh; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000456b29: or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x000000000044781a: or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000410d03: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000413d96: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000468272: or cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000471652: or cl, byte ptr [rax - 0x7d]; ret 0x8008; 
0x00000000004109d8: or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000044d042: or cl, byte ptr [rcx - 0x77]; ror dword ptr [rbp - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4d08; 
0x000000000046b7a5: or cl, byte ptr [rdi]; add ebp, edx; xor eax, eax; ret; 
0x0000000000459d9c: or cl, byte ptr [rdi]; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000466c3e: or cl, byte ptr [rdi]; xchg esp, eax; ret 0x8566; 
0x000000000040f186: or cl, ch; ret 0xfffa; 
0x0000000000411048: or cl, ch; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x000000000042eb89: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000411eb0: or dh, byte ptr [rbp + riz*2 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000435a9a: or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x0000000000403ff9: or dh, byte ptr [rdi + 0x27]; lea rcx, [rip + 0x75571]; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x0000000000416626: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x16620; lea eax, [rdx + rdi]; ret; 
0x00000000004576c6: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x576c0; lea eax, [rdx + rdi]; ret; 
0x0000000000439bf3: or dh, dh; ret 0x7401; 
0x00000000004354d1: or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043558a: or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000416330: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16330; ret; 
0x000000000042bcd6: or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000043d30b: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x0000000000408643: or dword ptr [rax + rax*8 - 0x38b78f8c], eax; ret 0xfff0; 
0x000000000046f743: or dword ptr [rax + rax], eax; add byte ptr [rax + 1], cl; ret; 
0x00000000004197e8: or dword ptr [rax - 0x73], 0x45; dec dword ptr [rax - 0x7b]; ret; 
0x000000000046dc2d: or dword ptr [rax - 0x75], ecx; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000449e8e: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000436a6a: or dword ptr [rax - 0x7d], ecx; ret 0xe902; 
0x00000000004253de: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000040bd17: or dword ptr [rax], eax; add bh, al; test eax, edi; idiv bh; call qword ptr [rax]; 
0x00000000004526a3: or dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044ee7a: or dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add al, 0x83; ret; 
0x000000000042a562: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a5b7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042edc7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000417210: or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041281a: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004393cd: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004393cd: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x39400; ret; 
0x000000000040ddcd: or dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x000000000044c3fa: or dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000417199: or dword ptr [rax], eax; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000415108: or dword ptr [rax], eax; cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x00000000004171e0: or dword ptr [rax], eax; cmp eax, 1; jg 0x171f0; ret; 
0x0000000000408b7f: or dword ptr [rax], eax; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000408a77: or dword ptr [rax], eax; cmp edx, 1; jg 0x8c00; mov edi, r13d; call rax; 
0x0000000000408b2e: or dword ptr [rax], eax; cmp edx, 1; jg 0x8c28; mov esi, r13d; mov rdi, r8; call rax; 
0x0000000000417190: or dword ptr [rax], eax; jne 0x171a8; mov qword ptr [rip + 0x909fd], rbx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x000000000041450a: or dword ptr [rax], eax; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000040e2b2: or dword ptr [rax], eax; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000418877: or dword ptr [rax], eax; ret; 
0x0000000000418aa4: or dword ptr [rax], eax; test eax, eax; jne 0x18ab0; ret; 
0x0000000000427529: or dword ptr [rbp + 0x20], 0x25; clc; fisub word ptr [rdx - 0x4e]; and dword ptr [rsi], r12d; mov ebp, 0xffd093fb; ret 0x850f; 
0x000000000044fe12: or dword ptr [rbx - 0x76bef791], ecx; ret; 
0x00000000004134c0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000043741f: or dword ptr [rbx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041ef13: or dword ptr [rcx + rax], esp; test edx, 0x40000000; je 0x1eee8; ret; 
0x000000000046da92: or dword ptr [rcx - 0x75], ecx; sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000041718f: or dword ptr [rcx], ecx; add byte ptr [rbp + 0x14], dh; mov qword ptr [rip + 0x909fd], rbx; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000417198: or dword ptr [rcx], ecx; add byte ptr [rbx + 0x909f205], al; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000004171df: or dword ptr [rcx], ecx; add byte ptr [rbx + 0x97f01f8], al; ret; 
0x000000000041719e: or dword ptr [rcx], ecx; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000401586: or dword ptr [rdi + 0x4a64d8], edi; jmp rax; 
0x000000000041e25b: or dword ptr [rdi + 0x62], esi; lea rdx, [rip + 0x5e033]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044adeb: or dword ptr [rdi - 0x2e], esi; mov rax, rcx; ret; 
0x0000000000476419: or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000045c773: or dword ptr [rdi], eax; add byte ptr [rax], al; test edx, 0x40000000; je 0x5c74f; ret; 
0x000000000040863f: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78f8c], eax; ret 0xfff0; 
0x000000000045b8e1: or dword ptr [rdi], ecx; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004690a5: or dword ptr [rsi - 0x18], esi; cmp esi, eax; je 0x68ff3; sub eax, esi; ret; 
0x0000000000450220: or dword ptr [rsi - 0x20], esi; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000040e45f: or dword ptr cs:[rax], eax; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000425a31: or eax, 0x1c478d48; ret; 
0x000000000044017e: or eax, 0x1e32ce8; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000472970: or eax, 0x22053; xor edx, edx; xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x0000000000448c2f: or eax, 0x3145de75; test byte ptr [rcx + rcx*4 - 0x11], -0x18; ret; 
0x000000000046d0c5: or eax, 0x377fe; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000455899: or eax, 0x38506; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000040fdba: or eax, 0x401f0f08; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x0000000000464512: or eax, 0x47d69; cmp rcx, rdi; je 0x64520; ret; 
0x000000000046440c: or eax, 0x47e7f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042c192: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x000000000043791f: or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0a: or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004356e5: or eax, 0x48fad348; test edx, edx; je 0x35710; bsf rax, rdx; ret; 
0x00000000004225af: or eax, 0x4c000004; add edx, eax; jmp rdx; 
0x000000000042aeda: or eax, 0x54941; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000429905: or eax, 0x55f16; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000404022: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000040fe52: or eax, 0x6ad09; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040feac: or eax, 0x6ad6b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043ae16: or eax, 0x6ad85; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000422549: or eax, 0x72; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000043ae78: or eax, 0x74000007; and cl, byte ptr [rax - 0x73]; add eax, 0x70dcb; ret; 
0x0000000000403ffe: or eax, 0x75571; movsxd rax, dword ptr [rcx + rdx*4]; add rax, rcx; jmp rax; 
0x0000000000403844: or eax, 0x75917; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x0000000000425a28: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a38: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042a112: or eax, 0x83480000; ret 0x4910; 
0x000000000042a167: or eax, 0x83480000; ret 0xe910; 
0x0000000000433fa5: or eax, 0x83480000; ret 0xeb10; 
0x000000000043ae71: or eax, 0x83480007; cmp eax, 0x70ddc; add byte ptr [rdx + riz + 0x48], dh; lea eax, [rip + 0x70dcb]; ret; 
0x0000000000434fda: or eax, 0x83d72948; rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000043ae6a: or eax, 0x89480007; cmp eax, 0x70dfc; cmp qword ptr [rip + 0x70ddc], 0; je 0x3aea0; lea rax, [rip + 0x70dcb]; ret; 
0x000000000042af0f: or eax, 0x8b000549; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000414f65: or eax, 0x8b480000; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000043aeb7: or eax, 0x8d480007; add eax, 0x70d8f; ret; 
0x0000000000414507: or eax, 0x92194; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000458960: or eax, 0xa30f4800; ret 0x820f; 
0x000000000042257f: or eax, 0xa3c; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000401b33: or eax, 0xaa304; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x0000000000437ba2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000457b37: or eax, 0xc8890f8b; and eax, 0xc; cmp eax, 4; je 0x57b21; ret; 
0x000000000040240a: or eax, 0xffffffff; ret; 
0x000000000045b0f2: or eax, 1; ret; 
0x000000000045c72f: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x8c7; cmove rax, rdx; ret; 
0x000000000044ef4f: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rsi; add al, 0x83; ret; 
0x000000000042ec0d: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a2d7: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ec31: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046ba91: or eax, dword ptr [rax]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000439421: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000439421: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x0000000000454324: or eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040e074: or eax, dword ptr [rax]; add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esp, 0x8900000c; ret 0xc083; 
0x0000000000413578: or eax, dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000042a9b1: or eax, dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000042b591: or eax, ecx; bsf rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042c0f1: or eax, ecx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045c500: or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000042c2a7: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045a6a5: or eax, ecx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x0000000000424383: or eax, ecx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045a0e9: or eax, ecx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000424035: or eax, ecx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000045b8ac: or eax, edi; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000045b178: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000045b0d0: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d0: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000045b919: or eax, edi; sub eax, ecx; ret; 
0x000000000042c2ae: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045bb3d: or eax, edx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045bd5d: or eax, edx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000439702: or eax, edx; mov qword ptr [r11], rax; pop rbx; pop rbp; ret; 
0x00000000004378d8: or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000431000: or eax, edx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000416e44: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000047371c: or ebp, ecx; jl 0x736fd; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000439f74: or ebp, ecx; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000040d4a0: or ebx, 0x15; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 8]; mov rdx, r12; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x00000000004215e1: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004556b1: or ecx, dword ptr [rax - 0x73]; add eax, 0x4cc67; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000438001: or ecx, dword ptr [rdx + 4]; add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x0000000000473ad8: or ecx, ebp; ret 0xfffa; 
0x000000000046b66c: or ecx, edx; sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000042e967: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000045b8a9: or ecx, esi; or rax, rdi; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000045b17a: or ecx, esi; sub eax, ecx; ret; 
0x000000000045b0d3: or ecx, esi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d3: or ecx, esi; sub rax, rcx; jne 0x5b4f0; ret; 
0x0000000000425733: or edi, edi; loope 0x2579d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307d3: or edi, edi; loope 0x3083d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044330f: or edi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000457a8c: or edx, 2; cmp edx, 0xa; je 0x57aa8; mov eax, esi; ret; 
0x0000000000417133: or edx, ebx; or byte ptr [rax], al; ret; 
0x00000000004311ef: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c8b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000435790: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004606b5: or edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004215df: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045a19b: or esi, ebx; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004134c1: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000042eb88: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000046b66b: or r9, rdx; sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000411047: or r9b, bpl; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x000000000040f185: or r9b, r13b; ret 0xfffa; 
0x000000000040fdb9: or rax, 0x401f0f08; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x0000000000402409: or rax, 0xffffffffffffffff; ret; 
0x000000000042b590: or rax, rcx; bsf rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x2b5fb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042c0f0: or rax, rcx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042c2a6: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045a6a4: or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x0000000000424382: or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045a0e8: or rax, rcx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000424034: or rax, rcx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000045b8ab: or rax, rdi; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000045b0cf: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4cf: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x5b4f0; ret; 
0x000000000042c2ad: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045bb3c: or rax, rdx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000045bd5c: or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000439701: or rax, rdx; mov qword ptr [r11], rax; pop rbx; pop rbp; ret; 
0x0000000000430fff: or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000042e966: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000045b8a8: or rcx, rsi; or rax, rdi; cmp rax, rcx; jne 0x5b8f0; xor eax, eax; ret; 
0x000000000045b0d2: or rcx, rsi; sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d2: or rcx, rsi; sub rax, rcx; jne 0x5b4f0; ret; 
0x00000000004311ee: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000437c8a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043578f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000403cbf: out 0, eax; add byte ptr [rax], al; syscall; 
0x0000000000473128: out 0x20, eax; je 0x7313c; movss xmm0, dword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x00000000004109b3: out 0x41, al; call qword ptr [rbp + 0x38]; 
0x0000000000436508: out 0x45, eax; xor eax, eax; lea r9, [rsp + 0x30]; call rbx; 
0x00000000004488ef: out 0x48, al; lea eax, [rip + 0x5bd29]; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48902; call rax; 
0x000000000040adf5: out 0x48, al; mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x000000000040d89d: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x38]; 
0x0000000000409879: out 0x48, al; mov esi, dword ptr [rsp + 0x20]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000468198: out 0x48, eax; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000041eccc: out 0x48, eax; lea eax, [rip + 0xd68c]; test dh, 4; jne 0x1ec8a; ret; 
0x0000000000436619: out 0x48, eax; mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x00000000004095e2: out 0x4c, al; mov edi, ebp; mov rdx, rbp; call rbx; 
0x000000000041c951: out 0x5b, al; pop rbp; pop r12; ret; 
0x00000000004784e6: out 0x5b, al; ret; 
0x0000000000473a99: out 0x83, al; call qword ptr [rcx]; 
0x000000000040b69e: out 0x83, al; ret; 
0x000000000046de09: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x000000000046df35: out 0x89, al; out dx, eax; call qword ptr [rbx]; 
0x000000000046ddbe: out 0x89, al; out dx, eax; call rax; 
0x0000000000417eec: out 0xbf, al; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000412b5a: out 0xbf, al; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, r9d; syscall; 
0x000000000042116d: out 0xc0, eax; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040317a: out 0xe8, al; movabs al, byte ptr [0xa8c42158bffffe8]; add bh, dh; ret 0; 
0x0000000000475dbb: out 0xe8, eax; call rbx; 
0x0000000000404e1b: out 0xe8, eax; cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xffff; 
0x0000000000404da9: out 0xe8, eax; int1; ret 0xffff; 
0x0000000000458eab: out 0xe8, eax; jmp qword ptr [rdi]; 
0x000000000041e362: out 0xe8, eax; push -0x76000067; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000467247: out 0xe8, eax; ret; 
0x000000000046d4ea: out 0xe8, eax; sar dl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000045c3eb: out 0xf, al; mov ebp, 0xc0014cc0; ret; 
0x00000000004225aa: out 0xf0, eax; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000414726: out 0xff, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000477cce: out 0xff, al; dec dword ptr [rcx + 0x74ff3cc1]; ja 0x77c61; ret 0xe283; 
0x0000000000477c87: out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000454d0b: out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000043a9ab: out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x35]; xor eax, 0x89000425; ret; 
0x000000000043c593: out 0xff, eax; jmp qword ptr [rsi + 0x2e]; 
0x000000000040ee1b: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000413195: out 0xff, eax; push rax; sbb cl, ch; imul edi, esi, -1; jmp qword ptr [rsi - 0x70]; 
0x00000000004370b1: out 2, al; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000041e9b1: out 2, al; lea rax, [rip + 0x5026]; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x0000000000457ae1: out 2, eax; je 0x57af0; ret; 
0x0000000000418114: out 7, al; xor sil, 0x81; syscall; 
0x000000000041eb67: out 8, al; jne 0x1eb46; lea rax, [rip + 0x6f3e]; and ch, 4; jne 0x1eb24; ret; 
0x000000000041ee87: out 8, al; jne 0x1ee66; lea rax, [rip + 0x1236e]; and ch, 4; jne 0x1ee44; ret; 
0x0000000000436767: out 8, al; jne 0x3674d; lea rax, [rip + 0x8ee]; and ch, 4; jne 0x36734; ret; 
0x000000000045c757: out 8, al; jne 0x5c73d; lea rax, [rip + 0x31e]; and ch, 4; jne 0x5c724; ret; 
0x0000000000432259: out dx, al; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x000000000045dfaf: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e246: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e266: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e286: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041e8af: out dx, al; and ch, 2; lea rdx, [rip + 0x2516]; lea rax, [rip + 0x24bf]; cmovne rax, rdx; ret; 
0x000000000041e7af: out dx, al; and ch, 2; lea rdx, [rip + 0x2646]; lea rax, [rip + 0x25cf]; cmovne rax, rdx; ret; 
0x000000000041e6af: out dx, al; and ch, 2; lea rdx, [rip + 0x2746]; lea rax, [rip + 0x26cf]; cmovne rax, rdx; ret; 
0x0000000000408efe: out dx, al; call rax; 
0x000000000046bf6c: out dx, al; cld; call qword ptr [rax - 0x2d5fa75]; add eax, dword ptr [rax]; ret; 
0x0000000000435585: out dx, al; cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000045de29: out dx, al; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000438604: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000438680: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000478656: out dx, al; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x78662; call rax; 
0x0000000000408b3b: out dx, al; mov rdi, r8; call rax; 
0x000000000041083f: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000413fa2: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000456e4c: out dx, al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000409522: out dx, al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000043676e: out dx, al; or byte ptr [rax], al; add byte ptr [rax - 0x428afb1b], al; ret; 
0x0000000000445042: out dx, al; sti; jmp qword ptr [rsi + 0x66]; 
0x0000000000464c33: out dx, al; syscall; 
0x0000000000435999: out dx, al; xor eax, eax; ret; 
0x00000000004182a8: out dx, al; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000043b3af: out dx, eax; adc al, ch; retf 0xfe1e; dec dword ptr [rax - 0x77]; ret; 
0x0000000000465056: out dx, eax; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000408b35: out dx, eax; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], al; mov rdi, r8; call rax; 
0x000000000042b560: out dx, eax; add byte ptr [rbp + 0x629a74c9], 0xb2; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000424016: out dx, eax; add byte ptr [rbp - 0x3a2b8b37], 0xfd; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000416569: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004165c1: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046de0b: out dx, eax; call qword ptr [rax]; 
0x0000000000456ee4: out dx, eax; call qword ptr [rbx + 0x18]; 
0x000000000046df37: out dx, eax; call qword ptr [rbx]; 
0x000000000040adf8: out dx, eax; call qword ptr [rcx + 0x38]; 
0x0000000000408a84: out dx, eax; call rax; 
0x000000000045a136: out dx, eax; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000424056: out dx, eax; jg 0x240a1; add eax, edi; vzeroupper; ret; 
0x0000000000430d16: out dx, eax; jg 0x30d61; add eax, edi; vzeroupper; ret; 
0x0000000000434f16: out dx, eax; jg 0x34f61; add eax, edi; vzeroupper; ret; 
0x0000000000437266: out dx, eax; jg 0x372b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000045cc06: out dx, eax; jg 0x5cc51; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x00000000004244b0: out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000041a0ed: out dx, eax; mov bh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000046d000: out dx, eax; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x00000000004095e5: out dx, eax; mov rdx, rbp; call rbx; 
0x0000000000469f0e: out dx, eax; or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x0000000000437286: out dx, eax; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424066: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000435da3: out dx, eax; ret 0xf66; 
0x00000000004377d7: out dx, eax; ret; 
0x0000000000416f5f: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000041861d: out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000042b90e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000042b568: outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000427231: outsb dx, byte ptr [rsi]; and dword ptr [rsi], esp; ret 0xfbc5; 
0x000000000041ee8e: outsb dx, byte ptr [rsi]; and eax, dword ptr [rcx]; add byte ptr [rax - 0x528afb1b], al; ret; 
0x000000000045d411: outsb dx, byte ptr [rsi]; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000466de0: outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000004665ab: outsb dx, byte ptr [rsi]; jmp qword ptr [rsi + 0xf]; 
0x0000000000421ed1: outsb dx, byte ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000413969: outsb dx, byte ptr [rsi]; ret 0x149; 
0x00000000004191f8: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x0000000000411d50: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000041bdf3: outsb dx, byte ptr [rsi]; ret 0x8949; 
0x000000000046659f: outsb dx, byte ptr [rsi]; ret 0x8b49; 
0x000000000046d455: outsb dx, byte ptr [rsi]; ret 0xc748; 
0x0000000000413c1e: outsb dx, byte ptr [rsi]; ret 0xe083; 
0x000000000044c3ff: outsb dx, byte ptr [rsi]; ret 0xf66; 
0x000000000041c175: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000043b888: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x7044b; ret; 
0x000000000041bee2: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000410fe0: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000467449: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041bedd: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004632b8: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004632bd: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000044832e: outsb dx, byte ptr [rsi]; std; dec dword ptr [rax - 0x77]; add byte ptr [r8 - 0x77], r9b; ret; 
0x00000000004220a0: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000044e01d: outsd dx, dword ptr [rsi]; adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004589a0: outsd dx, dword ptr [rsi]; add al, 1; je 0x588f0; xor eax, eax; ret; 
0x0000000000458bfd: outsd dx, dword ptr [rsi]; add al, 1; je 0x58bbd; mov eax, 0x83; ret; 
0x000000000041eb6f: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; and ch, 4; jne 0x1eb24; ret; 
0x000000000043fbf8: outsd dx, dword ptr [rsi]; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000430b00: outsd dx, dword ptr [rsi]; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x00000000004754ab: outsd dx, dword ptr [rsi]; add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x0000000000458ff7: outsd dx, dword ptr [rsi]; add rsp, 0x98; ret; 
0x0000000000425bc7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x25bca; ret 0x41c4; 
0x0000000000425f77: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x25f7a; ret 0x41c4; 
0x00000000004265d7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x265da; ret 0x41c4; 
0x0000000000426997: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x2699a; ret 0x41c4; 
0x0000000000420b9c: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000427c3a: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042d59e: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000044eb06: outsd dx, dword ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004256b1: outsd dx, dword ptr [rsi]; insb byte ptr [rdi], dx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040b46a: outsd dx, dword ptr [rsi]; or byte ptr [rcx - 0x763d7639], cl; ret; 
0x000000000044fe14: outsd dx, dword ptr [rsi]; or byte ptr [rcx - 0x77], al; ret; 
0x000000000045c337: outsd dx, dword ptr [rsi]; pop rax; jg 0x5c39d; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x0000000000420cf4: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000425d16: outsd dx, dword ptr [rsi]; pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000042b4d5: outsd dx, dword ptr [rsi]; push rdi; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000430a96: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000425a26: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a36: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000430a76: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x30a84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044b45a: outsd dx, dword ptr [rsi]; ret 0x1fe8; 
0x000000000044e025: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000435d4c: outsd dx, dword ptr [rsi]; ret; 
0x000000000044e021: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000044a4bc: outsd dx, dword ptr [rsi]; sbb byte ptr [rbx + rcx*4 + 0x77], cl; and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000000047575b: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000475d36: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041eb6e: outsd dx, dword ptr ds:[rsi]; add byte ptr [rax], al; and ch, 4; jne 0x1eb24; ret; 
0x000000000045b948: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000045acdd: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x5ad40; xor eax, eax; ret; 
0x000000000045d1dd: pcmpeqb mm2, qword ptr [rax]; ret; 
0x000000000043108b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x000000000045b947: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000045acdc: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x5ad40; xor eax, eax; ret; 
0x000000000043108a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x000000000045e1ed: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x5e260; xor eax, eax; ret; 
0x000000000045e1ec: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x5e260; xor eax, eax; ret; 
0x000000000046bb84: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x6bb80; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000430ba8: pcmpistri xmm4, xmm4, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000430bfc: pextrw edi, mm5, 0xd7; rol dword ptr [rbp - 0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000042c18c: pmovmskb eax, mm0; test eax, eax; je 0x2c1a0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004246f6: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045b94c: pmovmskb eax, mm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000045c3e5: pmovmskb eax, mm1; test eax, eax; je 0x5c3d2; bsr eax, eax; add rax, r8; ret; 
0x000000000045ace2: pmovmskb eax, mm1; test eax, eax; jne 0x5ad40; xor eax, eax; ret; 
0x000000000045acb2: pmovmskb eax, mm1; test eax, eax; jne 0x5ad60; xor eax, eax; ret; 
0x000000000045e1f2: pmovmskb eax, mm1; test eax, eax; jne 0x5e260; xor eax, eax; ret; 
0x000000000045e1c2: pmovmskb eax, mm1; test eax, eax; jne 0x5e2a0; xor eax, eax; ret; 
0x000000000045c425: pmovmskb eax, mm2; test eax, eax; je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042c18b: pmovmskb eax, xmm0; test eax, eax; je 0x2c1a0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004246f5: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045b94b: pmovmskb eax, xmm1; sub eax, ecx; jne 0x5b954; ret; 
0x000000000045c3e4: pmovmskb eax, xmm1; test eax, eax; je 0x5c3d2; bsr eax, eax; add rax, r8; ret; 
0x000000000045ace1: pmovmskb eax, xmm1; test eax, eax; jne 0x5ad40; xor eax, eax; ret; 
0x000000000045acb1: pmovmskb eax, xmm1; test eax, eax; jne 0x5ad60; xor eax, eax; ret; 
0x000000000045e1f1: pmovmskb eax, xmm1; test eax, eax; jne 0x5e260; xor eax, eax; ret; 
0x000000000045e1c1: pmovmskb eax, xmm1; test eax, eax; jne 0x5e2a0; xor eax, eax; ret; 
0x000000000045c424: pmovmskb eax, xmm2; test eax, eax; je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043108f: pmovmskb edx, mm4; test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x000000000045d26f: pmovmskb edx, mm4; test edx, edx; je 0x5d27e; bsf eax, edx; shr rax, 2; ret; 
0x000000000043108e: pmovmskb edx, xmm4; test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x000000000045d26e: pmovmskb edx, xmm4; test edx, edx; je 0x5d27e; bsf eax, edx; shr rax, 2; ret; 
0x000000000045e781: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e781: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x00000000004394fb: pop r12; jmp rax; 
0x0000000000471d4f: pop r12; pop r13; cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x000000000041373e: pop r12; pop r13; jmp rax; 
0x0000000000450403: pop r12; pop r13; mov rax, rdi; pop r14; ret; 
0x00000000004408ad: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004043f2: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401d89: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040f77d: pop r12; pop r13; pop r14; ret; 
0x0000000000460675: pop r12; pop r13; pop rbp; ret; 
0x00000000004086e1: pop r12; pop r13; ret; 
0x0000000000435956: pop r12; pop rbp; ret; 
0x0000000000402197: pop r12; ret; 
0x0000000000425d4b: pop r13; cld; ret 0x41c4; 
0x0000000000471d51: pop r13; cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x0000000000413740: pop r13; jmp rax; 
0x0000000000450405: pop r13; mov rax, rdi; pop r14; ret; 
0x00000000004408af: pop r13; pop r14; pop r15; jmp rax; 
0x00000000004043f4: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401d8b: pop r13; pop r14; pop r15; ret; 
0x000000000040f77f: pop r13; pop r14; ret; 
0x0000000000460677: pop r13; pop rbp; ret; 
0x00000000004086e3: pop r13; ret; 
0x00000000004408b1: pop r14; pop r15; jmp rax; 
0x00000000004043f6: pop r14; pop r15; pop rbp; ret; 
0x0000000000401d8d: pop r14; pop r15; ret; 
0x000000000040f781: pop r14; ret; 
0x00000000004408b3: pop r15; jmp rax; 
0x00000000004043f8: pop r15; pop rbp; ret; 
0x0000000000401d8f: pop r15; ret; 
0x0000000000415917: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041639d: pop r8; test rax, rax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000415573: pop rax; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x0000000000415918: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041e29b: pop rax; add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000043ec54: pop rax; fcos; dec dword ptr [rax - 0x75]; cwde; mov rdi, r12; call rax; 
0x000000000040bd45: pop rax; idiv edi; jmp qword ptr [rax]; 
0x00000000004446ce: pop rax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045c338: pop rax; jg 0x5c39d; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000044177f: pop rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440bb0: pop rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000445297: pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000040863e: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78f8c], eax; ret 0xfff0; 
0x00000000004696d6: pop rax; pop rdx; pop rbx; ret; 
0x00000000004387a7: pop rax; ret; 
0x000000000040d894: pop rax; sbb al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041639e: pop rax; test rax, rax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000042bf77: pop rax; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000046992f: pop rbp; adc al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x000000000044e0e2: pop rbp; add al, byte ptr [rax]; add dh, dh; ret 0xf40; 
0x000000000045f156: pop rbp; add cl, byte ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000040175b: pop rbp; clc; leave; ret; 
0x0000000000425d4c: pop rbp; cld; ret 0x41c4; 
0x0000000000471d52: pop rbp; cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x00000000004136cd: pop rbp; jmp rax; 
0x0000000000470caa: pop rbp; jmp rdx; 
0x000000000042b59d: pop rbp; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045e907: pop rbp; mov eax, 0x101; syscall; 
0x0000000000476458: pop rbp; mov eax, edx; ret; 
0x0000000000459528: pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000043072f: pop rbp; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000404027: pop rbp; mov rax, r12; pop r12; ret; 
0x00000000004575a4: pop rbp; mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x0000000000471d70: pop rbp; mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x0000000000450406: pop rbp; mov rax, rdi; pop r14; ret; 
0x00000000004394fa: pop rbp; pop r12; jmp rax; 
0x000000000041373d: pop rbp; pop r12; pop r13; jmp rax; 
0x00000000004408ac: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004023e8: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040f77c: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004086e0: pop rbp; pop r12; pop r13; ret; 
0x0000000000402196: pop rbp; pop r12; ret; 
0x00000000004408b0: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000004043f5: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000401d8c: pop rbp; pop r14; pop r15; ret; 
0x000000000040f780: pop rbp; pop r14; ret; 
0x0000000000460678: pop rbp; pop rbp; ret; 
0x000000000046b418: pop rbp; pop rbx; ret; 
0x0000000000401611: pop rbp; ret; 
0x000000000040c94f: pop rbp; sbb al, 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046e112: pop rbp; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000429b61: pop rbx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000459a45: pop rbx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000470d46: pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000401940: pop rbx; and eax, 0x3fc00; ret; 
0x0000000000401a04: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000004019aa: pop rbx; and eax, 0x7ff80000; ret; 
0x000000000043c2c3: pop rbx; cmovbe rdx, rax; mov rax, rdx; ret; 
0x00000000004647d7: pop rbx; cmove rsi, rax; mov rax, rsi; ret; 
0x000000000040186f: pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x0000000000415974: pop rbx; jmp rax; 
0x000000000041e400: pop rbx; mov eax, 0x16; pop rbp; pop r12; ret; 
0x0000000000416200: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000044fe49: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000046fe46: pop rbx; mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000041805a: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004394f4: pop rbx; mov esi, 2; pop rbp; pop r12; jmp rax; 
0x0000000000411bf8: pop rbx; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000412cdc: pop rbx; mov rax, rcx; pop rbp; pop r12; ret; 
0x000000000046482a: pop rbx; mov rax, rsi; ret; 
0x000000000042a561: pop rbx; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000460674: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000435955: pop rbx; pop r12; pop rbp; ret; 
0x000000000044784b: pop rbx; pop r12; ret; 
0x00000000004136cc: pop rbx; pop rbp; jmp rax; 
0x0000000000470ca9: pop rbx; pop rbp; jmp rdx; 
0x0000000000476457: pop rbx; pop rbp; mov eax, edx; ret; 
0x0000000000459527: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000404026: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000043952a: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000041373c: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000040f77b: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004086df: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000402195: pop rbx; pop rbp; pop r12; ret; 
0x0000000000404196: pop rbx; pop rbp; ret; 
0x0000000000401848: pop rbx; ret; 
0x000000000041472c: pop rbx; setne al; movzx eax, al; neg eax; ret; 
0x00000000004018ac: pop rbx; shr eax, 0x16; add eax, 1; ret; 
0x0000000000401a11: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000004019ee: pop rbx; shr eax, 6; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x0000000000401950: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x00000000004141cf: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000430c04: pop rbx; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000423c94: pop rbx; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000041ea8e: pop rcx; add byte ptr [rax], al; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x000000000045c6f3: pop rcx; clc; add al, 0; ret; 
0x00000000004256c7: pop rcx; insb byte ptr [rdi], dx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000420cf5: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004206c8: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x0000000000475a9c: pop rcx; jmp rcx; 
0x000000000042428a: pop rcx; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000042bb76: pop rcx; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000430f06: pop rcx; tzcnt eax, eax; ret; 
0x000000000046145d: pop rdi; add al, 0; add byte ptr [rax + 1], cl; ret 0xba41; 
0x0000000000429907: pop rdi; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000437287: pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424067: pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000045d555: pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042b11b: pop rdi; cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x0000000000454726: pop rdi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004408b4: pop rdi; jmp rax; 
0x000000000047082d: pop rdi; movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004043f9: pop rdi; pop rbp; ret; 
0x000000000041e97d: pop rdi; push rsp; add byte ptr [rax], al; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x0000000000401d90: pop rdi; ret; 
0x000000000046445d: pop rdi; std; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000044b1a3: pop rdi; sti; dec dword ptr [rax + 0x29]; ret; 
0x0000000000477db1: pop rdi; xchg edi, eax; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000472c50: pop rdi; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000418a4a: pop rdx; adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041ea70: pop rdx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004347e6: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x0000000000441b92: pop rdx; and edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000408b85: pop rdx; call rax; 
0x000000000043e4c3: pop rdx; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000443a32: pop rdx; jae 0x43a34; jmp qword ptr [rsi + 0x2e]; 
0x0000000000415875: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041cc09: pop rdx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004696d7: pop rdx; pop rbx; ret; 
0x000000000041ee56: pop rdx; ror byte ptr [rax], 1; add byte ptr [rcx], al; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x000000000041edb3: pop rdx; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041eefb: pop rsi; add dword ptr [rax], eax; lea rax, [rip + 0x166db]; cmove rax, rdx; ret; 
0x0000000000473136: pop rsi; add eax, 0x218c0; ret; 
0x0000000000425d17: pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x0000000000459f91: pop rsi; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004408b2: pop rsi; pop r15; jmp rax; 
0x00000000004043f7: pop rsi; pop r15; pop rbp; ret; 
0x0000000000401d8e: pop rsi; pop r15; ret; 
0x000000000040f782: pop rsi; ret; 
0x000000000044b239: pop rsi; sti; dec dword ptr [rax + 0x29]; ret; 
0x0000000000434ae4: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041d750: pop rsp; idiv bh; jmp qword ptr [rsi + 0x66]; 
0x000000000040c2b4: pop rsp; idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x000000000040d095: pop rsp; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x00000000004394fc: pop rsp; jmp rax; 
0x000000000042ef60: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000471d50: pop rsp; pop r13; cmovne r14, rax; mov rax, r14; pop r14; ret; 
0x000000000041373f: pop rsp; pop r13; jmp rax; 
0x0000000000450404: pop rsp; pop r13; mov rax, rdi; pop r14; ret; 
0x00000000004408ae: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004043f3: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401d8a: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000040f77e: pop rsp; pop r13; pop r14; ret; 
0x0000000000460676: pop rsp; pop r13; pop rbp; ret; 
0x00000000004086e2: pop rsp; pop r13; ret; 
0x0000000000435957: pop rsp; pop rbp; ret; 
0x0000000000402198: pop rsp; ret; 
0x000000000044a780: pop rsp; rol dword ptr [rax], cl; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x00000000004757b0: popfq; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000452b96: popfq; idiv rdi; dec dword ptr [rax + 0x39]; ret; 
0x000000000040bdd0: popfq; idiv rdi; dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x000000000040c2b3: popfq; pop rsp; idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x00000000004258e6: psllq mm1, qword ptr [rdi]; jg 0x258f2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000425967: psllq mm1, qword ptr [rdi]; jg 0x25973; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000425a68: psllq mm1, qword ptr [rdi]; jg 0x25a74; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430916: psllq mm1, qword ptr [rdi]; jg 0x30922; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000430977: psllq mm1, qword ptr [rdi]; jg 0x30983; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000430a78: psllq mm1, qword ptr [rdi]; jg 0x30a84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004652a4: psubq mm7, mm7; dec dword ptr [rax + 0x63]; ret; 
0x0000000000456ae2: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041582b: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000456aa7: punpckhqdq xmm1, xmm2; movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x00000000004157f0: punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000043b939: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004134ad: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000043b88a: punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x000000000046b81b: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x40494], 0; ret; 
0x0000000000419eb4: push -0x14000023; ret 0xf66; 
0x00000000004727ed: push -0x16000001; imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000404fc7: push -0x16000001; ret; 
0x0000000000431f0c: push -0x178a3e0b; xor eax, eax; ret; 
0x0000000000461709: push -0x17fffd33; fisub word ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000431254: push -0x1d8a3e0b; xor eax, eax; vzeroupper; ret; 
0x0000000000423cce: push -0x43a360b; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041e364: push -0x76000067; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004061da: push -0x76b6ffff; ret 0x8548; 
0x000000000044a814: push -0x76b70005; ret; 
0x000000000045b085: push -0x7af02f0b; ret 0xfffd; 
0x000000000042b8f4: push -0x9ffffff; ret 0x7501; 
0x00000000004686f7: push 0; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045c9fb: push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000436362: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000441e13: push 0; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000445e90: push 0; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444a4d: push 0; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440697: push 0; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b2: push 0; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000044528c: push 0; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000443d03: push 0; mov r9, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000442ef9: push 0; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000043660d: push 0; mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000436501: push 0; mov rdx, r14; mov rdi, r12; xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x000000000042202d: push 0x30; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000043905c: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004379af: push 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000423a57: push 0x48fee162; jg 0x23a65; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000457046: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000044bf48: push 0xffffff; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000045c9f9: push 1; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000436360: push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004362bd: push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000421888: push 3; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044df79: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000043e3bd: push qword ptr [rax + rbx - 0x18]; mov ebp, esp; std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000041c8d5: push qword ptr [rax + rcx + 0x48]; add esp, 8; ret; 
0x0000000000403a1d: push qword ptr [rax + rdx + 0x48]; add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000046047c: push qword ptr [rax + rdx*2 + 0x41]; mov eax, 1; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x000000000041134c: push qword ptr [rbp + 7]; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000413935: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000439f32: push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39f40; ret; 
0x0000000000439f52: push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39f60; ret; 
0x000000000040f837: push qword ptr [rbp + rax + 0x66]; test eax, eax; je 0xf850; lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x0000000000457039: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044e3cd: push qword ptr [rbp + rbp - 0x7d]; ret; 
0x00000000004356e3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x000000000046d0bd: push qword ptr [rbp - 0x75]; xor r10d, r10d; mov qword ptr [rip + 0x377fe], r9; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000457412: push qword ptr [rbp - 0x80]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004384bc: push qword ptr [rbx + 1]; ret; 
0x0000000000416564: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000457655: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000439f72: push qword ptr [rbx + rcx - 0x17]; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000043b1ad: push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000405fa9: push qword ptr [rcx]; imul cl; ret 0xfff9; 
0x0000000000402192: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000472004: push qword ptr [rcx]; rol byte ptr [rbx + 0x10c247c], 0xf; xchg ebp, eax; ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x00000000004693f9: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000046a707: push qword ptr [rcx]; ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000415076: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000044df7a: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000004069a3: push qword ptr [rcx]; test byte ptr [rax + 0xf320978], 0x85; ret; 
0x000000000043c080: push qword ptr [rcx]; test byte ptr [rax - 0x73], 0x3d; xchg ecx, eax; adc dword ptr [rax + rax], eax; mov eax, 0x15; syscall; 
0x0000000000437d61: push qword ptr [rdi + 0x1c]; hlt; mov eax, esi; syscall; 
0x00000000004393d8: push qword ptr [rdi + 0x25]; ret; 
0x00000000004387a5: push qword ptr [rdi + 0x58]; ret; 
0x0000000000438702: push qword ptr [rdi + 0x5b]; ret; 
0x000000000043883c: push qword ptr [rdi + 1]; ret; 
0x00000000004391d9: push qword ptr [rdi + 4]; ret; 
0x000000000045e5a8: push qword ptr [rdi + 5]; ret; 
0x0000000000458f4f: push qword ptr [rdi + 6]; ret; 
0x000000000043859e: push qword ptr [rdi + 7]; xor eax, eax; ret; 
0x0000000000439245: push qword ptr [rdi + 8]; ret; 
0x000000000043c269: push qword ptr [rdi + rbp + 0x48]; test edx, edx; je 0x3c29b; mov rax, rdx; pop rbx; ret; 
0x0000000000477cd4: push qword ptr [rdi + rsi*2 - 0x77]; ret 0xe283; 
0x0000000000470d1d: push qword ptr [rsi + rdx + 0x49]; lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000415c9d: push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp + rbp - 0x77], esi; ret 0xc883; 
0x0000000000405f3a: push qword ptr [rsp + rsi*2 - 0x18]; xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x000000000046dc30: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000416e51: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000004571b9: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000041e9be: push rax; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000041e9b7: push rax; add byte ptr [rax], al; lea rdx, [rip + 0x507f]; cmovne rax, rdx; ret; 
0x000000000043c222: push rax; add byte ptr [rdx + rdx + 0x48], dh; test edx, edx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004188f4: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x8c8ab; ret; 
0x000000000040b647: push rax; add dword ptr [rcx - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040baf6: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000041271b: push rax; cmp qword ptr [rax + 0x48], r10; je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x0000000000443105: push rax; dec dword ptr [rbp - 0x77]; ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x0000000000454772: push rax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041271e: push rax; je 0x12724; xor edx, edx; mov eax, edx; ret; 
0x0000000000457de7: push rax; lea rdi, [rip + 0x230e1]; call 0x12c40; nop dword ptr [rax]; neg eax; ret; 
0x0000000000417cad: push rax; lea rdi, [rip + 0x6321b]; call 0x12c40; nop word ptr [rax + rax]; ret; 
0x0000000000417c58: push rax; lea rdi, [rip + 0x63270]; call 0x12c40; nop dword ptr [rax]; ret; 
0x000000000043ba39: push rax; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000046047e: push rax; mov r8d, 1; test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x000000000044529c: push rax; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004406a7: push rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000442304: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004411bd: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000044177a: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000440bab: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000044a3dd: push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000430b27: push rax; movsxd rax, ecx; ret; 
0x0000000000456aec: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000456ab1: push rax; movups xmmword ptr [rax], xmm1; ret; 
0x000000000044d727: push rax; or al, 0xf6; ret 0xf40; 
0x000000000046dcb6: push rax; or byte ptr [rax + 0x39], cl; int1; jb 0x6dca1; ret; 
0x00000000004189aa: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000043c9f5: push rax; or byte ptr [rcx + 0x40893], cl; add dh, dh; ret 0x7402; 
0x00000000004612ec: push rax; or byte ptr [rcx - 0x77], al; xchg ebp, eax; or byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000439bf2: push rax; or dh, dh; ret 0x7401; 
0x000000000042ee6c: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000470d1c: push rax; push qword ptr [rsi + rdx + 0x49]; lea ebx, [rsp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000422a1a: push rax; ret; 
0x000000000047786b: push rax; sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000457121: push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000416e46: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000413197: push rax; sbb cl, ch; imul edi, esi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000044f117: push rax; sub byte ptr [rdi], cl; cmp dword ptr [rcx + 0x48000008], -0x73; add al, 0x83; ret; 
0x00000000004740a2: push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000453fae: push rbp; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000453df4: push rbp; add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x000000000046089a: push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000475843: push rbp; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x000000000041e3ee: push rbp; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004732d4: push rbp; add rsp, 0x18; ret; 
0x00000000004109b6: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000449097: push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000040f17d: push rbp; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfffa; 
0x0000000000464c25: push rbp; push rbx; sub rsp, 0x1008; mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000040650e: push rbp; sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410fcb: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000467158: push rbx; adc byte ptr [rax + 3], cl; push rcx; or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000402ff1: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000409dd7: push rbx; add al, byte ptr [rcx - 0x42]; sldt word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000406c8a: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040186d: push rbx; add dword ptr [rbx + 0xf], ebx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x000000000042bd18: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043104e: push rbx; bsf eax, eax; ret; 
0x000000000045cc59: push rbx; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000430d49: push rbx; bsf eax, eax; vzeroupper; ret; 
0x0000000000430eb9: push rbx; bsf eax, eax; xtest; jne 0x30ec7; vzeroupper; ret; 
0x0000000000477784: push rbx; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000414f6a: push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000045704d: push rbx; je 0x570ab; pop rbp; pop r12; ret; 
0x000000000045e26c: push rbx; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000040ee81: push rbx; mov ch, 6; add byte ptr [rcx + 0x39], al; ret 0xf44; 
0x0000000000458f07: push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000457003: push rbx; mov rbx, rdi; test byte ptr [rdi], 2; jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000455982: push rbx; or al, 0xf6; ret 0xf04; 
0x0000000000449760: push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000439962: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000041393a: push rbx; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000464c26: push rbx; sub rsp, 0x1008; mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000045da0c: push rbx; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004101aa: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000043b96b: push rbx; xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000043af76: push rcx; add dword ptr [rax - 0x77], ecx; adc eax, 0x6bde9; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x0000000000422a0b: push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x00000000004208cf: push rcx; jl 0x2091a; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004208d6: push rcx; jl 0x20921; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004208dd: push rcx; jl 0x20928; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000420a36: push rcx; jl 0x20a81; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a3d: push rcx; jl 0x20a88; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a44: push rcx; jl 0x20a8f; adc dword ptr [rcx + 7], edi; ret; 
0x000000000044a722: push rcx; mov bl, 5; add byte ptr [rax], al; je 0x4a740; mov eax, 0x13e; syscall; 
0x000000000046715c: push rcx; or byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000447e62: push rcx; std; jmp qword ptr [rsi + 0x41]; 
0x0000000000411793: push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x0000000000417226: push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x000000000042579a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000042b4d6: push rdi; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000041ea95: push rdi; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000045908b: push rdi; add byte ptr [rax], al; mov dword ptr [rip + 0x4d434], eax; add rsp, 8; ret; 
0x000000000046ab2f: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000004237d2: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x23820; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042584c: push rdi; add eax, 0xc478d48; ret; 
0x000000000043a7d3: push rdi; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c800: push rdi; and byte ptr [rax + 0x39], cl; ret 0x4473; 
0x000000000045adb0: push rdi; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004384c6: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000437d2e: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000438766: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000450f38: push rdi; or al, 0x83; ret; 
0x0000000000450ec5: push rdi; or al, 0xf6; ret 0xf08; 
0x00000000004141cd: push rdi; or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x000000000046b40a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000047016a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x000000000046b411: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000447819: push rdi; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000425a30: push rdi; or eax, 0x1c478d48; ret; 
0x0000000000402840: push rdi; ret 0; 
0x0000000000415831: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000411351: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000456b21: push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x000000000045ace8: push rdi; xor eax, eax; ret; 
0x0000000000445dfa: push rdx; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000041ea09: push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000041ea02: push rdx; add byte ptr [rax], al; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000045a0c2: push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046e57a: push rdx; fdivp st(4); jmp qword ptr [rsi - 0x70]; 
0x0000000000425a87: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000430a97: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004309f6: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x30a06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000430a16: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x30a26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000423919: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x23967; adc dword ptr [rsi + 3], edx; ret; 
0x000000000044ef54: push rsi; add al, 0x83; ret; 
0x0000000000407a49: push rsi; add dword ptr [rax], eax; nop dword ptr [rax]; ret; 
0x0000000000423912: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x23960; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000425845: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004308a5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000004239af: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000464f93: push rsi; add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004257b3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000430843: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000004237aa: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000477962: push rsi; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000045ec46: push rsi; fdivp st(3); dec dword ptr [rax - 0x77]; ret; 
0x000000000043c496: push rsi; fild word ptr [rax]; add byte ptr [rbp + 0x487275c0], al; mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000439f76: push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000412524: push rsi; mov byte ptr [rsi], al; add al, ch; ret; 
0x0000000000458979: push rsi; mov eax, 0x16; ret; 
0x000000000044e1b2: push rsi; or al, 0xf6; ret 0xf01; 
0x0000000000425a27: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000430a37: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042a166: push rsi; or eax, 0x83480000; ret 0xe910; 
0x0000000000425a67: push rsi; psllq mm1, qword ptr [rdi]; jg 0x25a74; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000430a77: push rsi; psllq mm1, qword ptr [rdi]; jg 0x30a84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000045c82c: push rsi; ret 0x7420; 
0x000000000044da50: push rsi; ret 0xf10; 
0x00000000004237b1: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040b64b: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000041e985: push rsp; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000041e97e: push rsp; add byte ptr [rax], al; lea rax, [rip + 0x54b8]; cmove rax, rdx; ret; 
0x000000000041ea69: push rsp; add byte ptr [rax], al; lea rax, [rip + 0x5add]; cmove rax, rdx; ret; 
0x0000000000430bc2: push rsp; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000436614: push rsp; and al, 0x10; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000447351: push rsp; and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004698f3: push rsp; and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x0000000000439062: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000457cb3: push rsp; mov r9d, 0xffffffff; xor r8d, r8d; mov edx, ebp; mov eax, 0xca; syscall; 
0x000000000041c59a: push rsp; ret 0xe8f0; 
0x0000000000449764: push rsp; ret; 
0x000000000041c16f: push rsp; sbb eax, 0xf486600; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x00000000004388ce: pushfq; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000472012: pushfq; add eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x0000000000452b10: pushfq; cmp eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046f2f3: pushfq; nop dword ptr [rax]; call rax; 
0x0000000000433fa4: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000045e8c2: pushfq; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000416f5e: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000416f5d: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000460584: rcl byte ptr [rax + 0x48], 0x83; ret 0x4c08; 
0x000000000041a032: rcl dword ptr [rip + 0x8b144], 0x83; ret 0x8b01; 
0x000000000045414c: rcr ah, 1; add al, 0; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043f4c2: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000004141d2: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000046b417: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000044784a: rcr byte ptr [rbx + 0x41], 1; pop rsp; ret; 
0x00000000004595e2: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000041219c: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000402194: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000408893: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000418059: rcr byte ptr [rbx - 0x77], cl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004391cc: rcr byte ptr [rbx], 0; add byte ptr [rcx], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x391e0; ret; 
0x000000000041ee0a: rcr byte ptr [rip - 0x72b7ffff], cl; add eax, 0x1224b; cmove rax, rdx; ret; 
0x0000000000458f69: rcr dword ptr [rbx + rdi*8 + 0x1f0fff], cl; mov eax, dword ptr [rdi]; test al, 2; je 0x58f80; xor eax, eax; ret; 
0x0000000000469c45: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000047673b: rcr dword ptr [rcx], 1; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000429cc0: rcr dword ptr [rdx], 0xf; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004299ed: rcr dword ptr [rdx], 0xf; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3ed: rcr dword ptr [rdx], 0xf; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a27d: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ac8d: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9ad: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x0000000000429bb2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a5b2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e82: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a2d2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ace2: rcr dword ptr [rdx], 0xf; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004215f9: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004215eb: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041fa24: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000042196d: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421120: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000423aba: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000042350a: rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000041c3cc: rep stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000402842: ret 0; 
0x0000000000443ec6: ret 0x1073; 
0x000000000041bc2a: ret 0x110; 
0x0000000000407f14: ret 0x110f; 
0x000000000046b3ec: ret 0x114d; 
0x0000000000464cd5: ret 0x1172; 
0x000000000045d42b: ret 0x117e; 
0x00000000004091e7: ret 0x11e9; 
0x0000000000459fa8: ret 0x127e; 
0x00000000004514f2: ret 0x12; 
0x000000000045d705: ret 0x137e; 
0x0000000000459225: ret 0x138b; 
0x000000000040ba83: ret 0x13; 
0x00000000004043b5: ret 0x148; 
0x000000000041396a: ret 0x149; 
0x00000000004604ba: ret 0x14c; 
0x000000000041acf2: ret 0x14d; 
0x0000000000467dfa: ret 0x154; 
0x000000000045a262: ret 0x167e; 
0x000000000043258a: ret 0x17; 
0x0000000000420bdc: ret 0x180f; 
0x000000000045ad55: ret 0x1876; 
0x000000000047871d: ret 0x1900; 
0x0000000000477a00: ret 0x1ae8; 
0x000000000043a807: ret 0x1b8; 
0x0000000000465118: ret 0x1b9; 
0x000000000044cfaf: ret 0x1be8; 
0x0000000000402cc0: ret 0x1d73; 
0x0000000000405e67: ret 0x1f0f; 
0x000000000044b45b: ret 0x1fe8; 
0x000000000044a2d7: ret 0x200; 
0x000000000046de43: ret 0x204; 
0x00000000004435e7: ret 0x2073; 
0x000000000041d0af: ret 0x2148; 
0x0000000000473732: ret 0x2149; 
0x0000000000453eea: ret 0x2244; 
0x0000000000465848: ret 0x2275; 
0x00000000004253d8: ret 0x2288; 
0x000000000047219a: ret 0x2373; 
0x000000000046fd22: ret 0x248; 
0x000000000045ef66: ret 0x24e8; 
0x000000000046e0da: ret 0x262; 
0x00000000004787be: ret 0x2760; 
0x0000000000435726: ret 0x2774; 
0x0000000000431cbb: ret 0x2776; 
0x0000000000478743: ret 0x27c0; 
0x000000000045ad45: ret 0x2876; 
0x0000000000465898: ret 0x28f5; 
0x000000000044e026: ret 0x290f; 
0x00000000004249e7: ret 0x2920; 
0x00000000004690bb: ret 0x2944; 
0x000000000041179a: ret 0x2948; 
0x000000000040c532: ret 0x2949; 
0x0000000000410862: ret 0x294c; 
0x000000000040bad1: ret 0x294d; 
0x000000000047876c: ret 0x2980; 
0x0000000000478795: ret 0x2a00; 
0x0000000000410fcf: ret 0x2b48; 
0x0000000000431640: ret 0x2d76; 
0x00000000004558f5: ret 0x2e66; 
0x000000000043230f: ret 0x2e76; 
0x0000000000438314: ret 0x2ee9; 
0x00000000004787e7: ret 0x2f40; 
0x0000000000478810: ret 0x2fa0; 
0x0000000000478839: ret 0x3020; 
0x000000000044781d: ret 0x3073; 
0x000000000044e8b1: ret 0x30be; 
0x0000000000478862: ret 0x30c0; 
0x000000000047888b: ret 0x3120; 
0x0000000000405e29: ret 0x3145; 
0x000000000041b9d9: ret 0x3149; 
0x000000000043215c: ret 0x3176; 
0x00000000004788b4: ret 0x3180; 
0x0000000000450070: ret 0x31c0; 
0x00000000004786f4: ret 0x3240; 
0x00000000004073fe: ret 0x3325; 
0x0000000000431afa: ret 0x3376; 
0x0000000000458e28: ret 0x3575; 
0x0000000000475176: ret 0x372; 
0x0000000000465c78: ret 0x373; 
0x0000000000409361: ret 0x37e9; 
0x00000000004603b5: ret 0x3841; 
0x0000000000431495: ret 0x3876; 
0x0000000000415cb8: ret 0x389; 
0x0000000000414fb7: ret 0x38b; 
0x000000000040bf32: ret 0x3948; 
0x000000000041b9dc: ret 0x3949; 
0x000000000046531c: ret 0x394c; 
0x000000000040971f: ret 0x394d; 
0x0000000000435c52: ret 0x3a01; 
0x000000000046c97a: ret 0x3a3; 
0x00000000004495d9: ret 0x3b48; 
0x0000000000468092: ret 0x3c3; 
0x0000000000469481: ret 0x3c72; 
0x000000000046f2a2: ret 0x3cc; 
0x000000000044e329: ret 0x3de9; 
0x00000000004097cc: ret 0x4001; 
0x000000000045ca0b: ret 0x408d; 
0x000000000046b643: ret 0x40b9; 
0x0000000000404278: ret 0x4101; 
0x0000000000472637: ret 0x4166; 
0x0000000000401875: ret 0x41c3; 
0x0000000000425b05: ret 0x41c4; 
0x000000000042e9aa: ret 0x4266; 
0x0000000000440af2: ret 0x428b; 
0x0000000000402014: ret 0x430f; 
0x0000000000456b40: ret 0x4389; 
0x00000000004418ab: ret 0x4401; 
0x000000000041c804: ret 0x4473; 
0x000000000040ddd2: ret 0x44c6; 
0x00000000004064d7: ret 0x4501; 
0x0000000000476ed4: ret 0x46e8; 
0x000000000040775d: ret 0x4801; 
0x0000000000402902: ret 0x4808; 
0x0000000000436a79: ret 0x480a; 
0x0000000000419c9d: ret 0x4810; 
0x0000000000408915: ret 0x4811; 
0x000000000046bb04: ret 0x4812; 
0x0000000000470e63: ret 0x4818; 
0x0000000000460b01: ret 0x4838; 
0x000000000042e8b6: ret 0x4840; 
0x00000000004020b2: ret 0x4853; 
0x000000000043651a: ret 0x485f; 
0x0000000000416e0b: ret 0x4860; 
0x0000000000417a7c: ret 0x4866; 
0x0000000000431098: ret 0x48c3; 
0x0000000000431277: ret 0x48e0; 
0x000000000041f02d: ret 0x4901; 
0x000000000046eaf8: ret 0x4902; 
0x00000000004027fb: ret 0x4904; 
0x000000000040ac2d: ret 0x4908; 
0x000000000040d7f4: ret 0x4910; 
0x0000000000436a4a: ret 0x4917; 
0x00000000004770d1: ret 0x49e8; 
0x000000000043154a: ret 0x4b76; 
0x000000000040fdc2: ret 0x4c01; 
0x0000000000460588: ret 0x4c08; 
0x0000000000466a4f: ret 0x4c18; 
0x000000000040aa8c: ret 0x4c38; 
0x000000000047242d: ret 0x4d01; 
0x000000000044d04b: ret 0x4d08; 
0x000000000046477f: ret 0x4d30; 
0x0000000000402d16: ret 0x4f0f; 
0x000000000046621c: ret 0x5172; 
0x000000000045c407: ret 0x518d; 
0x000000000045a0c0: ret 0x5276; 
0x000000000045a380: ret 0x5376; 
0x000000000040186b: ret 0x538d; 
0x00000000004582b5: ret 0x53e9; 
0x0000000000462b41: ret 0x5441; 
0x00000000004477f9: ret 0x5473; 
0x0000000000447262: ret 0x548d; 
0x000000000045762e: ret 0x5590; 
0x0000000000432214: ret 0x5676; 
0x000000000045f374: ret 0x56e8; 
0x0000000000402ace: ret 0x589; 
0x0000000000402482: ret 0x58b; 
0x00000000004406b0: ret 0x5958; 
0x0000000000436f81: ret 0x5a41; 
0x000000000040cf33: ret 0x5de9; 
0x000000000045d553: ret 0x5f76; 
0x000000000045d823: ret 0x6076; 
0x000000000042b4a1: ret 0x6200; 
0x0000000000440bc3: ret 0x6274; 
0x0000000000421b81: ret 0x6280; 
0x000000000040bf23: ret 0x6348; 
0x000000000040d4c8: ret 0x6349; 
0x000000000044801f: ret 0x6411; 
0x000000000040a8b1: ret 0x6520; 
0x000000000045e1d1: ret 0x6608; 
0x000000000045acc1: ret 0x6620; 
0x000000000041de78: ret 0x66c3; 
0x000000000045a66c: ret 0x676; 
0x0000000000441792: ret 0x6b74; 
0x0000000000455581: ret 0x6c88; 
0x0000000000471cfc: ret 0x6d72; 
0x000000000043d901: ret 0x6e4; 
0x0000000000439bf5: ret 0x7401; 
0x000000000043c9fe: ret 0x7402; 
0x000000000043ca0a: ret 0x7404; 
0x000000000045703d: ret 0x7408; 
0x0000000000418e04: ret 0x740f; 
0x0000000000412ce9: ret 0x7420; 
0x00000000004442f3: ret 0x7439; 
0x0000000000418415: ret 0x7501; 
0x000000000041840d: ret 0x7502; 
0x000000000042b913: ret 0x7504; 
0x000000000042b8cb: ret 0x7510; 
0x000000000042b8d8: ret 0x7520; 
0x000000000042b8e5: ret 0x7540; 
0x000000000041722a: ret 0x773; 
0x00000000004100f8: ret 0x78e9; 
0x000000000044eaa5: ret 0x7c80; 
0x000000000043e9c5: ret 0x7d89; 
0x000000000045db2f: ret 0x7e08; 
0x000000000045a0ae: ret 0x7e20; 
0x0000000000441992: ret 0x7e80; 
0x0000000000427c3e: ret 0x7f10; 
0x0000000000429629: ret 0x8000; 
0x0000000000407e5c: ret 0x8001; 
0x0000000000425f38: ret 0x8005; 
0x0000000000471655: ret 0x8008; 
0x000000000043d84a: ret 0x80e9; 
0x000000000040277e: ret 0x8141; 
0x000000000040d887: ret 0x8148; 
0x0000000000476577: ret 0x8166; 
0x00000000004137a0: ret 0x820f; 
0x0000000000401864: ret 0x8301; 
0x00000000004026a3: ret 0x8304; 
0x000000000040bada: ret 0x830f; 
0x00000000004261a7: ret 0x8320; 
0x000000000045bac8: ret 0x8340; 
0x00000000004187af: ret 0x8341; 
0x0000000000408830: ret 0x8348; 
0x000000000044e4d2: ret 0x8349; 
0x000000000046609b: ret 0x8364; 
0x0000000000406d5e: ret 0x8401; 
0x000000000041802c: ret 0x840f; 
0x00000000004739ed: ret 0x8440; 
0x000000000045ef06: ret 0x84e8; 
0x000000000040e750: ret 0x850f; 
0x00000000004061df: ret 0x8548; 
0x000000000040bdd7: ret 0x854d; 
0x0000000000466c41: ret 0x8566; 
0x000000000044ceab: ret 0x858b; 
0x000000000040cfd6: ret 0x85c7; 
0x000000000045aace: ret 0x860f; 
0x000000000045ad65: ret 0x876; 
0x000000000046ec1a: ret 0x87f6; 
0x00000000004077c0: ret 0x8801; 
0x000000000041565c: ret 0x8901; 
0x000000000040202c: ret 0x8941; 
0x0000000000462d99: ret 0x8944; 
0x0000000000402f53: ret 0x8948; 
0x0000000000406373: ret 0x8949; 
0x0000000000404931: ret 0x894c; 
0x00000000004473ea: ret 0x894d; 
0x000000000046a6ab: ret 0x894e; 
0x0000000000461332: ret 0x8a8; 
0x000000000041a039: ret 0x8b01; 
0x0000000000455b40: ret 0x8b04; 
0x000000000043ab43: ret 0x8b05; 
0x00000000004058c4: ret 0x8b41; 
0x0000000000442df4: ret 0x8b44; 
0x0000000000409555: ret 0x8b48; 
0x000000000040ac03: ret 0x8b49; 
0x000000000046a62e: ret 0x8b4a; 
0x0000000000436e06: ret 0x8b4c; 
0x000000000042cf82: ret 0x8b74; 
0x000000000044dc27: ret 0x8bf8; 
0x0000000000445fd3: ret 0x8d08; 
0x0000000000443f58: ret 0x8d0f; 
0x000000000041ec02: ret 0x8d1; 
0x00000000004046d0: ret 0x8d48; 
0x000000000041c5c2: ret 0x8d49; 
0x00000000004614a6: ret 0x8d4a; 
0x000000000041b9c7: ret 0x8d4c; 
0x000000000040a317: ret 0x8d4d; 
0x0000000000409813: ret 0x8e0f; 
0x000000000040173a: ret 0x8e; 
0x000000000043d4cd: ret 0x9066; 
0x000000000041e69d: ret 0x90c3; 
0x000000000046b122: ret 0x98e8; 
0x0000000000409d52: ret 0x9aa; 
0x000000000046ca32: ret 0x9eb; 
0x00000000004022ea: ret 0xa5e9; 
0x0000000000471f18: ret 0xa5eb; 
0x0000000000457b5d: ret 0xa6eb; 
0x0000000000444467: ret 0xa73; 
0x000000000045a108: ret 0xa76; 
0x000000000041a042: ret 0xa7e; 
0x000000000040791e: ret 0xa801; 
0x000000000043b3e2: ret 0xa8e8; 
0x00000000004029ea: ret 0xa94; 
0x0000000000401c9a: ret 0xaa0; 
0x0000000000454946: ret 0xaae9; 
0x000000000043a0d1: ret 0xabe; 
0x000000000043c41d: ret 0xade8; 
0x0000000000438b80: ret 0xb2e8; 
0x000000000043d818: ret 0xb2e9; 
0x000000000041f5f9: ret 0xb60f; 
0x0000000000444f49: ret 0xb674; 
0x0000000000445e1a: ret 0xb6eb; 
0x000000000045a3c8: ret 0xb76; 
0x000000000041c709: ret 0xb817; 
0x0000000000437f36: ret 0xb8; 
0x0000000000450214: ret 0xb904; 
0x000000000041bcd9: ret 0xba41; 
0x0000000000415fef: ret 0xbbe8; 
0x00000000004740a6: ret 0xbc80; 
0x000000000045ee76: ret 0xbce8; 
0x000000000044625a: ret 0xbf75; 
0x0000000000429459: ret 0xc000; 
0x0000000000405111: ret 0xc031; 
0x000000000040d832: ret 0xc083; 
0x000000000045f60b: ret 0xc084; 
0x000000000040bb36: ret 0xc085; 
0x000000000045adb5: ret 0xc0ff; 
0x0000000000469194: ret 0xc141; 
0x000000000040182a: ret 0xc148; 
0x000000000041830f: ret 0xc231; 
0x000000000046ca3b: ret 0xc274; 
0x0000000000405e65: ret 0xc2eb; 
0x0000000000401999: ret 0xc35b; 
0x000000000040b46f: ret 0xc389; 
0x0000000000465cd9: ret 0xc475; 
0x0000000000424503: ret 0xc500; 
0x000000000041fc19: ret 0xc580; 
0x0000000000447309: ret 0xc589; 
0x00000000004078ff: ret 0xc602; 
0x0000000000450d95: ret 0xc689; 
0x0000000000464b3a: ret 0xc6; 
0x000000000043e2fa: ret 0xc701; 
0x00000000004358bc: ret 0xc748; 
0x0000000000466079: ret 0xc74; 
0x000000000043d603: ret 0xc7e9; 
0x0000000000415ca5: ret 0xc883; 
0x0000000000406466: ret 0xc8b; 
0x0000000000414443: ret 0xc8e9; 
0x0000000000471711: ret 0xc931; 
0x00000000004183f9: ret 0xc983; 
0x000000000041f606: ret 0xc985; 
0x0000000000425331: ret 0xc9ff; 
0x0000000000402026: ret 0xca21; 
0x0000000000418172: ret 0xca83; 
0x0000000000419479: ret 0xcac1; 
0x000000000041e3e1: ret 0xcb8; 
0x000000000043d5f6: ret 0xcc80; 
0x00000000004653c5: ret 0xcce9; 
0x0000000000406c2a: ret 0xce80; 
0x000000000046e2c6: ret 0xce89; 
0x0000000000457aa5: ret 0xceeb; 
0x00000000004035eb: ret 0xcfe8; 
0x0000000000410483: ret 0xd008; 
0x000000000040740e: ret 0xd089; 
0x00000000004481c0: ret 0xd108; 
0x000000000046919b: ret 0xd141; 
0x0000000000451a6a: ret 0xd148; 
0x000000000043c298: ret 0xd175; 
0x000000000046b5f2: ret 0xd1b8; 
0x000000000041fadd: ret 0xd1f7; 
0x000000000046ff98: ret 0xd230; 
0x00000000004589e6: ret 0xd231; 
0x0000000000473d1d: ret 0xd284; 
0x000000000044e96b: ret 0xd285; 
0x0000000000462da3: ret 0xd348; 
0x0000000000472333: ret 0xd375; 
0x0000000000444e75: ret 0xd575; 
0x000000000043a210: ret 0xd72; 
0x000000000043e096: ret 0xd889; 
0x000000000046bd60: ret 0xd8b; 
0x00000000004022d9: ret 0xda89; 
0x0000000000458fd5: ret 0xdaf7; 
0x000000000046cc3c: ret 0xdc75; 
0x000000000044bc90: ret 0xdd74; 
0x000000000047833d: ret 0xde8; 
0x0000000000418437: ret 0xdf75; 
0x0000000000429289: ret 0xe000; 
0x000000000042b889: ret 0xe074; 
0x0000000000413c1f: ret 0xe083; 
0x00000000004103ed: ret 0xe0c1; 
0x0000000000427612: ret 0xe162; 
0x0000000000402739: ret 0xe281; 
0x00000000004017ab: ret 0xe283; 
0x00000000004534dc: ret 0xe2c1; 
0x0000000000476c38: ret 0xe2e8; 
0x00000000004225b5: ret 0xe2ff; 
0x000000000044bd08: ret 0xe57f; 
0x0000000000466c49: ret 0xe74; 
0x000000000041f62e: ret 0xe775; 
0x0000000000450dec: ret 0xe783; 
0x000000000046c56f: ret 0xe7d; 
0x00000000004430cf: ret 0xe872; 
0x000000000044bccd: ret 0xe87f; 
0x000000000047221b: ret 0xe883; 
0x000000000041c59b: ret 0xe8f0; 
0x0000000000459a4b: ret 0xe901; 
0x0000000000410312: ret 0xe902; 
0x0000000000455c92: ret 0xe904; 
0x00000000004253c6: ret 0xe908; 
0x0000000000429a4c: ret 0xe910; 
0x0000000000463031: ret 0xea31; 
0x0000000000401b5a: ret 0xeac1; 
0x0000000000441887: ret 0xeb01; 
0x00000000004100dc: ret 0xeb02; 
0x000000000042ec36: ret 0xeb10; 
0x0000000000419c4a: ret 0xeb75; 
0x000000000045a687: ret 0xeb76; 
0x0000000000418490: ret 0xec75; 
0x0000000000463d3e: ret 0xed75; 
0x00000000004408ed: ret 0xee75; 
0x000000000045de27: ret 0xee76; 
0x000000000040ac38: ret 0xef72; 
0x0000000000475efb: ret 0xefe8; 
0x00000000004290b9: ret 0xf000; 
0x00000000004022e3: ret 0xf01; 
0x0000000000418769: ret 0xf02; 
0x000000000041d8db: ret 0xf04; 
0x0000000000411dfc: ret 0xf08; 
0x0000000000408b5a: ret 0xf0; 
0x000000000041b52a: ret 0xf0f; 
0x0000000000427bc2: ret 0xf10; 
0x000000000044e544: ret 0xf172; 
0x000000000045a947: ret 0xf176; 
0x00000000004031c6: ret 0xf20; 
0x00000000004180df: ret 0xf283; 
0x000000000045db57: ret 0xf376; 
0x00000000004359ca: ret 0xf3a0; 
0x0000000000435a9e: ret 0xf3b0; 
0x0000000000430b8d: ret 0xf40; 
0x0000000000460ed2: ret 0xf41; 
0x000000000040ee87: ret 0xf44; 
0x000000000043c609: ret 0xf475; 
0x000000000041766f: ret 0xf48; 
0x0000000000460c96: ret 0xf4e8; 
0x000000000044c6b1: ret 0xf50; 
0x0000000000418de0: ret 0xf631; 
0x000000000046ee56: ret 0xf641; 
0x0000000000419eb9: ret 0xf66; 
0x000000000041ebbe: ret 0xf6c3; 
0x000000000043688c: ret 0xf70b; 
0x00000000004116c2: ret 0xf748; 
0x0000000000424283: ret 0xf77a; 
0x00000000004064bb: ret 0xf7f7; 
0x0000000000428ee9: ret 0xf800; 
0x000000000040ee2f: ret 0xf883; 
0x000000000044d375: ret 0xf8; 
0x0000000000417233: ret 0xf8b; 
0x000000000044e838: ret 0xf983; 
0x000000000042640a: ret 0xf9c5; 
0x0000000000453cea: ret 0xf; 
0x0000000000473a31: ret 0xfa83; 
0x0000000000454c7a: ret 0xfac3; 
0x0000000000426358: ret 0xfac5; 
0x0000000000427234: ret 0xfbc5; 
0x000000000046528f: ret 0xfbe8; 
0x0000000000428d19: ret 0xfc00; 
0x0000000000422227: ret 0xfc0; 
0x000000000041e666: ret 0xfc3; 
0x000000000045bcd3: ret 0xfdc5; 
0x0000000000428b49: ret 0xfe00; 
0x00000000004261af: ret 0xfec5; 
0x000000000042131c: ret 0xff00; 
0x000000000045b12e: ret 0xff2d; 
0x0000000000425620: ret 0xff3; 
0x0000000000474b4d: ret 0xff3e; 
0x00000000004287a9: ret 0xff80; 
0x000000000043c2fe: ret 0xff85; 
0x000000000046cb2a: ret 0xff88; 
0x000000000040aa78: ret 0xffa0; 
0x0000000000406e02: ret 0xffa2; 
0x000000000043e57a: ret 0xffb3; 
0x0000000000408772: ret 0xffb8; 
0x00000000004285d9: ret 0xffc0; 
0x00000000004701ca: ret 0xffcb; 
0x0000000000403c72: ret 0xffd3; 
0x0000000000428409: ret 0xffe0; 
0x00000000004035fa: ret 0xffe2; 
0x000000000044fa31: ret 0xffe8; 
0x000000000040864a: ret 0xfff0; 
0x00000000004067ad: ret 0xfff1; 
0x000000000045fdfa: ret 0xfff2; 
0x000000000044ca2b: ret 0xfff3; 
0x000000000044707a: ret 0xfff4; 
0x000000000044d829: ret 0xfff7; 
0x0000000000428069: ret 0xfff8; 
0x0000000000405fad: ret 0xfff9; 
0x000000000040f188: ret 0xfffa; 
0x00000000004081d3: ret 0xfffb; 
0x0000000000427e99: ret 0xfffc; 
0x000000000044543d: ret 0xfffd; 
0x0000000000410a79: ret 0xfffe; 
0x00000000004049e7: ret 0xffff; 
0x000000000043b2cc: ret 1; 
0x000000000040736a: ret 2; 
0x000000000043889a: ret 3; 
0x000000000043487e: ret 4; 
0x000000000044556d: ret 5; 
0x000000000040e20e: ret 6; 
0x0000000000402a49: ret 7; 
0x0000000000418f4f: ret 8; 
0x0000000000443291: ret; 
0x0000000000457b1d: retf 0; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x000000000041ebb1: retf 0; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x0000000000456aaa: retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x00000000004157f3: retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000411797: retf 0x2948; ret 0x2948; 
0x00000000004110c2: retf 0x29c; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044bd05: retf 0x3948; ret 0xe57f; 
0x000000000044bcca: retf 0x3948; ret 0xe87f; 
0x0000000000465845: retf 0x394c; ret 0x2275; 
0x00000000004760b3: retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000043927a: retf 0x729; add byte ptr [rax + 0x39], cl; clc; jb 0x39290; xor eax, eax; ret; 
0x00000000004018f2: retf 0x777; add byte ptr [rax + 0x63], cl; add al, 0xb7; add rax, rdi; jmp rax; 
0x0000000000457b25: retf 0x80be; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000419c9a: retf 0x8348; ret 0x4810; 
0x000000000042ed85: retf 0x8349; ret 0x7f10; 
0x0000000000429c72: retf 0x8349; ret 0xf10; 
0x00000000004282cb: retf 0x850f; ret; 
0x0000000000402445: retf 0x8944; ret; 
0x000000000043074d: retf 0x8d4c; sbb eax, 0x4be3b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ad: retf 0x8d4c; sbb eax, 0x56c6f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043ba83: retf 0xa973; ret; 
0x000000000043129b: retf 0xbb76; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004314dc: retf 0xd377; xor eax, eax; vzeroupper; ret; 
0x000000000043234b: retf 0xd977; nop; xor eax, eax; ret; 
0x000000000043167b: retf 0xd977; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000433f76: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043219c: retf 0xda77; xor eax, eax; ret; 
0x000000000043127b: retf 0xdb76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431f2f: retf 0xdf76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004311f0: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000437c8c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000045ff84: retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000435791: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044e022: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000045c4f0: retf 0xf66; xlatb; ret; 
0x00000000004393c2: retf 0xf741; sar edi, 0xf; add byte ptr [rax], al; jne 0x393e0; mov eax, 9; syscall; 
0x0000000000448582: retf 0xfd4a; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b3b2: retf 0xfe1e; dec dword ptr [rax - 0x77]; ret; 
0x000000000040c6da: retf 0xfff4; inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000041104a: retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x0000000000472bf2: retf 4; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000004299f1: retf; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040d4a1: retf; adc eax, 0x8b480000; je 0xd4cd; or byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, rbx; call qword ptr [rbp + 0x38]; 
0x0000000000415cd8: retf; nop dword ptr [rax]; cmp qword ptr [rdi + 0x38], 0; je 0x15cf0; ret; 
0x000000000042a3f1: retf; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cfab: retf; or byte ptr [rax - 0x77], cl; ret 0x1be8; 
0x000000000045e8c1: retf; pushfq; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000464535: retf; stc; dec dword ptr [rax - 0x77]; add eax, 0x47d51; add rsp, 8; ret; 
0x000000000041ebb0: retfq 0; lea rdx, [rip + 0xcc65]; cmovne rax, rdx; ret; 
0x000000000044cfaa: retfq; or byte ptr [rax - 0x77], cl; ret 0x1be8; 
0x0000000000425fc8: rol ah, 0x41; jge 0x25fc9; ret 0x41c4; 
0x00000000004269e8: rol ah, 0x41; jge 0x269e9; ret 0x41c4; 
0x0000000000424281: rol ah, 0xc2; jp 0x2427d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000424401: rol ah, 0xc2; jp 0x243fd; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000045b082: rol ah, 0xe2; push -0x7af02f0b; ret 0xfffd; 
0x0000000000426315: rol ah, 1; jns 0x26316; ret 0x41c4; 
0x0000000000426366: rol ah, 1; jns 0x26367; ret 0x41c4; 
0x00000000004263c6: rol ah, 1; jns 0x263c7; ret 0x41c4; 
0x0000000000426418: rol ah, 1; jns 0x26419; ret 0x41c4; 
0x0000000000426d35: rol ah, 1; jns 0x26d36; ret 0x41c4; 
0x0000000000426d86: rol ah, 1; jns 0x26d87; ret 0x41c4; 
0x0000000000426de6: rol ah, 1; jns 0x26de7; ret 0x41c4; 
0x0000000000426e38: rol ah, 1; jns 0x26e39; ret 0x41c4; 
0x000000000045e1ce: rol bl, 0x83; ret 0x6608; 
0x000000000045acbe: rol bl, 0x83; ret 0x6620; 
0x000000000042e8b2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000435722: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x000000000041810b: rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000411fc1: rol byte ptr [rax + rax*8 - 0x74b7628b], 0xb3; movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x00000000004424aa: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x000000000044228b: rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000442e91: rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000043c7ca: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x000000000043cdda: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x000000000043cdb9: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x0000000000401006: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1012; call rax; 
0x000000000041e29c: rol byte ptr [rax], 0; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000043ca05: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000041ec64: rol byte ptr [rax], cl; add bh, dh; ret 0; 
0x0000000000437cf1: rol byte ptr [rbp + 0x311a75c0], 1; ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000045ea4f: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000045b6c5: rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x000000000042c0cf: rol byte ptr [rbp + 0x622c75c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000042b56f: rol byte ptr [rbp + 0x623075c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x00000000004246d2: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000045a962: rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000045de45: rol byte ptr [rbp - 0x3ad98a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x0000000000424508: rol byte ptr [rbp - 0x3adc8a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000042436d: rol byte ptr [rbp - 0x3ade8a40], cl; std; xlatb; ret 0xc085; 
0x000000000042425e: rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000000424286: rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000042bf73: rol byte ptr [rbp - 0xca78b40], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000000472006: rol byte ptr [rbx + 0x10c247c], 0xf; xchg ebp, eax; ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x000000000043a60b: rol byte ptr [rbx + 0x2f7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000469c47: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000435583: rol byte ptr [rbx - 0x39c6bf12], 0x72; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000045db52: rol byte ptr [rbx - 0x3dc61f16], 0x76; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de22: rol byte ptr [rbx - 0x3dc61f16], 0x76; out dx, al; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045a942: rol byte ptr [rbx - 0x3dc67f16], 0x76; int1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043735f: rol byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x0000000000434fdf: rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000434db3: rol byte ptr [rcx + 0x81e9], 0; add eax, ecx; vzeroupper; ret; 
0x0000000000453ee6: rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0x2244; 
0x0000000000431b25: rol byte ptr [rcx + rbp - 0x40], 0xe9; imul edi, ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000045ca65: rol byte ptr [rcx + rdi], 0xf2; je 0x5ca6f; test edx, edx; jne 0x5ca60; ret; 
0x0000000000475385: rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x00000000004064b8: rol byte ptr [rcx - 0x77], cl; ret 0xf7f7; 
0x0000000000436af1: rol byte ptr [rcx], 0x89; adc byte ptr [r15], cl; nop; ret; 
0x000000000045b86f: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000045b043: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b85c: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000045b023: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045ba32: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000401867: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x00000000004022d5: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000004587a4: rol byte ptr [rcx], 1; ret; 
0x000000000046b9b6: rol byte ptr [rdi + 0x4030305], 0; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x000000000044acb6: rol byte ptr [rdi + 0x6152305], 0; cmp eax, 1; jg 0x4ace8; xor eax, eax; add rsp, 8; ret; 
0x0000000000470659: rol byte ptr [rdx], 1; add byte ptr [rax], al; mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000043b8df: rol byte ptr [rdx], 1; add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x0000000000438793: rol byte ptr [rsi], cl; add byte ptr [rax], al; je 0x387b0; mov eax, 1; syscall; 
0x000000000046ff9a: rol byte ptr [rsi], cl; movups xmmword ptr [rax + 0x2a0], xmm0; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x0000000000459fa3: rol ch, 0xf8; ja 0x59fe1; ret 0x127e; 
0x000000000045a645: rol ch, 0xf8; ja 0x5a5cf; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000045db1d: rol ch, 0xf8; ja 0x5daa7; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000042b0c3: rol ch, cl; std; xlatb; ret 0xc085; 
0x000000000045bc97: rol ch, cl; std; xlatb; ret; 
0x000000000045d423: rol cl, 0xe2; add al, ch; clc; ja 0x5d464; ret 0x117e; 
0x000000000043741a: rol cl, 0xe8; add ch, cl; or dword ptr [rbx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045ce5d: rol cl, 0xe8; add cl, byte ptr [rdi]; add esi, edx; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000418112: rol cl, cl; out 7, al; xor sil, 0x81; syscall; 
0x0000000000423bc7: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000047059d: rol dword ptr [rax], 0; add byte ptr [rbx - 0x72b7f7bd], cl; adc eax, 0x2416d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040f975: rol dword ptr [rax], 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045c62b: rol dword ptr [rax], 1; add byte ptr [rax], al; lea rdx, [rip + 0x31b7a]; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000044a781: rol dword ptr [rax], cl; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000045e1c9: rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045ace4: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045e1f4: rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000042b88f: rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x000000000045c0fe: rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000423f62: rol dword ptr [rbp + 0xf4974c0], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045e1c4: rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045a0d3: rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042401f: rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000045acb4: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430c00: rol dword ptr [rbp - 0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000460894: rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000046b66d: rol dword ptr [rcx + rbp - 0x40], 1; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000040269f: rol dword ptr [rcx + rcx*2], 0x83; ret 0x8304; 
0x0000000000469026: rol dword ptr [rcx], 0x84; sal byte ptr [rbp - 0x32], cl; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x00000000004442f0: rol dword ptr [rcx], 9; ret 0x7439; 
0x000000000044a2e0: rol dword ptr [rip + 0x15894800], 0x4e; rol dword ptr [rip + 0x39486400], 0x37; je 0x4a2f8; ret; 
0x000000000044a2e7: rol dword ptr [rip + 0x39486400], 0x37; je 0x4a2f8; ret; 
0x000000000041048b: rol dword ptr [rsi + 9], 1; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004386f3: rol dword ptr [rsi], cl; add byte ptr [rax], al; je 0x38710; xor eax, eax; syscall; 
0x000000000041ebeb: rol edi, 1; add byte ptr [rax], al; test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000045c274: rol esp, 1; loope 0x5c25c; fcmovb st(0), st(4); loope 0x5c278; xchg ebx, eax; ret; 
0x000000000045c316: rol esp, 1; loope 0x5c2fe; fcmovb st(0), st(4); loope 0x5c31a; xchg ebx, eax; ret; 
0x000000000044a2df: rol qword ptr [rip + 0x15894800], 0x4e; rol dword ptr [rip + 0x39486400], 0x37; je 0x4a2f8; ret; 
0x000000000044a2e6: rol qword ptr [rip + 0x39486400], 0x37; je 0x4a2f8; ret; 
0x000000000041ed62: ror byte ptr [r8], 1; add byte ptr [rax], dl; lea rdx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000045aacb: ror byte ptr [rax + 0x29], 0xc2; jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad32: ror byte ptr [rax + 0x29], 0xc2; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad42: ror byte ptr [rax + 0x29], 0xc2; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad52: ror byte ptr [rax + 0x29], 0xc2; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad62: ror byte ptr [rax + 0x29], 0xc2; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000437333: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fb3: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000437313: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fa3: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435563: ror byte ptr [rax + 0x29], 0xd7; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435573: ror byte ptr [rax + 0x29], 0xd7; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379e3: ror byte ptr [rax + 0x29], 0xd7; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379c3: ror byte ptr [rax + 0x29], 0xd7; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004311f7: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000437c3c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000415dd3: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x24], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004575e8: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x2f], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000416553: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x34], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc3: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x3c], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004105f9: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x46], 0x48; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000415d21: ror byte ptr [rax + 0x29], 1; ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x66], 0x48; mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x00000000004355d6: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; ret; 
0x0000000000435023: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x0000000000417b4c: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004465cc: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000046bd7f: ror byte ptr [rax + 0x3b], 1; add eax, 0x40649; jae 0x6bd95; mov rdx, qword ptr [rip + 0x40648]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000040baca: ror byte ptr [rax + 0x48004a6c], 0x89; ret 0x294d; 
0x000000000040cf2f: ror byte ptr [rax + 0xf], 0x44; ret 0x5de9; 
0x0000000000467058: ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000401826: ror byte ptr [rax + 0xf], 0xaf; ret 0xc148; 
0x000000000046b612: ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x000000000042428e: ror byte ptr [rax + 1], 0xc8; ret; 
0x000000000042408f: ror byte ptr [rax + 1], 0xc8; vzeroupper; ret; 
0x000000000042b5f2: ror byte ptr [rax + 1], 0xd0; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000045b956: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000045b80f: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000045b007: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c142: ror byte ptr [rax + 1], 0xd0; ret; 
0x000000000042bd1c: ror byte ptr [rax + 1], 0xd0; vzeroupper; ret; 
0x000000000045c105: ror byte ptr [rax + 1], 0xf0; ret; 
0x00000000004245ac: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000042b5a6: ror byte ptr [rax + 1], 0xf8; cmp sil, byte ptr [rax]; jne 0x2b5fb; ret; 
0x0000000000424266: ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000004372ac: ror byte ptr [rax + 1], 0xf8; shr rax, 2; vzeroupper; ret; 
0x0000000000423f69: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000004240c9: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x240d6; vzeroupper; ret; 
0x000000000042bd7a: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000045a234: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045be34: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045d6d4: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x5d6e1; vzeroupper; ret; 
0x00000000004219c5: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042116e: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045bc9f: ror byte ptr [rax + 1], cl; ret 0x840f; 
0x00000000004311f4: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000437c39: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000042c2a5: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000431136: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d5: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x000000000045d316: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2b9: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x000000000041d0a4: ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000041e9fd: ror byte ptr [rax - 0x73], 0x15; jnp 0x1ea55; add byte ptr [rax], al; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x000000000046fd1e: ror byte ptr [rax - 0x73], 0x15; ret 0x248; 
0x0000000000424712: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x0000000000424742: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x0000000000424732: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000045da23: ror byte ptr [rax - 0x73], 0x44; xchg dword ptr [rax], esp; ret; 
0x0000000000464360: ror byte ptr [rax - 0x73], 4; ret 0x8b48; 
0x000000000043c2f4: ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x00000000004693fb: ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000045e987: ror byte ptr [rax - 0x75], 0x74; and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000044a762: ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x0000000000405f32: ror byte ptr [rax - 0x75], cl; jl 0x5f0c; add byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rsi*2 - 0x18]; xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x00000000004388c6: ror byte ptr [rax - 0x77], 0x44; and al, 0x20; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x000000000046a709: ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000456ae5: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041582e: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000045eb1b: ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x000000000043a370: ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000000438b7d: ror byte ptr [rax - 0x77], 1; ret 0xb2e8; 
0x0000000000469b5a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000408712: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000411a3e: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000458076: ror byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 8]; not esi; and esi, 0x80; syscall; 
0x0000000000458499: ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000408890: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004100f5: ror byte ptr [rax - 0x77], cl; ret 0x78e9; 
0x000000000040fe72: ror byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000419c3c: ror byte ptr [rax - 0x7d], 0xc0; adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000408929: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000437cf7: ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000044ac14: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004158b5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045ea23: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000041d9a1: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000410636: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042b102: ror byte ptr [rax - 0x7d], 0xc7; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x0000000000423f93: ror byte ptr [rax - 0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x0000000000423f83: ror byte ptr [rax - 0x7d], 0xc7; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000042afb9: ror byte ptr [rax - 0x7d], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042bcd2: ror byte ptr [rax - 0x7d], 0xc7; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000045a133: ror byte ptr [rax - 0x7d], 0xef; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000424053: ror byte ptr [rax - 0x7d], 0xef; jg 0x240a1; add eax, edi; vzeroupper; ret; 
0x0000000000430d13: ror byte ptr [rax - 0x7d], 0xef; jg 0x30d61; add eax, edi; vzeroupper; ret; 
0x0000000000434f13: ror byte ptr [rax - 0x7d], 0xef; jg 0x34f61; add eax, edi; vzeroupper; ret; 
0x0000000000437263: ror byte ptr [rax - 0x7d], 0xef; jg 0x372b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000045cc03: ror byte ptr [rax - 0x7d], 0xef; jg 0x5cc51; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000437283: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424063: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000423455: ror byte ptr [rax - 0x7d], 0xfa; ja 0x23480; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000423405: ror byte ptr [rax - 0x7d], 0xfa; ja 0x23489; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000043534a: ror byte ptr [rax - 0x7d], 0xfe; and byte ptr [rsi + 0xf], dh; test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x000000000043778a: ror byte ptr [rax - 0x7d], 0xfe; or byte ptr [rsi + 0xf], dh; test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x000000000047242a: ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000466e34: ror byte ptr [rax - 0x7d], 1; ret; 
0x00000000004430d7: ror byte ptr [rax - 0x7d], 1; rol byte ptr [rax + rcx*2], 0x39; ret; 
0x0000000000423f73: ror byte ptr [rax - 1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000042af92: ror byte ptr [rax - 1], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x0000000000476285: ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x00000000004733f0: ror byte ptr [rax], 0x49; mov dword ptr [rdx], edx; pop rbx; ret; 
0x000000000041ed63: ror byte ptr [rax], 1; add byte ptr [rax], dl; lea rdx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ecf3: ror byte ptr [rax], 1; add byte ptr [rbx + 0x8d1b80d], cl; add dh, dh; ret 0x7420; 
0x000000000041ee57: ror byte ptr [rax], 1; add byte ptr [rcx], al; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x00000000004306e9: ror byte ptr [rbp + rcx*4 + 0x1d], cl; lahf; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425666: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov dh, 0x6c; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043072b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; pop rbp; mov esi, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425649: ror byte ptr [rbp + rcx*4 + 0x1d], cl; shr dword ptr [rbp + rax], cl; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004362c5: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call rbx; 
0x000000000044e323: ror byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3de9; 
0x00000000004370d3: ror byte ptr [rbp - 0x80777c], 0xff; inc ecx; call 0x77fc35e3; ret; 
0x0000000000438733: ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x0000000000439234: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000433d53: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045e242: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e262: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e282: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000047200e: ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x0000000000476e32: ror byte ptr [rcx + 0x3c182454], 1; dec dword ptr [rdi]; test byte ptr [rbx - 0x76fffffc], dh; ret 0xe283; 
0x0000000000457b23: ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000439e5a: ror byte ptr [rcx + 0xf], 0x45; ret 0x8948; 
0x000000000044fe34: ror byte ptr [rcx + rcx*4 + 0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000046b5fd: ror byte ptr [rcx + rcx*4 + 0x4e], 8; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000417ee9: ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000045c132: ror byte ptr [rcx - 0x73], 0x44; add byte ptr [rax], ah; ret; 
0x000000000044cfa7: ror byte ptr [rcx - 0x73], 1; retfq; or byte ptr [rax - 0x77], cl; ret 0x1be8; 
0x0000000000439703: ror byte ptr [rcx - 0x77], 1; add ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000435904: ror byte ptr [rcx - 0x77], 1; ret; 
0x000000000041f026: ror byte ptr [rcx - 0x7d], 1; ret 0x4801; 
0x000000000046d1a2: ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x000000000040202a: ror byte ptr [rcx], cl; ret 0x8941; 
0x000000000044a512: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000419c44: ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000043b88d: ror byte ptr [rdi], 0x11; add eax, 0x7044b; ret; 
0x000000000043b87d: ror byte ptr [rdi], 0x11; add eax, 0x7046b; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x7044b], xmm0; ret; 
0x0000000000412db9: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000411044: ror byte ptr [rdi], 0x11; or r9b, bpl; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x0000000000416f60: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000043b93c: ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000043a57c: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000043a404: ror byte ptr [rdi], 0x44; ret 0x8348; 
0x0000000000448058: ror byte ptr [rdi], 0x48; ret 0xc083; 
0x000000000043abc9: ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041b646: ror byte ptr [rdi], 0x84; add dword ptr [rdi], 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000040f8d0: ror byte ptr [rdi], 0x84; cdq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042bd12: ror byte ptr [rdi], 0x84; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000045a4eb: ror byte ptr [rdi], 0x84; mov es, word ptr [rax]; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000046f740: ror byte ptr [rdi], 0x84; or dword ptr [rax + rax], eax; add byte ptr [rax + 1], cl; ret; 
0x000000000041b9be: ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000472ee6: ror byte ptr [rdi], 0x85; cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov rax, rcx; add rsp, 0x38; ret; 
0x00000000004588c8: ror byte ptr [rdi], 0x85; loope 0x588cf; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000413287: ror byte ptr [rdi], 0x85; ret 0; 
0x000000000045e1c6: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000452b24: ror byte ptr [rdi], 0x88; mov ebp, 0x1fffff1; ret; 
0x000000000044e326: ror byte ptr [rdi], 0x94; ret 0x3de9; 
0x000000000045b5b3: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae53: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000041472f: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x000000000042225e: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000421f99: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000408727: ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x8708; ret; 
0x00000000004386fa: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x38760; ret; 
0x00000000004391d1: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000450ef2: ror byte ptr [rdi], cl; mov ah, dh; adc al, 0; add dh, dh; ret 0xf40; 
0x000000000041b522: ror byte ptr [rdi], cl; test bl, ah; add al, 0; add dh, dh; ret 0xf0f; 
0x0000000000437b1c: ror byte ptr [rdi], cl; test byte ptr [rbp + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000043567b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000004310db: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000459a5a: ror byte ptr [rdi], cl; test byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000041a137: ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000435901: ror dword ptr [rax + 0x21], cl; ror byte ptr [rcx - 0x77], 1; ret; 
0x00000000004372f6: ror dword ptr [rax + 0x29], 0xd7; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000464704: ror dword ptr [rax + 0x39], 0xd1; jne 0x646e0; mov eax, dword ptr [rcx]; ret; 
0x000000000043500c: ror dword ptr [rax + 0x39], 1; int1; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x0000000000432159: ror dword ptr [rax + 0x39], 1; ret 0x3176; 
0x0000000000431af7: ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000431492: ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x000000000045ff88: ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000415966: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x14], 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000413ea8: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x14], 0x4c; mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000415dd6: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x24], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004575eb: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x2f], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000416556: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x34], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc6: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x3c], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004105fc: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x46], 0x48; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000415d24: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x66], 0x48; mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000415e66: ror dword ptr [rax + 0x39], 1; sal dword ptr [rbx + 0x6c], 0x41; movzx esi, byte ptr [rsp]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000043d34e: ror dword ptr [rax + 0x63], 1; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000435863: ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004311e9: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000043c924: ror dword ptr [rax - 0x75], 0x42; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044ad88: ror dword ptr [rax - 0x77], 0xc8; ret; 
0x0000000000423ab6: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000423506: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000046b0f8: ror dword ptr [rax - 0x77], 1; ret 0x8d4c; 
0x000000000043c41a: ror dword ptr [rax - 0x77], 1; ret 0xade8; 
0x0000000000462da0: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x00000000004157bd: ror dword ptr [rax - 0x7b], 0xd2; jne 0x157b0; ret; 
0x0000000000456a6d: ror dword ptr [rax - 0x7b], 0xd2; jne 0x56a60; ret; 
0x0000000000431132: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d1: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x000000000044d048: ror dword ptr [rax - 0x7d], 1; ret 0x4d08; 
0x000000000041ecf9: ror dword ptr [rax], 1; add dh, dh; ret 0x7420; 
0x000000000041eaa3: ror dword ptr [rax], cl; add byte ptr [rbx + 0x8d4080d], cl; add dh, dh; ret 0x7420; 
0x000000000041eb37: ror dword ptr [rax], cl; add byte ptr [rcx], al; lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000040ee4b: ror dword ptr [rbp - 0x69170000], 1; call 0x1f10ee55; add al, bpl; ret; 
0x000000000044d045: ror dword ptr [rbp - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4d08; 
0x000000000045020e: ror dword ptr [rbx - 0x7cb7fbbe], 1; ret 0xb904; 
0x000000000046a6a8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042b887: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000401872: ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x00000000004022e7: ror dword ptr [rdi], 0xaf; ret 0xa5e9; 
0x0000000000416eee: ror dword ptr [rdi], 1; adc dword ptr [rax + 0x10], eax; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x000000000046d33e: ror dword ptr [rdi], cl; cmp dword ptr [rcx - 1], -1; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000410480: ror dword ptr [rdi], cl; xchg esp, eax; ret 0xd008; 
0x00000000004157bc: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x157b0; ret; 
0x0000000000456a6c: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x56a60; ret; 
0x0000000000403c90: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043aeb6: sahf; or eax, 0x8d480007; add eax, 0x70d8f; ret; 
0x00000000004783ce: sahf; test dword ptr [rdx], 0xdb854800; jne 0x783b8; pop rbx; ret; 
0x0000000000414732: sal bh, 0xd8; ret; 
0x0000000000429627: sal bh, 1; ret 0x8000; 
0x0000000000429457: sal bh, 1; ret 0xc000; 
0x0000000000429287: sal bh, 1; ret 0xe000; 
0x00000000004290b7: sal bh, 1; ret 0xf000; 
0x0000000000428ee7: sal bh, 1; ret 0xf800; 
0x0000000000428d17: sal bh, 1; ret 0xfc00; 
0x0000000000428b47: sal bh, 1; ret 0xfe00; 
0x0000000000428977: sal bh, 1; ret 0xff00; 
0x00000000004287a7: sal bh, 1; ret 0xff80; 
0x00000000004285d7: sal bh, 1; ret 0xffc0; 
0x0000000000428407: sal bh, 1; ret 0xffe0; 
0x0000000000428237: sal bh, 1; ret 0xfff0; 
0x0000000000428067: sal bh, 1; ret 0xfff8; 
0x0000000000427e97: sal bh, 1; ret 0xfffc; 
0x0000000000427cc7: sal bh, 1; ret 0xfffe; 
0x000000000044df7c: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000431af5: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000431490: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x0000000000431020: sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004354c9: sal bl, 0xf; mov esp, 0x72c639c0; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435547: sal bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004378d9: sal bl, 1; bsf eax, eax; add rax, rdi; ret; 
0x0000000000431001: sal bl, 1; bsf rax, rax; add rax, rdi; ret; 
0x00000000004787b7: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x2760; 
0x000000000047873c: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x27c0; 
0x000000000047878e: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x2a00; 
0x00000000004787e0: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x2f40; 
0x0000000000478809: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x2fa0; 
0x0000000000478832: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x3020; 
0x000000000047885b: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x30c0; 
0x0000000000478884: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x3120; 
0x00000000004788ad: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x3180; 
0x00000000004786ed: sal byte ptr [rax + 0x48ffb5ee], 0xc7; ret 0x3240; 
0x000000000042bf75: sal byte ptr [rax + rbx*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000004403bd: sal byte ptr [rax + rsi + 0x48], 0x83; ret; 
0x0000000000408645: sal byte ptr [rax + rsi*2 + 0x48], 0xc7; ret 0xfff0; 
0x000000000042b891: sal byte ptr [rbp + 0x10], 0x66; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000466f30: sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x000000000046b62a: sal byte ptr [rbp + 0x13], cl; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000437cf3: sal byte ptr [rbp + 0x1a], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000042436f: sal byte ptr [rbp + 0x21], 0xc5; std; xlatb; ret 0xc085; 
0x000000000042450a: sal byte ptr [rbp + 0x23], 0xc5; sti; xchg ebx, eax; ret 0xc085; 
0x0000000000411f3c: sal byte ptr [rbp + 0x24], 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045a699: sal byte ptr [rbp + 0x24], 0xc5; std; xlatb; ret; 
0x00000000004244fb: sal byte ptr [rbp + 0x25], 0x62; mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000045b6c7: sal byte ptr [rbp + 0x26], 0x62; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x0000000000424377: sal byte ptr [rbp + 0x26], 0xc5; std; xlatb; ret; 
0x000000000045de47: sal byte ptr [rbp + 0x26], 0xc5; sti; xchg ebx, eax; ret 0xc085; 
0x000000000046b466: sal byte ptr [rbp + 0x27], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000045a955: sal byte ptr [rbp + 0x28], 0x62; mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000045a964: sal byte ptr [rbp + 0x29], 0xc5; sti; xchg ebx, eax; ret 0xc085; 
0x000000000045db22: sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x0000000000424512: sal byte ptr [rbp + 0x2b], 0xc5; sti; xchg ebx, eax; ret; 
0x000000000042c0d1: sal byte ptr [rbp + 0x2c], 0x62; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x0000000000424021: sal byte ptr [rbp + 0x2c], 0xc5; std; xlatb; ret 0xc085; 
0x000000000045a910: sal byte ptr [rbp + 0x2d], 0x83; ret 0xf40; 
0x000000000045db70: sal byte ptr [rbp + 0x2d], 0xc5; std; xlatb; ret; 
0x000000000045de4f: sal byte ptr [rbp + 0x2e], 0xc5; sti; xchg ebx, eax; ret; 
0x000000000042b571: sal byte ptr [rbp + 0x30], 0x62; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000045dded: sal byte ptr [rbp + 0x30], 0x83; ret 0xf10; 
0x000000000045a96c: sal byte ptr [rbp + 0x31], 0xc5; sti; xchg ebx, eax; ret; 
0x000000000045a64a: sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x0000000000424029: sal byte ptr [rbp + 0x34], 0xc5; std; xlatb; ret; 
0x000000000045a0d5: sal byte ptr [rbp + 0x48], 0xc5; std; xlatb; ret 0xc085; 
0x00000000004246f2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045a0dd: sal byte ptr [rbp + 0x50], 0xc5; std; xlatb; ret; 
0x000000000045a0a1: sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000045d534: sal byte ptr [rbp + 0x69], 0x83; ret 0xf40; 
0x000000000043c49b: sal byte ptr [rbp + 0x72], 0x48; mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000408763: sal byte ptr [rbp + 0xa], 0x5b; ret; 
0x000000000046b7a3: sal byte ptr [rbp + 0xa], 0xf; add ebp, edx; xor eax, eax; ret; 
0x000000000044a6fa: sal byte ptr [rbp + 0xb], 0x48; add esp, 8; ret; 
0x0000000000414712: sal byte ptr [rbp + 0xb], cl; xor eax, eax; ret; 
0x0000000000466296: sal byte ptr [rbp + 2], 0x5b; ret; 
0x0000000000466765: sal byte ptr [rbp + 2], cl; call rax; 
0x000000000046f2a7: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000043ab5e: sal byte ptr [rbp + 7], cl; ret; 
0x0000000000475596: sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000435070: sal byte ptr [rbp + rbp*2 - 0xd], 0xf; mov esp, 0x26de9c0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000434d90: sal byte ptr [rbp + rbp*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000437ba0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000043c228: sal byte ptr [rbp + rcx + 0x48], cl; lea edi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000424260: sal byte ptr [rbp + rdi*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000046c344: sal byte ptr [rbp + rdx + 0x4c], 0x39; call 0xffffffff8b5097c3; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000435e80: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x00000000004157c0: sal byte ptr [rbp - 0x13], cl; ret; 
0x000000000046dc34: sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004646ad: sal byte ptr [rbp - 0x18], 0x48; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000468196: sal byte ptr [rbp - 0x19], 0x48; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000042ea5b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x000000000040872c: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000439985: sal byte ptr [rbp - 0x28], 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000469029: sal byte ptr [rbp - 0x32], cl; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x000000000045a151: sal byte ptr [rbp - 0x54], 0x83; ret 0xf40; 
0x000000000045d5f4: sal byte ptr [rbp - 0x57], 0x83; ret 0xf40; 
0x000000000045aed0: sal byte ptr [rbp - 0x63], 0xc5; std; xlatb; ret; 
0x000000000045a6e1: sal byte ptr [rbp - 0x64], 0x83; ret 0xf40; 
0x000000000045dbc1: sal byte ptr [rbp - 0x74], 0x83; ret 0xf10; 
0x000000000045aec8: sal byte ptr [rbp - 0x7b], 0xc5; std; xlatb; ret 0xc0ff; 
0x000000000045ca6c: sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000415f45: sal byte ptr [rbx + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000416157: sal byte ptr [rbx + 0x16], 0x48; mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000041724c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000043c9f0: sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or byte ptr [rcx + 0x40893], cl; add dh, dh; ret 0x7402; 
0x0000000000430c02: sal byte ptr [rbx + rbx*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000046450a: sal byte ptr [rbx + rsi*8 + 0x31], 0xc0; ret; 
0x0000000000458f04: sal byte ptr [rcx + rbx + 0x53], 0x48; mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000424288: sal byte ptr [rcx + rbx*2 - 0xd], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000042bb74: sal byte ptr [rcx + rbx*2 - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000046dc2b: sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000423f64: sal byte ptr [rcx + rcx*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045a534: sal byte ptr [rcx + rcx*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000040f83c: sal byte ptr [rcx + rdx + 0x48], 0x8d; adc eax, 0x6ae1a; add rax, rdx; ret; 
0x000000000043113c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000045d31c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000040191f: sal byte ptr [rcx], 0xc0; test ch, 0xf0; je 0x1901; movzx eax, cl; pop rbx; ret; 
0x000000000042b15c: sal byte ptr [rcx], 0xc9; cmp sil, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x00000000004362c1: sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000417b4a: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000458497: sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000458c7e: sal byte ptr [rcx], cl; sar byte ptr [rax + 0xca], cl; syscall; 
0x0000000000458266: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000477866: sal byte ptr [rdi + rbp + 0x48], 0x8b; push rax; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000045fc46: sal byte ptr [rdi + riz + 0x48], 0x89; ret; 
0x000000000040100d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000004174cb: sal byte ptr [rdx + rax*8 + 0x4d], 0x85; jmp qword ptr [rsi + 0xf]; 
0x000000000043c26e: sal byte ptr [rdx + rbp + 0x48], cl; mov eax, edx; pop rbx; ret; 
0x000000000043be12: sal byte ptr [rdx + rbx + 0x41], 0xf; mov dh, 0x4a; add dword ptr [rcx - 0x7d], ecx; ret 0x4801; 
0x0000000000430b93: sal byte ptr [rdx + rbx*8 - 0x77], cl; leave; add rax, rcx; sub rax, rdi; ret; 
0x00000000004253d3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x00000000004356eb: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x0000000000437b8b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000045c100: sal byte ptr [rsi + rax + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000045d40f: sal byte ptr [rsi + rbp*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000459f8f: sal byte ptr [rsi + rbx*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045d2bf: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004245a7: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000417c2f: sal byte ptr [rsi + rsi + 0x45], 0x31; sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000456b25: sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x000000000042c6f7: sal dword ptr [rbp + 0x28], 0x83; ret 0x8320; 
0x000000000042d1b1: sal dword ptr [rbp + 0x2c], 0x83; ret 0x8320; 
0x00000000004261a3: sal dword ptr [rbp + 0x54], 0x83; ret 0x8320; 
0x0000000000427606: sal dword ptr [rbp + 0x57], 0x83; ret 0x8320; 
0x00000000004588c4: sal dword ptr [rbp + 8], 1; test eax, eax; jne 0x58bb0; mov eax, 1; ret; 
0x0000000000464707: sal dword ptr [rbp - 0x2a], 1; mov eax, dword ptr [rcx]; ret; 
0x0000000000415969: sal dword ptr [rbx + 0x14], 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000413eab: sal dword ptr [rbx + 0x14], 0x4c; mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x40]; 
0x0000000000415dd9: sal dword ptr [rbx + 0x24], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004575ee: sal dword ptr [rbx + 0x2f], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000416559: sal dword ptr [rbx + 0x34], 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc9: sal dword ptr [rbx + 0x3c], 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004105ff: sal dword ptr [rbx + 0x46], 0x48; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x00000000004146bb: sal dword ptr [rbx + 0x4a], 0x31; idiv byte ptr [rcx + 3]; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000415d27: sal dword ptr [rbx + 0x66], 0x48; mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000415e69: sal dword ptr [rbx + 0x6c], 0x41; movzx esi, byte ptr [rsp]; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000046dc9b: sal dword ptr [rbx - 0x67], 0x48; mov eax, esi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004789ff: sal dword ptr [rdi], 1; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000433d56: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004220da: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000454b22: sal esi, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475784: sar ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046f16d: sar ah, cl; call qword ptr [rbx + 0x49]; 
0x00000000004754b5: sar al, 0xff; mov rax, qword ptr [rax]; ret; 
0x000000000046b565: sar bh, 0xff; ret; 
0x000000000046b53a: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000043c260: sar bh, 1; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000427220: sar bh, 1; ret 0x840f; 
0x0000000000427538: sar bh, 1; ret 0x850f; 
0x000000000042cf80: sar bh, 1; ret 0x8b74; 
0x000000000045e59a: sar byte ptr [r8 + 0xd9], 1; syscall; 
0x000000000045e59a: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x0000000000412d57: sar byte ptr [rax + 0x2d], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004363b2: sar byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x0000000000439292: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041d7d9: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000041baa2: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000412812: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000044a4ea: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000457dbd: sar byte ptr [rax + 0xca], cl; syscall; 
0x000000000045e59b: sar byte ptr [rax + 0xd9], 1; syscall; 
0x000000000045e59b: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000043930e: sar byte ptr [rax - 0x2f], 0x48; add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000443b80: sar byte ptr [rcx - 0x2b], 0x2d; ret 0; 
0x000000000045a0be: sar byte ptr [rcx], 0xc2; jbe 0x5a115; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a66a: sar byte ptr [rcx], 0xc2; jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a930: sar byte ptr [rcx], 0xc2; jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045d551: sar byte ptr [rcx], 0xc2; jbe 0x5d5b5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045db42: sar byte ptr [rcx], 0xc2; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045de0d: sar byte ptr [rcx], 0xc2; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004354ff: sar byte ptr [rcx], 0xc6; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354cd: sar byte ptr [rcx], 0xc6; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043554b: sar byte ptr [rcx], 0xc6; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000043791b: sar byte ptr [rcx], 0xc6; jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043795c: sar byte ptr [rcx], 0xc6; jb 0x3792d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004379ab: sar byte ptr [rcx], 0xc6; jb 0x37a18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a508: sar byte ptr [rcx], 0xf2; cmovg rax, rdi; ret; 
0x0000000000438683: sar byte ptr [rdi - 0x64], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004182ab: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458f38: sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000418256: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418640: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000046b731: sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x000000000045891e: sar byte ptr [rdx + 1], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417cf6: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; 
0x0000000000417cf6: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; ret; 
0x0000000000417cd2: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd2: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c4a: sar byte ptr [rdx + 1], cl; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000418615: sar byte ptr [rdx + 1], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041832e: sar byte ptr [rdx + 1], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000417c8a: sar byte ptr [rdx + 2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000417c34: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046833c: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000042b645: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043b96d: sar byte ptr [rsi + 0x20], cl; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000458e31: sar byte ptr [rsi + 0x80], cl; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000447f19: sar byte ptr [rsi + 8], 0x83; call 0x8470823; pop rbx; ret; 
0x00000000004733c4: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000420cd7: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000045b39a: sar dh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000046d4ec: sar dl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000420695: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000042069c: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x206a0; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004206a3: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x206a8; ret; 
0x00000000004384c2: sar dword ptr [rax - 0x8000001], 0xd8; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000043ba2c: sar dword ptr [rdi + 0x10], 1; mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000477cd2: sar dword ptr [rdi + rdi*8], 0x74; ja 0x77c61; ret 0xe283; 
0x000000000041fa27: sar dword ptr [rsi + 0x7f], 0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000047553c: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000417b87: sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004576dc: sar eax, 2; sub eax, 1; ret; 
0x000000000046f89a: sar ebp, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000045aff3: sar edi, 0xc0; jne 0x5b040; vzeroupper; ret; 
0x00000000004393c5: sar edi, 0xf; add byte ptr [rax], al; jne 0x393e0; mov eax, 9; syscall; 
0x000000000045cec6: sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced6: sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee6: sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb6: sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000437924: sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0f: sar edi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b4: sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437965: sar edi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000457782: sar edx, 2; sub eax, edx; ret; 
0x0000000000431138: sar edx, cl; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d7: sar edx, cl; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004356e7: sar edx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000435677: sar edx, cl; test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x0000000000437b87: sar edx, cl; test rdx, rdx; je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b18: sar edx, cl; test rdx, rdx; je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d318: sar edx, cl; test rdx, rdx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2bb: sar edx, cl; test rdx, rdx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000421970: sar esi, 0x28; jg 0x21975; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004219cf: sar esi, 0x28; jg 0x219d4; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421123: sar esi, 0x48; jg 0x21128; ret; 
0x0000000000421178: sar esi, 0x48; jg 0x2117d; ret; 
0x000000000045345e: sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000046bb26: sar esi, cl; test esi, esi; je 0x6bba0; mov eax, eax; ret; 
0x000000000043c25f: sar r15b, 1; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000047553b: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004576db: sar rax, 2; sub eax, 1; ret; 
0x0000000000437923: sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0e: sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b3: sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437964: sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000457781: sar rdx, 2; sub eax, edx; ret; 
0x0000000000431137: sar rdx, cl; test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d6: sar rdx, cl; test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004356e6: sar rdx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000435676: sar rdx, cl; test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x0000000000437b86: sar rdx, cl; test rdx, rdx; je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b17: sar rdx, cl; test rdx, rdx; je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d317: sar rdx, cl; test rdx, rdx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2ba: sar rdx, cl; test rdx, rdx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045cfea: sarx eax, eax, ecx; test eax, eax; je 0x5cf07; tzcnt eax, eax; ret; 
0x000000000042c133: sarx eax, eax, edx; test eax, eax; je 0x2bfd4; bsf eax, eax; add rax, rdx; ret; 
0x0000000000430d3d: sarx eax, eax, edx; test eax, eax; je 0x30c64; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000431042: sarx eax, eax, edx; test eax, eax; je 0x30f67; tzcnt eax, eax; ret; 
0x0000000000424282: sarx eax, r8d, eax; test eax, eax; je 0x242e4; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000000424402: sarx eax, r8d, eax; test eax, eax; je 0x24464; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000000459eab: sbb al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x24cb; cmove rax, rdx; ret; 
0x0000000000439481: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000439481: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x00000000004685dc: sbb al, 0x24; add rsp, 0x30; ret; 
0x000000000045e984: sbb al, 0x41; mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000042b10c: sbb al, 0x48; add eax, edi; vzeroupper; ret; 
0x000000000044a75a: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x000000000043af73: sbb al, 0x49; lea edx, [rcx + 1]; mov qword ptr [rip + 0x6bde9], rdx; mov qword ptr [rdi + 0x478], rdx; add rsp, 8; ret; 
0x00000000004789d0: sbb al, 0xb5; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000470d22: sbb al, 0xd4; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000437d63: sbb al, 0xf4; mov eax, esi; syscall; 
0x0000000000423e63: sbb al, 0xf; adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040c950: sbb al, 1; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040d895: sbb al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045375b: sbb al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000423f0e: sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x23f19; mov byte ptr [rdi], sil; ret; 
0x000000000041e60f: sbb al, byte ptr [rbx]; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000043be14: sbb al, byte ptr [rcx + 0xf]; mov dh, 0x4a; add dword ptr [rcx - 0x7d], ecx; ret 0x4801; 
0x000000000040c6a2: sbb al, byte ptr [rcx]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000043e3bf: sbb al, ch; mov ebp, esp; std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000046ffd2: sbb bh, byte ptr [rdi]; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b594: sbb bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000004390eb: sbb bl, al; nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000415572: sbb bl, byte ptr [rax + 2]; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x0000000000449d7b: sbb bl, ch; ret; 
0x0000000000425a0a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a1a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259cb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309db: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425a09: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000430a19: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004259ca: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004309da: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000041598f: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004157ee: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000415829: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041103f: sbb byte ptr [r14 + 0xf], spl; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; or r9b, bpl; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x0000000000417ac0: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dc0: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x000000000046d93f: sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000004696d4: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004157f6: sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000046e827: sbb byte ptr [r8 - 0x77], r9b; ret; 
0x000000000045e990: sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000408724: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x8708; ret; 
0x00000000004542d4: sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000466c8a: sbb byte ptr [rax + 0x39], cl; ret; 
0x00000000004696d5: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000043d307: sbb byte ptr [rax + 0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x000000000043c2ef: sbb byte ptr [rax + rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x000000000041d062: sbb byte ptr [rax - 0x39], cl; ret; 
0x00000000004422fa: sbb byte ptr [rax - 0x75], cl; and al, 0x30; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000043872b: sbb byte ptr [rax - 0x75], cl; je 0x38754; adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x000000000044069d: sbb byte ptr [rax - 0x75], cl; je 0x406c6; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004411b8: sbb byte ptr [rax - 0x75], cl; je 0x411e1; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000441775: sbb byte ptr [rax - 0x75], cl; je 0x4179e; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000444a53: sbb byte ptr [rax - 0x75], cl; je 0x44a7c; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000445292: sbb byte ptr [rax - 0x75], cl; je 0x452bb; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000446682: sbb byte ptr [rax - 0x75], cl; je 0x466ab; pop rax; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000041993d: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000416eaa: sbb byte ptr [rax - 0x77], cl; int1; add rcx, rdx; mov qword ptr [rax + 8], rcx; xor eax, eax; ret; 
0x0000000000415832: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004157f7: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000040d884: sbb byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000043a1f4: sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000471f5f: sbb byte ptr [rax - 0x7d], cl; ret; 
0x00000000004121c3: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041e659: sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x182d; cmovne rax, rdx; ret; 
0x00000000004384b1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004384b1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x384c0; ret; 
0x0000000000478ab4: sbb byte ptr [rax], al; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000043a3a1: sbb byte ptr [rax], dl; add byte ptr [rax], al; ret; 
0x000000000046c043: sbb byte ptr [rbp + 0x48010003], ch; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000464574: sbb byte ptr [rbp + 4], bh; add al, ch; and eax, dword ptr [rbp + 0x3948fffb]; ret; 
0x0000000000457122: sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000415990: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000401a78: sbb byte ptr [rbx + 0x4814247c], cl; mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000476456: sbb byte ptr [rbx + 0x5d], bl; mov eax, edx; ret; 
0x000000000040a918: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000041063a: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000044a4bd: sbb byte ptr [rbx + rcx*4 + 0x77], cl; and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x0000000000416e47: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000476c32: sbb byte ptr [rbx - 0x76b7f019], al; ret 0xe2e8; 
0x00000000004559b7: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040ffa6: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000456e4a: sbb byte ptr [rcx - 0x2076b712], cl; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000476149: sbb byte ptr [rcx - 0x75], cl; xor dword ptr [rcx - 0x75], ecx; adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000046bd08: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000041f5f7: sbb byte ptr [rcx], cl; ret 0xb60f; 
0x000000000041219a: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000043a609: sbb byte ptr [rcx], dh; rol byte ptr [rbx + 0x2f7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000417ac1: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000412dc1: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000473131: sbb byte ptr [rdx], al; add bl, dh; divps xmm0, xmmword ptr [rip + 0x218c0]; ret; 
0x0000000000411040: sbb byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; or r9b, bpl; retf 0xfffa; jmp qword ptr [rsi - 0x70]; 
0x00000000004157ef: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000041582a: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000436e7d: sbb cl, byte ptr [rax - 0x39]; sar byte ptr [rax + 0x48ffffff], 0xc7; ret; 
0x000000000042f5dd: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f1cd: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000042ecd9: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429cc1: sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f4e9: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004299ee: sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3ee: sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ef5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f29d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000042f5b9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f689: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f43d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ec2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042a27e: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ac8e: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9ae: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000042f02d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042f50d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042ecfd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042ed9f: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f0fd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000429bb3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a5b3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e83: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042f36d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a2d3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042edc3: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ace3: sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000413198: sbb cl, ch; imul edi, esi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000041d74e: sbb cl, ch; pop rsp; idiv bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000437cf5: sbb dh, byte ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000040d893: sbb dword ptr [rax + 0x1a], 0; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000467761: sbb dword ptr [rax + 0x39], ecx; ret 0x830f; 
0x000000000041a624: sbb dword ptr [rax + 0x39], ecx; ret 0x840f; 
0x0000000000403c8a: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000043a615: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000044bc86: sbb dword ptr [rax], eax; add byte ptr [rbx - 0x7d], cl; cmp al, 0x29; add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000041eea3: sbb dword ptr [rax], esi; add dword ptr [rax], eax; test edx, 0x40000000; je 0x1ee7f; ret; 
0x0000000000458f06: sbb dword ptr [rbx + 0x48], edx; mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000477783: sbb dword ptr [rbx - 6], edx; jmp qword ptr [rsi + 0xf]; 
0x00000000004069f7: sbb dword ptr [rdi - 0x72b70001], esp; xor eax, 0x73246; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004088ae: sbb dword ptr [rdi], eax; add al, ch; cmp dh, byte ptr [rsi - 0x3fce0001]; ret; 
0x00000000004088a7: sbb dword ptr [rdi], eax; add byte ptr [rax - 0x73], cl; cmp eax, 0x7193c; call 0x3ef0; xor eax, eax; ret; 
0x00000000004088a6: sbb dword ptr ss:[rdi], eax; add byte ptr [rax - 0x73], cl; cmp eax, 0x7193c; call 0x3ef0; xor eax, eax; ret; 
0x0000000000438fc6: sbb eax, 0x1f0f0000; add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 3; syscall; 
0x00000000004783cd: sbb eax, 0x2f79e; test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x000000000041e85f: sbb eax, 0x48000016; cmovne eax, edx; ret; 
0x00000000004307c7: sbb eax, 0x4bdc4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430792: sbb eax, 0x4bdf9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430766: sbb eax, 0x4be25; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430750: sbb eax, 0x4be3b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043072e: sbb eax, 0x4be5d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430709: sbb eax, 0x4be82; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004306ec: sbb eax, 0x4be9f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000430694: sbb eax, 0x4bef7; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425727: sbb eax, 0x56bf8; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256f2: sbb eax, 0x56c2d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256c6: sbb eax, 0x56c59; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256b0: sbb eax, 0x56c6f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042568e: sbb eax, 0x56c91; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425669: sbb eax, 0x56cb6; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042564c: sbb eax, 0x56cd3; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255f4: sbb eax, 0x56d2b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043b9a2: sbb eax, 0x67a61; mov qword ptr fs:[0x698], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000041ee0b: sbb eax, 0x8d480001; add eax, 0x1224b; cmove rax, rdx; ret; 
0x0000000000417196: sbb eax, 0x909fd; add dword ptr [rip + 0x909f2], 1; pop rbx; ret; 
0x0000000000401b2d: sbb eax, 0xaa306; mov dword ptr [rip + 0xaa304], ecx; mov dword ptr [rip + 0xaa302], edx; pop rbx; ret; 
0x000000000043b68b: sbb eax, 0xc4834800; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004146f7: sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000041c170: sbb eax, 0xf486600; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000043b93f: sbb eax, 2; add byte ptr [rax], al; syscall; 
0x00000000004391cd: sbb eax, dword ptr [rax]; add byte ptr [rcx], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000457a88: sbb eax, dword ptr [rbx - 0x357cc41e]; add al, byte ptr [rbx + 0x14740afa]; mov eax, esi; ret; 
0x000000000041f6a4: sbb eax, dword ptr [rbx - 0x72b7f71e]; add eax, 0x164c1; lea rdx, [rip - 0x316]; cmove rax, rdx; ret; 
0x000000000045c633: sbb eax, dword ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x0000000000418b96: sbb eax, dword ptr [rdx]; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x000000000047673c: sbb eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410635: sbb eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004701d5: sbb eax, eax; add rsp, 8; ret; 
0x0000000000469c46: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000045b0f0: sbb eax, eax; or eax, 1; ret; 
0x00000000004760b9: sbb eax, eax; ret; 
0x0000000000409cff: sbb ebp, eax; ret; 
0x0000000000472f31: sbb ecx, ecx; add rsp, 0x38; and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x0000000000417b86: sbb ecx, edx; clc; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000043f570: sbb edi, esp; jmp qword ptr [rsi + 0xf]; 
0x000000000046b2d1: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000045e773: sbb esi, eax; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000403195: sbb esi, edi; ret 0; 
0x000000000045c594: sbb esp, dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x000000000046b2d0: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000449d7a: sbb r11b, bpl; ret; 
0x0000000000472f30: sbb rcx, rcx; add rsp, 0x38; and ecx, 2; sub rcx, 1; mov rax, rcx; ret; 
0x000000000045d9ae: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000434c92: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004674af: scasb al, byte ptr [rdi]; add rax, rsi; jmp rax; 
0x0000000000441c3e: scasb al, byte ptr [rdi]; and bh, ah; jmp qword ptr [rsi + 0x66]; 
0x00000000004391ca: scasb al, byte ptr [rdi]; call 0x3ad90; xor eax, eax; syscall; 
0x00000000004766bf: scasb al, byte ptr [rdi]; clc; jmp qword ptr [rsi + 0x66]; 
0x00000000004171de: scasb al, byte ptr [rdi]; or dword ptr [rcx], ecx; add byte ptr [rbx + 0x97f01f8], al; ret; 
0x00000000004606ee: scasb al, byte ptr [rdi]; ret; 
0x000000000045464d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x76fffffc], ebx; ret 0xc083; 
0x0000000000466c6e: scasd eax, dword ptr [rdi]; add rax, rdi; jmp rax; 
0x00000000004564f1: scasd eax, dword ptr [rdi]; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000041470e: scasd eax, dword ptr [rdi]; nop; test rdx, rdx; jne 0x14720; xor eax, eax; ret; 
0x0000000000401874: scasd eax, dword ptr [rdi]; ret 0x41c3; 
0x00000000004020b1: scasd eax, dword ptr [rdi]; ret 0x4853; 
0x000000000040186a: scasd eax, dword ptr [rdi]; ret 0x538d; 
0x000000000044c7dc: scasd eax, dword ptr [rdi]; ret 0x8b48; 
0x00000000004022e9: scasd eax, dword ptr [rdi]; ret 0xa5e9; 
0x0000000000401829: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000004022d8: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000004116c1: scasd eax, dword ptr [rdi]; ret 0xf748; 
0x000000000040e20d: scasd eax, dword ptr [rdi]; ret 6; 
0x0000000000401871: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x00000000004022e6: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xa5e9; 
0x000000000043b619: scasd eax, dword ptr [rdi]; xor eax, eax; ret; 
0x0000000000417b50: setae al; ret; 
0x0000000000403f87: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a472: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000403f86: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a471: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000418011: setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000047200c: setne al; mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x000000000041472d: setne al; movzx eax, al; neg eax; ret; 
0x000000000041810d: setne dh; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000041810c: setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000478716: shl byte ptr [rax + 0x48ffffff], 0xc7; ret 0x1900; 
0x000000000042c6fe: shl byte ptr [rax], 0x7c; fisubr word ptr [rcx]; ret 0xfec5; 
0x000000000042d1b8: shl byte ptr [rax], 0x7c; fld xword ptr [rcx]; ret 0xe162; 
0x00000000004261aa: shl byte ptr [rax], 0x7c; mov dl, 0x29; ret 0xfec5; 
0x00000000004372fb: shl byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x0000000000434f8b: shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000437251: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f06: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x000000000045ea52: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x0000000000435d9f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000041c176: shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000043b889: shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x7044b; ret; 
0x000000000042b883: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042b7f5: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000041bee3: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000045c403: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0x518d; 
0x000000000045c423: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x0000000000410fe1: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000046744a: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041e8dd: shl byte ptr [rsi - 0x70], 0x80; in eax, 2; lea rdx, [rip + 0x2d66]; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x000000000041e7dd: shl byte ptr [rsi - 0x70], 0x80; in eax, 2; lea rdx, [rip + 0x2e96]; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000041e6dd: shl byte ptr [rsi - 0x70], 0x80; in eax, 2; lea rdx, [rip + 0x2f96]; lea rax, [rip + 0x2f1f]; cmovne rax, rdx; ret; 
0x000000000041ecac: shl dh, 1; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000045557a: shl dword ptr [rax], 0x65; add byte ptr [rax - 0x39], cl; ret 0x6c88; 
0x000000000043ab69: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000041f6ab: shl dword ptr [rcx + rax], 0x48; lea edx, [rip - 0x316]; cmove rax, rdx; ret; 
0x0000000000466ddc: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000041bede: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004632b9: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000042b87b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000435bfb: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x00000000004245ec: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000004632be: shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000045a09d: shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000045c4fd: shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000045bcaa: shl eax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd59: shl eax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000430ffc: shl eax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000043b5ca: shl eax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043adf8: shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000043aeac: shl eax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x00000000004378d5: shl eax, 8; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042c0ed: shl ecx, 0x20; or rax, rcx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6a1: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000042437f: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004311eb: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043b610: shl ecx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x000000000042254e: shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000046a1bc: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a147: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046a116: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042c2aa: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045d424: shl edx, 2; vzeroupper; cmp edx, eax; jle 0x5d43f; add rax, rdi; ret; 
0x0000000000478aad: shl edx, 4; cmp qword ptr [rdi + rdx + 0x18], 0; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000043ae1c: shl edx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046b4a3: shl edx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004370b0: shl esi, 2; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000418113: shl esi, 7; xor sil, 0x81; syscall; 
0x000000000046a1bb: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a146: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046a115: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000045bca9: shl rax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000045bd58: shl rax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000430ffb: shl rax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000043b5c9: shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x3b61a; ret; 
0x000000000043adf7: shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x000000000043aeab: shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x70d9e], rax; lea rax, [rip + 0x70d8f]; ret; 
0x000000000042c0ec: shl rcx, 0x20; or rax, rcx; bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6a0: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000042437e: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004311ea: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043b60f: shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x3b5c9; xor eax, eax; ret; 
0x000000000042c2a9: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000478aac: shl rdx, 4; cmp qword ptr [rdi + rdx + 0x18], 0; je 0x78aa0; xor eax, eax; pop rbx; ret; 
0x000000000043ae1b: shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046b4a2: shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000046a1b4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a140: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046a1b3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046a13f: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000043f56d: shr al, 0x3d; sbb edi, esp; jmp qword ptr [rsi + 0xf]; 
0x000000000044a811: shr al, 0xb1; push -0x76b70005; ret; 
0x0000000000465f30: shr al, 0xfa; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000046f2f1: shr bl, 0x9c; nop dword ptr [rax]; call rax; 
0x000000000045e76f: shr bl, 0xb4; call 0x3ad90; nop word ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x0000000000478765: shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0x2980; 
0x000000000042ea5f: shr byte ptr [rcx], 0xc8; ret; 
0x000000000045b02f: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x000000000045cae3: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c23: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000045cb03: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c33: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000045cb23: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c43: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000045cac3: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c13: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000430f13: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f23: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f33: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f43: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045cec3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000043660c: shr byte ptr [rdx], 0x4c; mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000042b8ce: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000042564d: shr dword ptr [rbp + rax], cl; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045b94e: shr dword ptr [rcx], 0xc8; jne 0x5b954; ret; 
0x000000000045de33: shr dword ptr [rip + 0xff], 0x75; sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r11b; ret 0xc500; 
0x00000000004018ad: shr eax, 0x16; add eax, 1; ret; 
0x0000000000457bb6: shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x5000e], eax; ret; 
0x000000000040197d: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000401963: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000401a12: shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000004094ab: shr eax, 1; imul rax, rsi; mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x000000000045b910: shr eax, 1; mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x00000000004373b4: shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000437b28: shr eax, 2; ret; 
0x000000000045d1d4: shr eax, 2; test dl, dl; je 0x5d1e1; and edx, 0xf; je 0x5d1f0; ret; 
0x000000000043709b: shr eax, 2; vzeroupper; ret; 
0x000000000045ce5e: shr eax, 2; xtest; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000470d17: shr eax, 3; lea rdx, [rax - 1]; je 0x70d36; lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004188ef: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x00000000004019ef: shr eax, 6; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x0000000000401951: shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000414723: shr eax, cl; cmpsd dword ptr [rsi], dword ptr [rdi]; out 0xff, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000045a72e: shr ecx, 0x20; and eax, ecx; je 0x5a740; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045aa1e: shr ecx, 0x20; and eax, ecx; je 0x5aa30; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000454866: shr ecx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043739d: shr ecx, 2; cmp rcx, rsi; jb 0x37124; mov rax, r8; vzeroupper; ret; 
0x000000000041c3c9: shr ecx, 3; rep stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045dc0b: shr ecx, 8; and eax, ecx; je 0x5dc1d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045defb: shr ecx, 8; and eax, ecx; je 0x5df0d; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000046b26c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046b1f1: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000046b1c0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000454770: shr ecx, cl; push rax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000408722: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x8708; ret; 
0x000000000045dfae: shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e245: shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e265: shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e285: shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a5: shr esi, 2; sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000046b26b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046b1f0: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000046b1bf: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004094aa: shr rax, 1; imul rax, rsi; mov rsi, rcx; lea r12, [rcx + rax]; mov rdi, r12; call rbx; 
0x0000000000437b27: shr rax, 2; ret; 
0x000000000045d1d3: shr rax, 2; test dl, dl; je 0x5d1e1; and edx, 0xf; je 0x5d1f0; ret; 
0x00000000004371ff: shr rax, 2; vzeroupper; ret; 
0x0000000000470d16: shr rax, 3; lea rdx, [rax - 1]; je 0x70d36; lea rbx, [r12 + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004188ee: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000045a72d: shr rcx, 0x20; and eax, ecx; je 0x5a740; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045aa1d: shr rcx, 0x20; and eax, ecx; je 0x5aa30; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000408721: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x8708; ret; 
0x000000000046b264: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046b1ea: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000046b263: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046b1e9: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000425255: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000424a55: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004302f5: shufps xmm0, xmmword ptr [rdi + 2], 0; ret; 
0x000000000042fb25: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000407f0a: sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000409ddb: sldt word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041e70e: sldt word ptr [rax]; cmovne rax, rdx; ret; 
0x000000000045d1e4: sldt word ptr [rax]; je 0x5d1f8; add rax, 2; ret; 
0x00000000004393c7: sldt word ptr [rax]; jne 0x393e0; mov eax, 9; syscall; 
0x0000000000401841: sldt word ptr [rax]; lea rax, [rbx + 1]; pop rbx; ret; 
0x00000000004597ae: sldt word ptr [rax]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000041e807: sldt word ptr [rax]; lea rax, [rip + 0xeff]; cmovne rax, rdx; ret; 
0x0000000000414611: sldt word ptr [rax]; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000045366f: sldt word ptr [rax]; mov rdx, r14; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000431588: sldt word ptr [rax]; sub rdx, 0x80; ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x000000000043225d: sldt word ptr [rax]; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000436784: sldt word ptr [rax]; test edx, 0x40000000; je 0x3675f; ret; 
0x000000000045c644: stc; add al, 0; ret; 
0x00000000004031ba: stc; add byte ptr [rax], al; add al, byte ptr [rax + 0xf]; test byte ptr [rbx - 0x9fffffb], bh; ret 0xf20; 
0x0000000000440caa: stc; add ecx, dword ptr [rdi]; xchg dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041ea36: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ea40; ret; 
0x0000000000459756: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x59760; ret; 
0x000000000045c796: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x5c7a0; ret; 
0x0000000000419b13: stc; and byte ptr [rcx], cl; add byte ptr [rax - 0x77], cl; je 0x19b3f; or al, ch; jmp rax; 
0x0000000000469132: stc; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000464536: stc; dec dword ptr [rax - 0x77]; add eax, 0x47d51; add rsp, 8; ret; 
0x00000000004653c1: stc; dec dword ptr [rax - 0x77]; ret 0xcce9; 
0x000000000046272f: stc; inc dword ptr [rbp - 0x4a7bf040]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000455839: stc; ja 0x5585c; lea rsi, [rip + 0x384a4]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000044df6a: stc; jb 0x4df50; mov eax, r8d; ret; 
0x0000000000464519: stc; je 0x64520; ret; 
0x0000000000423561: stc; jle 0x2356b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000423721: stc; jle 0x2372b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000464d5f: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046d541: stc; jmp qword ptr [rsi + 0x66]; 
0x00000000004645d8: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000042529f: stc; lea rax, [rdi + rdx]; ret; 
0x0000000000424aaf: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430793: stc; mov ebp, 0x63490004; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425297: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000424aa7: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430327: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000042fb57: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000436611: stc; mov rdx, qword ptr [rsp + 0x10]; mov rdi, r12; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000041c902: stc; or byte ptr [rax], al; add byte ptr [rbp + 7], dh; ret; 
0x00000000004447ec: stc; or byte ptr [rdi], 0x85; ret; 
0x000000000046a706: stc; push qword ptr [rcx]; ror byte ptr [rax - 0x77], 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041fa89: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004219cb: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421174: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043032f: stc; ret; 
0x00000000004645d7: stc; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000041ec16: stc; sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ec20; ret; 
0x000000000041edd6: stc; sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ede0; ret; 
0x000000000041eec6: stc; sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1eed0; ret; 
0x0000000000459e76: stc; sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x59e80; ret; 
0x0000000000420ba4: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042fb5f: stc; vzeroupper; ret; 
0x000000000045b12c: stc; xlatb; ret 0xff2d; 
0x0000000000449d53: stc; xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x00000000004110fe: std; add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x000000000046bf73: std; add eax, dword ptr [rax]; ret; 
0x00000000004657ce: std; call qword ptr [rbp + 0x48]; 
0x0000000000448330: std; dec dword ptr [rax - 0x77]; add byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000449d4c: std; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; stc; xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x000000000046445f: std; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000043abc5: std; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000448c27: std; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000460d75: std; dec dword ptr [rbp + rcx*4 + 0x25]; call rsp; 
0x000000000043e3c3: std; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x00000000004172d8: std; dec dword ptr [rdi]; xchg esp, eax; ret 0x2b48; 
0x000000000046964e: std; jbe 0x69658; ret; 
0x0000000000448584: std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000447e63: std; jmp qword ptr [rsi + 0x41]; 
0x0000000000436b90: std; jmp qword ptr [rsi + 0x66]; 
0x0000000000449d55: std; jmp qword ptr [rsi + 0xf]; 
0x000000000045e46c: std; jmp qword ptr [rsi - 0x70]; 
0x000000000042527b: std; lea rax, [rdi + rdx]; ret; 
0x0000000000424a8b: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000425277: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000424a87: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000430317: std; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042fb47: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000417197: std; or dword ptr [rcx], ecx; add byte ptr [rbx + 0x909f205], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000470ca8: std; pop rbx; pop rbp; jmp rdx; 
0x00000000004215f8: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000043031b: std; ret; 
0x000000000042b4d3: std; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000421bd9: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x00000000004217c6: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000420f76: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000042137e: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004208d4: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000042069a: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004237b2: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042fb4b: std; vzeroupper; ret; 
0x0000000000424025: std; xlatb; ret 0xc085; 
0x000000000045adb3: std; xlatb; ret 0xc0ff; 
0x000000000042402d: std; xlatb; ret; 
0x0000000000423f60: std; xlatb; rol dword ptr [rbp + 0xf4974c0], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045a0d1: std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042401d: std; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000430bfe: std; xlatb; rol dword ptr [rbp - 0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000045bc9d: std; xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x000000000045aff1: std; xlatb; sar edi, 0xc0; jne 0x5b040; vzeroupper; ret; 
0x000000000045a09b: std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000041eca6: sti; add byte ptr [rax], al; lea rdx, [rip + 0xe6d0]; cmove rax, rdx; ret; 
0x000000000046c49d: sti; add eax, dword ptr [rax]; jne 0x6cb50; ret; 
0x000000000044b1a4: sti; dec dword ptr [rax + 0x29]; ret; 
0x000000000046457b: sti; dec dword ptr [rax + 0x39]; ret; 
0x00000000004693a3: sti; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000045ffa0: sti; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000044a815: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000457627: sti; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000457b5a: sti; dec dword ptr [rcx + 0x48a6ebc2]; mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x4e947], eax; ret; 
0x000000000046379f: sti; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000456fcb: sti; inc dword ptr [rcx + rcx*4 - 2]; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000431f15: sti; ja 0x2ce20; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043846e: sti; ja 0x383d0; lea rdx, [rip + 0x44727]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045ed9f: sti; jmp qword ptr [rsi + 0x48]; 
0x0000000000445043: sti; jmp qword ptr [rsi + 0x66]; 
0x000000000045792b: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000045e58c: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000458f0a: sti; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458f0a: sti; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004760f9: sti; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000448c2e: sti; or eax, 0x3145de75; test byte ptr [rcx + rcx*4 - 0x11], -0x18; ret; 
0x0000000000472011: sti; pushfq; add eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x0000000000457006: sti; test byte ptr [rdi], 2; jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000466763: sti; test edx, edx; jne 0x6676a; call rax; 
0x0000000000420b96: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000045b7d3: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b69c: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x5b6aa; ret; 
0x000000000042450e: sti; xchg ebx, eax; ret 0xc085; 
0x0000000000424516: sti; xchg ebx, eax; ret; 
0x000000000045b6c3: sti; xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x000000000042c0cd: sti; xchg ebx, eax; rol byte ptr [rbp + 0x622c75c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000042b56d: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623075c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000045a960: sti; xchg ebx, eax; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000045de43: sti; xchg ebx, eax; rol byte ptr [rbp - 0x3ad98a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x0000000000424506: sti; xchg ebx, eax; rol byte ptr [rbp - 0x3adc8a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000042425c: sti; xchg ebx, eax; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000042bf71: sti; xchg ebx, eax; rol byte ptr [rbp - 0xca78b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000045a643: sti; xchg ebx, eax; rol ch, 0xf8; ja 0x5a5cf; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000045db1b: sti; xchg ebx, eax; rol ch, 0xf8; ja 0x5daa7; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000045c0fc: sti; xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000043101e: sti; xchg ebx, eax; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042721e: sti; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000427536: sti; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042cf7e: sti; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000045de31: sti; xchg ebx, eax; shr dword ptr [rip + 0xff], 0x75; sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r11b; ret 0xc500; 
0x0000000000423cd2: sti; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423aa0: sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041379a: stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000454d05: stosb byte ptr [rdi], al; call 0x2ef4d0a; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000476af2: stosb byte ptr [rdi], al; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000423abb: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000042350b: stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000457e0c: stosb byte ptr [rdi], al; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000041b9c1: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000041eb3f: stosd dword ptr [rdi], eax; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000042afdc: stosd dword ptr [rdi], eax; add rax, rdi; vzeroupper; ret; 
0x000000000041c3ce: stosd dword ptr [rdi], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045eac2: stosd dword ptr [rdi], eax; call 0x3ad90; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000435794: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000437c34: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000442d09: stosd dword ptr [rdi], eax; mov bl, 3; add al, ch; ficom word ptr [rcx]; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000042a111: stosd dword ptr [rdi], eax; or eax, 0x83480000; ret 0x4910; 
0x0000000000445041: stosd dword ptr [rdi], eax; out dx, al; sti; jmp qword ptr [rsi + 0x66]; 
0x00000000004356f5: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000435362: stosd dword ptr [rdi], eax; tzcnt eax, eax; ret; 
0x00000000004370b5: stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000434da2: stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x000000000041c3cd: stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046b451: str word ptr [rax + 0x21]; ret 0xc148; 
0x000000000042c0d3: sub al, 0x62; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x0000000000423533: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0x2353e; mov byte ptr [rdi], sil; ret; 
0x00000000004236f3: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0x236fe; mov byte ptr [rdi], sil; ret; 
0x000000000042d1b3: sub al, 0x83; ret 0x8320; 
0x0000000000440bc1: sub al, 0x89; ret 0x6274; 
0x0000000000415ca3: sub al, 0x89; ret 0xc883; 
0x00000000004049d9: sub al, 0xa; add byte ptr [rbx - 0x70f0fe08], al; add dword ptr [rcx], 0; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000424023: sub al, 0xc5; std; xlatb; ret 0xc085; 
0x0000000000418820: sub al, 0xc9; or byte ptr [rax], al; ret; 
0x00000000004481bd: sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x000000000043e41b: sub al, 0xfc; jmp qword ptr [rsi - 0x70]; 
0x000000000043a3d8: sub al, byte ptr [rax + rax]; call 0x3a140; test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000043a418: sub al, byte ptr [rax + rax]; call 0x3a140; test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x000000000041e8e6: sub ax, 0; lea rax, [rip + 0x2d0f]; cmovne rax, rdx; ret; 
0x00000000004414ab: sub bh, ah; jmp qword ptr [rsi - 0x70]; 
0x000000000046b4f7: sub bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000046bf72: sub bh, ch; add eax, dword ptr [rax]; ret; 
0x000000000043e4c2: sub bl, byte ptr [rdx - 4]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000417222: sub byte ptr [r8 - 0x75], r9b; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000477862: sub byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbp + 0x48], 0x8b; push rax; sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000457d63: sub byte ptr [rax + 0x16], bh; pop rbx; pop rbp; ret; 
0x0000000000444464: sub byte ptr [rax + 0x39], cl; ret 0xa73; 
0x000000000044735d: sub byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000417223: sub byte ptr [rax - 0x75], cl; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000455eb4: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004643f7: sub byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000477863: sub byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp + 0x48], 0x8b; push rax; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000040650f: sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000416462: sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000004361a5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x361d8; add rsp, 0x110; pop rbx; ret; 
0x00000000004367db: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x36804; add rsp, 0x20; pop rbx; ret; 
0x0000000000438513: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x38529; add rsp, 0x28; ret; 
0x0000000000439053: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390e2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439183: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a398: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a62d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000043c4dc: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3c526; add rsp, 0x110; pop rbx; ret; 
0x000000000044a6a4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4a6eb; mov eax, edx; add rsp, 0x148; ret; 
0x000000000044ae47: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af10: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4af1e; add rsp, 0xd8; ret; 
0x000000000045019c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000457c6c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57c78; add rsp, 0x10; pop rbx; ret; 
0x0000000000457e8a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57e96; add rsp, 0x10; pop rbx; ret; 
0x0000000000458ff2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e925: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea1b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5ea29; movzx eax, al; add rsp, 0x58; ret; 
0x000000000045ea78: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000045eb8f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5ebb3; mov eax, edx; add rsp, 0x38; ret; 
0x000000000046972d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004697e4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x697f0; add rsp, 0x20; pop rbx; ret; 
0x00000000004698fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a25: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469af1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469be1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046b113: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6b15e; leave; ret; 
0x000000000046bcff: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706df: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707b1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x707bc; add rsp, 0x38; ret; 
0x0000000000470821: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470907: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x70912; add rsp, 0x38; ret; 
0x000000000047096c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b55: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5e0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6af: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb40: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000046e194: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000040fa55: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000046fed8: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000046fed7: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000046827a: sub byte ptr [rbx], al; add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x30c], ecx; mov qword ptr [rax + 0x320], rdx; ret; 
0x0000000000468246: sub byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000044a4c5: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000000046f06b: sub byte ptr [rcx - 0x77], cl; ret 0x850f; 
0x000000000040e223: sub byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041ec11: sub byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x128; je 0x1ec20; ret; 
0x000000000041edd1: sub byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x128; je 0x1ede0; ret; 
0x000000000041eec1: sub byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x128; je 0x1eed0; ret; 
0x0000000000459e71: sub byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x128; je 0x59e80; ret; 
0x000000000041ec17: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ec20; ret; 
0x000000000041edd7: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1ede0; ret; 
0x000000000041eec7: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x1eed0; ret; 
0x0000000000459e77: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x59e80; ret; 
0x000000000045eb19: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x0000000000423b79: sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000421941: sub byte ptr [rdi + 0x44], bh; cmp bh, bh; ret; 
0x000000000042b4d4: sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000045c336: sub byte ptr [rdi + 0x58], ch; jg 0x5c39d; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x00000000004250aa: sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x00000000004218a1: sub byte ptr [rdi + 1], bh; ret; 
0x0000000000423d57: sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000042189b: sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000420e88: sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000423c48: sub byte ptr [rdi + 7], bh; ret; 
0x0000000000421724: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000421926: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000423c98: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000420e96: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421972: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000423b73: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044f118: sub byte ptr [rdi], cl; cmp dword ptr [rcx + 0x48000008], -0x73; add al, 0x83; ret; 
0x000000000045de3a: sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r11b; ret 0xc500; 
0x000000000045a957: sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r15b; ret 0xc500; 
0x0000000000404d4c: sub byte ptr [rdx], cl; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045b597: sub ch, byte ptr [rdi + 0x16]; vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x5b5b0; ret; 
0x000000000042b401: sub cl, byte ptr [rax + 1]; clc; ret; 
0x0000000000415107: sub cl, byte ptr [rcx]; add byte ptr [rbx + 0x317f01f8], al; add rsp, 8; ret; 
0x0000000000414955: sub cl, byte ptr [rdi]; mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040b64c: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004414aa: sub dil, spl; jmp qword ptr [rsi - 0x70]; 
0x000000000045ea5e: sub dword ptr [rax + 0x101], edi; syscall; 
0x000000000044c6d1: sub dword ptr [rax + rax], ecx; add dh, dh; ret 0xf10; 
0x00000000004488f3: sub dword ptr [rbp - 0x74b5fffb], edi; add al, 0xe0; test rax, rax; je 0x48902; call rax; 
0x0000000000453759: sub dword ptr [rbx + 0x1a], 0; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040fda4: sub dword ptr [rdi + 0x31], esi; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004557a7: sub dword ptr [rdi + 0xe], esi; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x000000000045899f: sub dword ptr [rdi + 4], 1; je 0x588f0; xor eax, eax; ret; 
0x0000000000458bfc: sub dword ptr [rdi + 4], 1; je 0x58bbd; mov eax, 0x83; ret; 
0x000000000040e3bb: sub dword ptr [rdi], 0x8b480009; add al, 0xd0; jmp rax; 
0x000000000043927b: sub dword ptr [rdi], eax; add byte ptr [rax + 0x39], cl; clc; jb 0x39290; xor eax, eax; ret; 
0x000000000041ad31: sub dword ptr [rdi], ecx; xchg ebp, eax; ret 0x2948; 
0x0000000000423cd8: sub dword ptr [rdi], edi; ret; 
0x00000000004188eb: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x000000000040db48: sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040e3af: sub eax, 0x20; cdqe; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x92f81]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2a4: sub eax, 0x20; cdqe; movzx edx, byte ptr [rcx + rax]; lea rax, [rip + 0x9308c]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e2fc: sub eax, 0x20; cdqe; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x93034]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e452: sub eax, 0x20; cdqe; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92ede]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000040e354: sub eax, 0x20; cdqe; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x92fdc]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000438127: sub eax, 0x2a2870f; add byte ptr [rax], al; lea rdx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000045021b: sub eax, 0x30; cmp eax, 9; jbe 0x50203; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000045572b: sub eax, 0x30; cmp eax, 9; jbe 0x55713; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x0000000000469732: sub eax, 0x38c48348; ret; 
0x000000000041e75f: sub eax, 0x48000017; cmovne eax, edx; ret; 
0x000000000041e65f: sub eax, 0x48000018; cmovne eax, edx; ret; 
0x000000000041e78f: sub eax, 0x48000037; lea edx, [rip + 0x36b6]; cmove rax, rdx; ret; 
0x000000000041e68f: sub eax, 0x48000038; lea edx, [rip + 0x37b6]; cmove rax, rdx; ret; 
0x0000000000469900: sub eax, 0x58c48348; ret; 
0x0000000000450f71: sub eax, 0x83000000; ret; 
0x000000000040ba2f: sub eax, 0x89fffffa; ret; 
0x000000000041e8e7: sub eax, 0x8d480000; add eax, 0x2d0f; cmovne rax, rdx; ret; 
0x0000000000403d71: sub eax, 0xbf000000; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x75742]; syscall; 
0x0000000000410632: sub eax, 0xc019d8f7; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045b152: sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b552: sub eax, 0xffff; jne 0x5b250; ret; 
0x0000000000401839: sub eax, 1; je 0x18aa; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000447f1c: sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000041663b: sub eax, 1; ret; 
0x000000000043d2ff: sub eax, 4; cmp rax, 0x16; ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000469696: sub eax, dword ptr [0]; ret; 
0x000000000046b110: sub eax, dword ptr [0x28]; jne 0x6b15e; leave; ret; 
0x000000000040418f: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040b5fc: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x0000000000436038: sub eax, dword ptr [rcx + r8*4]; je 0x36020; ret; 
0x0000000000436039: sub eax, dword ptr [rcx + rax*4]; je 0x36020; ret; 
0x0000000000417b00: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000416e23: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000046b5fc: sub eax, eax; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000042649f: sub eax, eax; ret; 
0x0000000000425e14: sub eax, eax; vzeroupper; ret; 
0x0000000000424514: sub eax, ebp; sti; xchg ebx, eax; ret; 
0x00000000004355c5: sub eax, ecx; cmp rsi, rax; ja 0x353c7; mov eax, esi; ret; 
0x0000000000437a48: sub eax, ecx; cmp rsi, rax; ja 0x37807; mov eax, esi; ret; 
0x000000000045b0d6: sub eax, ecx; jne 0x5b0f0; ret; 
0x000000000045b4d6: sub eax, ecx; jne 0x5b4f0; ret; 
0x000000000045b94f: sub eax, ecx; jne 0x5b954; ret; 
0x000000000045ba22: sub eax, ecx; jne 0x5ba27; ret; 
0x000000000046b53d: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000426f95: sub eax, ecx; ret; 
0x00000000004576d9: sub eax, ecx; sar rax, 2; sub eax, 1; ret; 
0x000000000045b8f7: sub eax, ecx; sbb eax, eax; or eax, 1; ret; 
0x000000000046b4a0: sub eax, ecx; shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000416639: sub eax, ecx; sub eax, 1; ret; 
0x0000000000425b55: sub eax, ecx; vzeroupper; ret; 
0x0000000000427281: sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000425e0e: sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000426565: sub eax, ecx; xtest; jne 0x26570; vzeroupper; ret; 
0x000000000042c8fc: sub eax, ecx; xtest; jne 0x2c907; vzeroupper; ret; 
0x0000000000431897: sub eax, ecx; xtest; jne 0x318a2; vzeroupper; ret; 
0x000000000045b25c: sub eax, ecx; xtest; jne 0x5b267; vzeroupper; ret; 
0x0000000000430b9c: sub eax, edi; ret; 
0x0000000000437c3e: sub eax, edi; shr rax, 2; ret; 
0x00000000004141d1: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000416e4b: sub eax, edx; ret; 
0x00000000004105f8: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000415d20: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd2: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000416552: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc2: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004575e7: sub eax, edx; sub rcx, rdx; cmp rcx, rax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004690b0: sub eax, esi; ret; 
0x000000000046b5fb: sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000042649e: sub eax, r8d; ret; 
0x0000000000425e13: sub eax, r8d; vzeroupper; ret; 
0x00000000004255f5: sub ebp, dword ptr [rbp + 5]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045a966: sub ebp, eax; sti; xchg ebx, eax; ret 0xc085; 
0x0000000000412e20: sub ebx, 0; add byte ptr [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, r12; call qword ptr [rbp + 0x78]; 
0x000000000043b80c: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000044fe37: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000433d55: sub ebx, edx; jbe 0x33d64; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000434d35: sub ebx, edx; jbe 0x34d44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000456eda: sub ecx, 0; add byte ptr [rax], al; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x0000000000434de4: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000434dd4: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000434dc4: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000434db4: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000472f3b: sub ecx, 1; mov rax, rcx; ret; 
0x000000000046fed2: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x000000000043c9f2: sub ecx, dword ptr [rax - 0x75]; push rax; or byte ptr [rcx + 0x40893], cl; add dh, dh; ret 0x7402; 
0x0000000000418855: sub ecx, ecx; or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x8c8e4], rax; ret; 
0x000000000041fa88: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004219ca: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421173: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004105fb: sub ecx, edx; cmp rcx, rax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041586f: sub ecx, edx; cmp rcx, rax; jae 0x158d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000415d23: sub ecx, edx; cmp rcx, rax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd5: sub ecx, edx; cmp rcx, rax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000416555: sub ecx, edx; cmp rcx, rax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004165ec: sub ecx, edx; cmp rcx, rax; jae 0x16608; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc5: sub ecx, edx; cmp rcx, rax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000456ed4: sub ecx, edx; cmp rcx, rax; jae 0x56fc8; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x00000000004575ea: sub ecx, edx; cmp rcx, rax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000457684: sub ecx, edx; cmp rcx, rax; jae 0x576a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000043500b: sub ecx, edx; cmp rcx, rsi; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x000000000046ba35: sub ecx, edx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000421968: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042111b: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045a135: sub edi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a0f1: sub edi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004371f9: sub edi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042403d: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042b0ed: sub edi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x0000000000437285: sub edi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424065: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000437265: sub edi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424055: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000041d7d1: sub edi, dword ptr [rdi + rdi*8 + 0x48d6ebff]; mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000043724e: sub edi, edx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f03: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043735c: sub edi, edx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fdc: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004372f8: sub edi, edx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f88: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045cae4: sub edi, edx; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c24: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000045cb04: sub edi, edx; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c34: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000045cb24: sub edi, edx; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c44: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000004372a9: sub edi, edx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f39: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000045cac4: sub edi, edx; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c14: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000430f14: sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f24: sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f34: sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f44: sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000435505: sub edi, edx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354d3: sub edi, edx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043558c: sub edi, edx; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000435551: sub edi, edx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045cec4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000437921: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0c: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b1: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437962: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000045db53: sub edx, -0x20; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045de23: sub edx, -0x20; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045a683: sub edx, -0x80; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a943: sub edx, -0x80; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004557a1: sub edx, 0x20; cmp r10d, 0x29; ja 0x557b8; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x000000000043158c: sub edx, 0x80; ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x0000000000432261: sub edx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x000000000040d941: sub edx, 0xe; add byte ptr [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000041de6f: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000438510: sub edx, dword ptr [0x28]; jne 0x38529; add rsp, 0x28; ret; 
0x0000000000439050: sub edx, dword ptr [0x28]; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390df: sub edx, dword ptr [0x28]; jne 0x3912b; add rsp, 0x18; ret; 
0x0000000000439180: sub edx, dword ptr [0x28]; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a6: sub edx, dword ptr [0x28]; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a395: sub edx, dword ptr [0x28]; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a62a: sub edx, dword ptr [0x28]; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000044ae44: sub edx, dword ptr [0x28]; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af0d: sub edx, dword ptr [0x28]; jne 0x4af1e; add rsp, 0xd8; ret; 
0x0000000000450199: sub edx, dword ptr [0x28]; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000458fef: sub edx, dword ptr [0x28]; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e922: sub edx, dword ptr [0x28]; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea75: sub edx, dword ptr [0x28]; jne 0x5eac3; add rsp, 0x58; ret; 
0x000000000046972a: sub edx, dword ptr [0x28]; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004698f8: sub edx, dword ptr [0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a2: sub edx, dword ptr [0x28]; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a22: sub edx, dword ptr [0x28]; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469aee: sub edx, dword ptr [0x28]; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469bde: sub edx, dword ptr [0x28]; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046bcfc: sub edx, dword ptr [0x28]; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706dc: sub edx, dword ptr [0x28]; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707ae: sub edx, dword ptr [0x28]; jne 0x707bc; add rsp, 0x38; ret; 
0x000000000047081e: sub edx, dword ptr [0x28]; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470904: sub edx, dword ptr [0x28]; jne 0x70912; add rsp, 0x38; ret; 
0x0000000000470969: sub edx, dword ptr [0x28]; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b52: sub edx, dword ptr [0x28]; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5dd: sub edx, dword ptr [0x28]; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6ac: sub edx, dword ptr [0x28]; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb3d: sub edx, dword ptr [0x28]; jne 0xfb4e; add rsp, 0xd8; ret; 
0x0000000000416e50: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000416e45: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000045777e: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000457794: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004141cc: sub edx, dword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000469761: sub edx, dword ptr [rsi]; std; jmp qword ptr [rsi + 0x66]; 
0x000000000045aacd: sub edx, eax; jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad34: sub edx, eax; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad44: sub edx, eax; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad54: sub edx, eax; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad64: sub edx, eax; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043074c: sub edx, ecx; lea r11, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ac: sub edx, ecx; lea r11, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045dfb2: sub edx, esi; jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e249: sub edx, esi; jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e269: sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e289: sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a9: sub edx, esi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000411354: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041393d: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000432258: sub esi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000435584: sub esi, 0x40; cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000430b22: sub esi, edx; cmp ecx, esi; jae 0x30b78; movsxd rax, ecx; ret; 
0x0000000000464c28: sub esp, 0x1008; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000478bf9: sub esp, 8; add rsp, 8; ret; 
0x000000000046b779: sub esp, 8; call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x000000000046b7ba: sub esp, 8; call 0x17cf0; xor eax, eax; add rsp, 8; ret; 
0x0000000000466261: sub esp, 8; call 0x3b720; xor eax, eax; add rsp, 8; ret; 
0x0000000000437ced: sub esp, 8; call rax; 
0x0000000000408791: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x0000000000464d58: sub esp, dword ptr [rdx - 0x7017fffe]; int1; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004557a0: sub r10d, 0x20; cmp r10d, 0x29; ja 0x557b8; movsxd rdx, dword ptr [rcx + r10*4]; add rdx, rcx; jmp rdx; 
0x0000000000433d54: sub r11, rdx; jbe 0x33d64; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000434d34: sub r11, rdx; jbe 0x34d44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004188ea: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x8c8ab], rdx; ret; 
0x0000000000435fd3: sub rax, 1; ret; 
0x000000000043d2fe: sub rax, 4; cmp rax, 0x16; ja 0x3d320; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000469695: sub rax, qword ptr [0]; ret; 
0x000000000046b10f: sub rax, qword ptr [0x28]; jne 0x6b15e; leave; ret; 
0x0000000000417aff: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000469694: sub rax, qword ptr fs:[0]; ret; 
0x000000000046b10e: sub rax, qword ptr fs:[0x28]; jne 0x6b15e; leave; ret; 
0x000000000045b0d5: sub rax, rcx; jne 0x5b0f0; ret; 
0x000000000045b4d5: sub rax, rcx; jne 0x5b4f0; ret; 
0x00000000004576d8: sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x000000000045b8f6: sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000416638: sub rax, rcx; sub eax, 1; ret; 
0x0000000000430b9b: sub rax, rdi; ret; 
0x0000000000437c3d: sub rax, rdi; shr rax, 2; ret; 
0x00000000004141d0: sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000004105f7: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000415d1f: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd1: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000416551: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc1: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004575e6: sub rax, rdx; sub rcx, rdx; cmp rcx, rax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000472f3a: sub rcx, 1; mov rax, rcx; ret; 
0x000000000046fed1: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6fec0; mov eax, 1; ret; 
0x000000000041fa87: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004219c9: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000421172: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004105fa: sub rcx, rdx; cmp rcx, rax; jae 0x10648; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041586e: sub rcx, rdx; cmp rcx, rax; jae 0x158d0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000415d22: sub rcx, rdx; cmp rcx, rax; jae 0x15d90; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415dd4: sub rcx, rdx; cmp rcx, rax; jae 0x15e00; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000416554: sub rcx, rdx; cmp rcx, rax; jae 0x16590; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004165eb: sub rcx, rdx; cmp rcx, rax; jae 0x16608; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000456dc4: sub rcx, rdx; cmp rcx, rax; jae 0x56e08; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000456ed3: sub rcx, rdx; cmp rcx, rax; jae 0x56fc8; mov esi, r15d; mov rdi, r13; call qword ptr [rbx + 0x18]; 
0x00000000004575e9: sub rcx, rdx; cmp rcx, rax; jae 0x57620; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000457683: sub rcx, rdx; cmp rcx, rax; jae 0x576a0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000043500a: sub rcx, rdx; cmp rcx, rsi; jb 0x34e04; mov rax, r8; vzeroupper; ret; 
0x000000000046ba34: sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000421967: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042111a: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045a134: sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a0f0: sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004371f8: sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042403c: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042b0ec: sub rdi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x0000000000437284: sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424064: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000437264: sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424054: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000043724d: sub rdi, rdx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f02: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043735b: sub rdi, rdx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fdb: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004372f7: sub rdi, rdx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f87: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004372a8: sub rdi, rdx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f38: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435504: sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354d2: sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043558b: sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000435550: sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000437920: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0b: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b0: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437961: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000043158b: sub rdx, 0x80; ja 0x3134e; xor eax, eax; vzeroupper; ret; 
0x0000000000432260: sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x000000000041de6e: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000043850f: sub rdx, qword ptr [0x28]; jne 0x38529; add rsp, 0x28; ret; 
0x000000000043904f: sub rdx, qword ptr [0x28]; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390de: sub rdx, qword ptr [0x28]; jne 0x3912b; add rsp, 0x18; ret; 
0x000000000043917f: sub rdx, qword ptr [0x28]; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a5: sub rdx, qword ptr [0x28]; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a394: sub rdx, qword ptr [0x28]; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a629: sub rdx, qword ptr [0x28]; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000044ae43: sub rdx, qword ptr [0x28]; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af0c: sub rdx, qword ptr [0x28]; jne 0x4af1e; add rsp, 0xd8; ret; 
0x0000000000450198: sub rdx, qword ptr [0x28]; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000458fee: sub rdx, qword ptr [0x28]; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e921: sub rdx, qword ptr [0x28]; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea74: sub rdx, qword ptr [0x28]; jne 0x5eac3; add rsp, 0x58; ret; 
0x0000000000469729: sub rdx, qword ptr [0x28]; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004698f7: sub rdx, qword ptr [0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a1: sub rdx, qword ptr [0x28]; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a21: sub rdx, qword ptr [0x28]; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469aed: sub rdx, qword ptr [0x28]; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469bdd: sub rdx, qword ptr [0x28]; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046bcfb: sub rdx, qword ptr [0x28]; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706db: sub rdx, qword ptr [0x28]; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707ad: sub rdx, qword ptr [0x28]; jne 0x707bc; add rsp, 0x38; ret; 
0x000000000047081d: sub rdx, qword ptr [0x28]; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470903: sub rdx, qword ptr [0x28]; jne 0x70912; add rsp, 0x38; ret; 
0x0000000000470968: sub rdx, qword ptr [0x28]; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b51: sub rdx, qword ptr [0x28]; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5dc: sub rdx, qword ptr [0x28]; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6ab: sub rdx, qword ptr [0x28]; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb3c: sub rdx, qword ptr [0x28]; jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000045777d: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000457793: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004141cb: sub rdx, qword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000043850e: sub rdx, qword ptr fs:[0x28]; jne 0x38529; add rsp, 0x28; ret; 
0x000000000043904e: sub rdx, qword ptr fs:[0x28]; jne 0x390a3; add rsp, 0x68; ret; 
0x00000000004390dd: sub rdx, qword ptr fs:[0x28]; jne 0x3912b; add rsp, 0x18; ret; 
0x000000000043917e: sub rdx, qword ptr fs:[0x28]; jne 0x391cb; add rsp, 0x58; ret; 
0x00000000004393a4: sub rdx, qword ptr fs:[0x28]; jne 0x393b4; add rsp, 0x28; ret; 
0x000000000043a393: sub rdx, qword ptr fs:[0x28]; jne 0x3a3bd; add rsp, 0x1018; ret; 
0x000000000043a628: sub rdx, qword ptr fs:[0x28]; jne 0x3a67d; add rsp, 0x58; ret; 
0x000000000044ae42: sub rdx, qword ptr fs:[0x28]; jne 0x4ae5d; add rsp, 0x38; ret; 
0x000000000044af0b: sub rdx, qword ptr fs:[0x28]; jne 0x4af1e; add rsp, 0xd8; ret; 
0x0000000000450197: sub rdx, qword ptr fs:[0x28]; jne 0x501aa; add rsp, 0xd8; ret; 
0x0000000000458fed: sub rdx, qword ptr fs:[0x28]; jne 0x59067; add rsp, 0x98; ret; 
0x000000000045e920: sub rdx, qword ptr fs:[0x28]; jne 0x5e9e3; add rsp, 0x78; ret; 
0x000000000045ea73: sub rdx, qword ptr fs:[0x28]; jne 0x5eac3; add rsp, 0x58; ret; 
0x0000000000469728: sub rdx, qword ptr fs:[0x28]; jne 0x69760; add rsp, 0x38; ret; 
0x00000000004698f6: sub rdx, qword ptr fs:[0x28]; jne 0x6992e; add rsp, 0x58; ret; 
0x00000000004699a0: sub rdx, qword ptr fs:[0x28]; jne 0x699b4; add rsp, 0x38; ret; 
0x0000000000469a20: sub rdx, qword ptr fs:[0x28]; jne 0x69a34; add rsp, 0x38; ret; 
0x0000000000469aec: sub rdx, qword ptr fs:[0x28]; jne 0x69b87; add rsp, 0x48; ret; 
0x0000000000469bdc: sub rdx, qword ptr fs:[0x28]; jne 0x69c10; add rsp, 0x38; ret; 
0x000000000046bcfa: sub rdx, qword ptr fs:[0x28]; jne 0x6bd40; add rsp, 0x118; ret; 
0x00000000004706da: sub rdx, qword ptr fs:[0x28]; jne 0x706ea; add rsp, 0x38; ret; 
0x00000000004707ac: sub rdx, qword ptr fs:[0x28]; jne 0x707bc; add rsp, 0x38; ret; 
0x000000000047081c: sub rdx, qword ptr fs:[0x28]; jne 0x7082c; add rsp, 0x38; ret; 
0x0000000000470902: sub rdx, qword ptr fs:[0x28]; jne 0x70912; add rsp, 0x38; ret; 
0x0000000000470967: sub rdx, qword ptr fs:[0x28]; jne 0x70977; add rsp, 0x38; ret; 
0x0000000000472b50: sub rdx, qword ptr fs:[0x28]; jne 0x72b65; add rsp, 0x28; ret; 
0x000000000040a5db: sub rdx, qword ptr fs:[0x28]; jne 0xa5ee; add rsp, 0xd8; ret; 
0x000000000040a6aa: sub rdx, qword ptr fs:[0x28]; jne 0xa6bd; add rsp, 0xd8; ret; 
0x000000000040fb3b: sub rdx, qword ptr fs:[0x28]; jne 0xfb4e; add rsp, 0xd8; ret; 
0x000000000045aacc: sub rdx, rax; jbe 0x5ad70; add rax, rdi; add rax, rcx; ret; 
0x000000000045ad33: sub rdx, rax; jbe 0x5ad70; add rax, rdi; ret; 
0x000000000045ad43: sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045ad53: sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045ad63: sub rdx, rax; jbe 0x5ad70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043074b: sub rdx, rcx; lea r11, [rip + 0x4be3b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004256ab: sub rdx, rcx; lea r11, [rip + 0x56c6f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045dfb1: sub rdx, rsi; jbe 0x5e2c0; add rax, rdi; add rax, rcx; ret; 
0x000000000045e248: sub rdx, rsi; jbe 0x5e2c0; add rax, rdi; ret; 
0x000000000045e268: sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045e288: sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045e2a8: sub rdx, rsi; jbe 0x5e2c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000411353: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041393c: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000432257: sub rsi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x3200e; xor eax, eax; ret; 
0x0000000000464c27: sub rsp, 0x1008; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000478bf8: sub rsp, 8; add rsp, 8; ret; 
0x000000000046b778: sub rsp, 8; call 0x17c70; xor eax, eax; add rsp, 8; ret; 
0x000000000046b7b9: sub rsp, 8; call 0x17cf0; xor eax, eax; add rsp, 8; ret; 
0x0000000000466260: sub rsp, 8; call 0x3b720; xor eax, eax; add rsp, 8; ret; 
0x0000000000437cec: sub rsp, 8; call rax; 
0x0000000000408790: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x00000000004011a2: syscall; 
0x0000000000438598: syscall; cmp eax, 0xfffff000; ja 0x385a8; xor eax, eax; ret; 
0x00000000004386fb: syscall; cmp rax, -0x1000; ja 0x38760; ret; 
0x000000000043879e: syscall; cmp rax, -0x1000; ja 0x38800; ret; 
0x0000000000438835: syscall; cmp rax, -0x1000; ja 0x38840; ret; 
0x0000000000438fd5: syscall; cmp rax, -0x1000; ja 0x38fe0; ret; 
0x00000000004391d2: syscall; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000439205: syscall; cmp rax, -0x1000; ja 0x39210; ret; 
0x000000000043923e: syscall; cmp rax, -0x1000; ja 0x39250; ret; 
0x00000000004393d1: syscall; cmp rax, -0x1000; ja 0x39400; ret; 
0x000000000044a72e: syscall; cmp rax, -0x1000; ja 0x4a790; ret; 
0x0000000000458f48: syscall; cmp rax, -0x1000; ja 0x58f58; ret; 
0x000000000045e5a1: syscall; cmp rax, -0x1000; ja 0x5e5b0; ret; 
0x000000000045ead8: syscall; cmp rax, -0x1000; ja 0x5eae8; ret; 
0x0000000000470c35: syscall; cmp rax, -0x1000; ja 0x70c40; ret; 
0x00000000004384b5: syscall; cmp rax, -0xfff; jae 0x384c0; ret; 
0x0000000000439425: syscall; cmp rax, -0xfff; jae 0x39430; ret; 
0x0000000000439455: syscall; cmp rax, -0xfff; jae 0x39460; ret; 
0x0000000000439485: syscall; cmp rax, -0xfff; jae 0x39490; ret; 
0x000000000043a695: syscall; cmp rax, -0xfff; jae 0x3a6a0; ret; 
0x000000000045e785: syscall; cmp rax, -0xfff; jae 0x5e790; ret; 
0x000000000045e7b5: syscall; cmp rax, -0xfff; jae 0x5e7c0; ret; 
0x000000000045e7e5: syscall; cmp rax, -0xfff; jae 0x5e7f0; ret; 
0x000000000045e815: syscall; cmp rax, -0xfff; jae 0x5e820; ret; 
0x000000000045e845: syscall; cmp rax, -0xfff; jae 0x5e850; ret; 
0x0000000000417ce2: syscall; ret; 
0x0000000000437d05: syscall; test eax, eax; jne 0x37d28; xor eax, eax; ret; 
0x000000000042ba3d: test ah, 0x20; jne 0x2bb20; test ah, 0x40; jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x000000000042ba46: test ah, 0x40; jne 0x2bb30; lea rax, [rdi + 0xf]; ret; 
0x000000000042b95e: test ah, 0x40; jne 0x2bb30; test dh, 0x40; jne 0x2b8a0; lea rax, [rdi + 0xf]; ret; 
0x000000000040bc56: test ah, ah; or al, 0; add byte ptr [rbx - 0x4217d783], cl; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040bd15: test ah, al; or dword ptr [rax], eax; add bh, al; test eax, edi; idiv bh; call qword ptr [rax]; 
0x0000000000416463: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041357f: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000004755c7: test al, 0; add byte ptr [rax], al; ret; 
0x000000000042b9ec: test al, 0x20; jne 0x2bab0; test al, 0x40; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b9f4: test al, 0x40; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000042b8dc: test al, 0x40; jne 0x2bac0; test dl, 0x40; jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x000000000041ea94: test al, 0x57; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000457032: test al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000468367: test al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x0000000000418363: test al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000043c73e: test al, 1; add byte ptr [rax], al; ret; 
0x0000000000458f72: test al, 2; je 0x58f80; xor eax, eax; ret; 
0x000000000042ea5a: test al, al; jne 0x2ea40; xor eax, eax; sub eax, ecx; ret; 
0x000000000040f83a: test ax, ax; je 0xf850; lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x000000000047626c: test bh, bh; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e0c: test bh, bh; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x0000000000467def: test bh, bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 5; ret 0x154; 
0x000000000041b524: test bl, ah; add al, 0; add dh, dh; ret 0xf0f; 
0x0000000000436b19: test bl, bl; jne 0x36b86; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004647d5: test bl, bl; pop rbx; cmove rsi, rax; mov rax, rsi; ret; 
0x0000000000466244: test byte ptr [rax + 0x334], 8; jne 0x66260; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x00000000004069a5: test byte ptr [rax + 0xf320978], 0x85; ret; 
0x000000000041443f: test byte ptr [rax + 0xf], 0x44; ret 0xc8e9; 
0x000000000046f737: test byte ptr [rax + rax + 0x438b0000], dl; adc byte ptr [rbp + 0x9840fc0], al; add al, 0; add byte ptr [rax + 1], cl; ret; 
0x00000000004017e5: test byte ptr [rax + rax - 0x173f0000], bh; add eax, 0x8307e083; clc; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ret; 
0x000000000044228f: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044532b: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004423ff: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045c727: test byte ptr [rax + rax], 8; lea rax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x00000000004032ea: test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043c2ed: test byte ptr [rax + rbx], ah; add al, 0; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 5; and dword ptr [rip - 0x76b7fffb], esi; ret 0xff85; 
0x000000000043a369: test byte ptr [rax + rcx], ah; adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000000442e95: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000443330: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045c7e9: test byte ptr [rax - 0x73], 0x15; adc al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1188; cmovne rax, rdx; ret; 
0x00000000004597a9: test byte ptr [rax - 0x73], 0x15; iretd; sldt word ptr [rax]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x000000000043c082: test byte ptr [rax - 0x73], 0x3d; xchg ecx, eax; adc dword ptr [rax + rax], eax; mov eax, 0x15; syscall; 
0x0000000000467df6: test byte ptr [rax - 0x73], 5; ret 0x154; 
0x000000000042d336: test byte ptr [rax - 0x73], cl; je 0x2d351; test cl, ch; ret; 
0x000000000046ece9: test byte ptr [rax - 0x75], 0x3c; ret 0xb60f; 
0x000000000046ba2c: test byte ptr [rax - 0x75], 5; and al, 0xa1; add eax, dword ptr [rax]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000040d94b: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x38]; 
0x0000000000413eb3: test byte ptr [rax - 0x77], -0x21; call qword ptr [rbp + 0x40]; 
0x0000000000458268: test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000044fa50: test byte ptr [rax - 0x7c000017], ch; ret; 
0x00000000004370d5: test byte ptr [rax - 0x81], cl; shr eax, 2; vzeroupper; ret; 
0x000000000040ddcb: test byte ptr [rax], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x44c6; 
0x000000000042472a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bf9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000047551a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042baea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042bafa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042bb0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042bb1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042bb2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042ba7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042ba8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042ba9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042baaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042baba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042baca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042bada: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042573a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004307da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x0000000000437d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x0000000000437d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x000000000045e77a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8f; syscall; 
0x0000000000417f4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x0000000000411c0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000415d9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000470bea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000045eaca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000044a33a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004170ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046967a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000457e1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x4e697], eax; ret; 
0x000000000041886a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x9339b], eax; ret; 
0x000000000041891a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c896], rax; ret; 
0x000000000041889a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x8c8b6], rax; ret; 
0x000000000045c6ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f859]; ret; 
0x000000000045c6da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f861]; ret; 
0x000000000045c6ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f869]; ret; 
0x000000000045c6ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f871]; ret; 
0x000000000045c6aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f879]; ret; 
0x000000000045c69a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f881]; ret; 
0x000000000045c68a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f889]; ret; 
0x000000000045c67a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f891]; ret; 
0x000000000045c66a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f899]; ret; 
0x000000000045c65a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a1]; ret; 
0x000000000045c64a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x4f8a9]; ret; 
0x000000000044771a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x648f9]; ret; 
0x000000000043e43a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6db99]; ret; 
0x000000000043e42a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x6dba1]; ret; 
0x000000000041715a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000439475: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000045e7a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000045e7d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000045e805: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x000000000045e835: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x0000000000439445: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000043a686: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x63; syscall; 
0x0000000000439266: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xc; syscall; 
0x000000000044a506: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000417126: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x8da09]; ret; 
0x0000000000401556: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000435ff7: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004756e9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042ba69: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042ba59: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000004384a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x18; syscall; 
0x0000000000439418: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x0000000000417108: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000004391f8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 1; syscall; 
0x0000000000417148: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000043adc8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000045e2b8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000042b899: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x000000000041711a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041557a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x000000000045da1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045dc2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000412d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000464776: test byte ptr [rbp + 0x31000000], al; test byte ptr [rcx - 0x7d], 0xc2; xor byte ptr [rbp + 0x63], cl; ret; 
0x000000000041863d: test byte ptr [rbp + 0x31], 0xd2; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418612: test byte ptr [rbp + 0x31], 0xd2; mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000437b1e: test byte ptr [rbp + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000044a46e: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000430b91: test byte ptr [rbp - 0x76258b2e], 0xc9; add rax, rcx; sub rax, rdi; ret; 
0x00000000004388cd: test byte ptr [rbx + rax - 0x74b80000], bl; jl 0x388fa; and byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000476e3a: test byte ptr [rbx - 0x76fffffc], dh; ret 0xe283; 
0x00000000004031c0: test byte ptr [rbx - 0x9fffffb], bh; ret 0xf20; 
0x000000000044c6c7: test byte ptr [rbx - 0x9fffffe], bh; ret 0xf40; 
0x000000000042bd14: test byte ptr [rbx - 0xc000002], bh; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000004164e6: test byte ptr [rbx], 0x80; jne 0x16500; pop rbx; ret; 
0x0000000000455841: test byte ptr [rbx], al; add byte ptr [rax + 0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x00000000004091e0: test byte ptr [rbx], bl; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x11e9; 
0x0000000000435a94: test byte ptr [rcx + 0x38fffffe], bh; or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x0000000000418261: test byte ptr [rcx + 0xcab8], 0; syscall; 
0x000000000046393e: test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x0000000000448c34: test byte ptr [rcx + rcx*4 - 0x11], -0x18; ret; 
0x0000000000458ea8: test byte ptr [rcx + rcx*4 - 0x19], -0x18; jmp qword ptr [rdi]; 
0x0000000000467244: test byte ptr [rcx + rcx*4 - 0x19], -0x18; ret; 
0x0000000000417cf2: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000417cf2: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000439e4c: test byte ptr [rcx - 0x77], cl; ret 0x8348; 
0x000000000046477c: test byte ptr [rcx - 0x7d], 0xc2; xor byte ptr [rbp + 0x63], cl; ret; 
0x0000000000437092: test byte ptr [rcx - 0xd000000], cl; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000042edc6: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046f742: test byte ptr [rcx], cl; add al, 0; add byte ptr [rax + 1], cl; ret; 
0x0000000000458c7a: test byte ptr [rdi + 0x31d23145], 0xd2; mov eax, 0xca; syscall; 
0x000000000045da56: test byte ptr [rdi + 0x80], al; ret; 
0x000000000045de76: test byte ptr [rdi + 0xa0], al; ret; 
0x000000000045de86: test byte ptr [rdi + 0xc0], al; ret; 
0x000000000045de5c: test byte ptr [rdi + 0xe0], al; ret; 
0x0000000000435990: test byte ptr [rdi - 0x7f000002], bh; cmp al, byte ptr [rax]; jne 0x35988; xor eax, eax; ret; 
0x000000000044c6c5: test byte ptr [rdi], -0x7c; mov ebx, 0xf6000002; ret 0xf40; 
0x0000000000451117: test byte ptr [rdi], -0x7c; ret 0; 
0x0000000000415580: test byte ptr [rdi], 0x80; jne 0x15590; ret; 
0x0000000000457007: test byte ptr [rdi], 2; jne 0x57070; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000046cada: test byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040cd29: test byte ptr [rdx - 0x7c000008], bh; ret; 
0x000000000044a296: test byte ptr [rdx], -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046c49a: test byte ptr [rip + 0x3fb03], 0x40; jne 0x6cb50; ret; 
0x000000000046ba80: test byte ptr [rip + 0x40327], 0x10; lea rdx, [rip + 0x132]; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x000000000045c724: test byte ptr [rip + 0x4f683], 8; lea rax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x0000000000436734: test byte ptr [rip + 0x75673], 8; lea rax, [rip + 0x132e]; lea rdx, [rip + 0x1557]; cmove rax, rdx; ret; 
0x000000000041ed60: test byte ptr [rip + 0x8d047], 0x10; lea rdx, [rip + 0x172e2]; lea rax, [rip + 0x11d3b]; cmove rax, rdx; ret; 
0x000000000041ee54: test byte ptr [rip + 0x8d05a], 1; lea rdx, [rip + 0x14f1e]; cmove rax, rdx; ret; 
0x000000000041eb34: test byte ptr [rip + 0x8d37a], 1; lea rdx, [rip + 0xabbe]; cmove rax, rdx; ret; 
0x000000000043567d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000042ea2a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b5eb: test byte ptr [rsi + rdi*8 - 0x43f00001], al; ror byte ptr [rax + 1], 0xd0; cmp sil, byte ptr [rax]; je 0x2b5fd; xor eax, eax; ret; 
0x000000000042c13b: test byte ptr [rsi + rdi*8 - 0x43f00001], dl; ror byte ptr [rax + 1], 0xd0; ret; 
0x0000000000435ac7: test byte ptr [rsi - 0x45000002], al; add byte ptr [rax], al; add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000472c97: test byte ptr [rsi - 0x48000000], dh; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000045d9ad: test byte ptr [rsi - 0xd000000], ch; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045a4ed: test byte ptr [rsi - 0xd000000], cl; bsf eax, eax; add rax, rdi; ret; 
0x0000000000452c75: test byte ptr [rsi], al; idiv edi; inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000004310dd: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000459a5c: test byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000401922: test ch, 0xf0; je 0x1901; movzx eax, cl; pop rbx; ret; 
0x000000000041ebdc: test ch, 4; jne 0x1ebaa; ret; 
0x000000000042d33b: test cl, ch; ret; 
0x0000000000435c5f: test cl, cl; jne 0x35c50; ret; 
0x0000000000435d0f: test cl, cl; jne 0x35d00; ret; 
0x0000000000435fcf: test cl, cl; jne 0x35fc0; sub rax, 1; ret; 
0x000000000042b967: test dh, 0x40; jne 0x2b8a0; lea rax, [rdi + 0xf]; ret; 
0x000000000040199e: test dh, 0xf0; je 0x1901; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000040198e: test dh, 0xf0; je 0x1901; movzx eax, dl; pop rbx; ret; 
0x000000000041ecd4: test dh, 4; jne 0x1ec8a; ret; 
0x000000000042b9ad: test dh, 4; jne 0x2b8a0; lea rax, [rdi + 0xb]; ret; 
0x0000000000473438: test dh, dh; jns 0x733f2; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000440465: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000047626b: test dil, dil; js 0x76290; mov qword ptr [r8], rdx; ret; 
0x0000000000477e0b: test dil, dil; js 0x77e30; mov qword ptr [r8], rdx; ret; 
0x000000000042b8e4: test dl, 0x40; jne 0x2b8a0; lea rax, [rdi + 7]; ret; 
0x000000000042b912: test dl, 4; jne 0x2b8a0; lea rax, [rdi + 3]; ret; 
0x00000000004429ba: test dl, ch; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000045d1d7: test dl, dl; je 0x5d1e1; and edx, 0xf; je 0x5d1f0; ret; 
0x0000000000435e7f: test dl, dl; jne 0x35e70; lea rax, [rcx - 1]; ret; 
0x0000000000469028: test dl, dl; jne 0x68ffa; movsx eax, byte ptr [rcx]; neg eax; ret; 
0x000000000040872b: test dl, dl; jne 0x8708; ret; 
0x0000000000445df4: test dword ptr [rax + 0x39], 0x52840fda; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000042b9ef: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x2bac0; lea rax, [rdi + 7]; ret; 
0x000000000046b94f: test dword ptr [rax + rax - 0x76b80000], ecx; ret 0x8348; 
0x00000000004502b3: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000043d352: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x00000000004592e4: test dword ptr [rax], ecx; add byte ptr [rax], al; add al, ch; add al, byte ptr [rbp - 4]; dec dword ptr [rax - 0x77]; ret; 
0x00000000004511a0: test dword ptr [rax], esp; idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x000000000043d351: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000041cb8c: test dword ptr [rbp + 0x48000001], edx; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045acb8: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x000000000042b9a8: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x2b8a0; lea rax, [rdi + 0xb]; ret; 
0x000000000040283c: test dword ptr [rbx - 0x8000003], edi; ret 0; 
0x000000000045589b: test dword ptr [rbx], eax; add byte ptr [rax + 0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx; 
0x000000000040ae00: test dword ptr [rbx], edi; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004754b3: test dword ptr [rbx], edx; sar al, 0xff; mov rax, qword ptr [rax]; ret; 
0x0000000000455e7c: test dword ptr [rcx + 0x48000000], ebx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000454769: test dword ptr [rcx + 0xf], 0x8941d749; shr ecx, cl; push rax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041839b: test dword ptr [rcx + rcx*4 - 0x32], eax; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000040c6d4: test dword ptr [rcx - 0x16000014], edx; retf 0xfff4; inc edi; test eax, edi; idiv bh; call qword ptr [rax]; 
0x00000000004180d9: test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000043d4c6: test dword ptr [rcx - 0x80], 0x440f2dfd; ret 0x9066; 
0x000000000043d5fc: test dword ptr [rcx - 0x80], 0x440f2dfd; ret 0xc7e9; 
0x000000000044c6d0: test dword ptr [rcx], ebp; or al, 0; add dh, dh; ret 0xf10; 
0x000000000044cdaf: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000452b8a: test dword ptr [rdi + rsi*8 - 1], ecx; dec dword ptr [rax + 1]; ret; 
0x00000000004526b1: test dword ptr [rdi + rsi*8 - 1], ecx; inc dword ptr [rbp + 0x2a880fc0]; idiv bh; inc dword ptr [rcx]; ret; 
0x000000000042f7ea: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000458c31: test dword ptr [rdi], 0xfffd0984; call qword ptr [rax + 0x48]; 
0x000000000041812d: test dword ptr [rdi], 0xffff2484; dec dword ptr [rax - 0x73]; cmp eax, 0x62d95; call 0x12c40; mov eax, 0x23; ret; 
0x0000000000411b51: test dword ptr [rdx + 0x48000000], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043862c: test dword ptr [rdx + 0x48000000], esi; add esp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004783cf: test dword ptr [rdx], 0xdb854800; jne 0x783b8; pop rbx; ret; 
0x000000000042b90d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x2b8a0; lea rax, [rdi + 3]; ret; 
0x0000000000476cc3: test dword ptr [rsi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000043adf3: test eax, 0x480006ad; shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x3ae10; ret; 
0x0000000000424285: test eax, 0x5974c085; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000042bd0f: test eax, 0x840fc085; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000040ba77: test eax, 0x89480002; ret; 
0x000000000044cdaa: test eax, 0xc7fffff6; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000435fe8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x00000000004612fc: test eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000043a403: test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x000000000043a57b: test eax, eax; cmove eax, edx; ret; 
0x000000000040100c: test eax, eax; je 0x1012; call rax; 
0x000000000040100c: test eax, eax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000401583: test eax, eax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015c5: test eax, eax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x00000000004163a0: test eax, eax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000419876: test eax, eax; je 0x19840; add rsp, 0x18; ret; 
0x0000000000423f63: test eax, eax; je 0x23fb0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000424085: test eax, eax; je 0x23fb4; bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000042425f: test eax, eax; je 0x242e0; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000424287: test eax, eax; je 0x242e4; tzcnt eax, eax; add rax, rcx; ret; 
0x00000000004243df: test eax, eax; je 0x24460; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000424407: test eax, eax; je 0x24464; tzcnt eax, eax; add rax, rcx; ret; 
0x00000000004245a6: test eax, eax; je 0x245c0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb73: test eax, eax; je 0x2bbd0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042bd11: test eax, eax; je 0x2bbd4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000042bf74: test eax, eax; je 0x2bfd0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042c138: test eax, eax; je 0x2bfd4; bsf eax, eax; add rax, rdx; ret; 
0x000000000042c18f: test eax, eax; je 0x2c1a0; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042f7d3: test eax, eax; je 0x2f7d8; xchg edx, eax; sub eax, edx; ret; 
0x0000000000430c01: test eax, eax; je 0x30c60; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430d42: test eax, eax; je 0x30c64; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430f03: test eax, eax; je 0x30f60; tzcnt eax, eax; ret; 
0x0000000000431047: test eax, eax; je 0x30f67; tzcnt eax, eax; ret; 
0x0000000000434d18: test eax, eax; je 0x34d1d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000434d8f: test eax, eax; je 0x34e00; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000435351: test eax, eax; je 0x353c0; tzcnt eax, eax; ret; 
0x0000000000437791: test eax, eax; je 0x37800; tzcnt eax, eax; ret; 
0x0000000000437ce8: test eax, eax; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000439348: test eax, eax; je 0x3934d; ret; 
0x000000000043a3e0: test eax, eax; je 0x3a3f0; add rsp, 8; ret; 
0x000000000043a420: test eax, eax; je 0x3a430; add rsp, 8; ret; 
0x00000000004488fc: test eax, eax; je 0x48902; call rax; 
0x0000000000458f03: test eax, eax; je 0x58f20; push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000459f8e: test eax, eax; je 0x59ff0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045a4ea: test eax, eax; je 0x5a580; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045a7aa: test eax, eax; je 0x5a840; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000045bbb9: test eax, eax; je 0x5bbc3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x000000000045c161: test eax, eax; je 0x5c0f4; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c0ff: test eax, eax; je 0x5c109; bsr eax, eax; add rax, rsi; ret; 
0x000000000045c24e: test eax, eax; je 0x5c110; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x000000000045c3e8: test eax, eax; je 0x5c3d2; bsr eax, eax; add rax, r8; ret; 
0x000000000045c428: test eax, eax; je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045cc52: test eax, eax; je 0x5cb44; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000045cea3: test eax, eax; je 0x5cf00; tzcnt eax, eax; ret; 
0x000000000045cfef: test eax, eax; je 0x5cf07; tzcnt eax, eax; ret; 
0x000000000045d40e: test eax, eax; je 0x5d480; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045da09: test eax, eax; je 0x5da60; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045dcc9: test eax, eax; je 0x5dd20; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000464509: test eax, eax; je 0x64500; xor eax, eax; ret; 
0x000000000046cf99: test eax, eax; je 0x6cfa7; mov rax, 0xffffffffffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000046dc2a: test eax, eax; je 0x6dc37; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6dc20; ret; 
0x0000000000475595: test eax, eax; je 0x7559e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000475f7c: test eax, eax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000047865c: test eax, eax; je 0x78662; call rax; 
0x000000000040f83b: test eax, eax; je 0xf850; lea rdx, [rip + 0x6ae1a]; add rax, rdx; ret; 
0x0000000000447f18: test eax, eax; jle 0x47f24; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000041633c: test eax, eax; jne 0x16330; ret; 
0x0000000000416e04: test eax, eax; jne 0x16df8; ret; 
0x0000000000418aa6: test eax, eax; jne 0x18ab0; ret; 
0x00000000004246f1: test eax, eax; jne 0x24740; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b890: test eax, eax; jne 0x2b8a4; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000437cf2: test eax, eax; jne 0x37d10; xor eax, eax; add rsp, 8; ret; 
0x0000000000437d07: test eax, eax; jne 0x37d28; xor eax, eax; ret; 
0x000000000043c49a: test eax, eax; jne 0x3c510; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044a6f9: test eax, eax; jne 0x4a708; add rsp, 8; ret; 
0x00000000004588c7: test eax, eax; jne 0x58bb0; mov eax, 1; ret; 
0x000000000045ac43: test eax, eax; jne 0x5ad20; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045ace5: test eax, eax; jne 0x5ad40; xor eax, eax; ret; 
0x000000000045acb5: test eax, eax; jne 0x5ad60; xor eax, eax; ret; 
0x000000000045b5a5: test eax, eax; jne 0x5b5b0; ret; 
0x000000000045b804: test eax, eax; jne 0x5b80d; ret; 
0x000000000045b855: test eax, eax; jne 0x5b86c; ret; 
0x000000000045e153: test eax, eax; jne 0x5e230; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045e1f5: test eax, eax; jne 0x5e260; xor eax, eax; ret; 
0x000000000045e1c5: test eax, eax; jne 0x5e2a0; xor eax, eax; ret; 
0x0000000000466295: test eax, eax; jne 0x6629b; pop rbx; ret; 
0x000000000046b7a2: test eax, eax; jne 0x6b7b0; xend; xor eax, eax; ret; 
0x0000000000472ee5: test eax, eax; jne 0x73028; mov rax, rcx; add rsp, 0x38; ret; 
0x0000000000477616: test eax, eax; jne 0x77620; ret; 
0x0000000000477946: test eax, eax; jne 0x77950; ret; 
0x0000000000408762: test eax, eax; jne 0x8770; pop rbx; ret; 
0x000000000041280b: test eax, eax; js 0x12810; ret; 
0x00000000004094bd: test eax, eax; js 0x98c0; mov rdi, qword ptr [rsp + 0x18]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000041e95e: test eax, eax; lea rdx, [rip + 0x4ad9]; lea rax, [rip + 0x4a82]; cmovne rax, rdx; ret; 
0x000000000041e9d0: test eax, eax; lea rdx, [rip + 0x4c27]; lea rax, [rip + 0x4bd0]; cmovne rax, rdx; ret; 
0x000000000041e9fc: test eax, eax; lea rdx, [rip + 0x527b]; lea rax, [rip + 0x5214]; cmovne rax, rdx; ret; 
0x00000000004388c5: test eax, eax; mov qword ptr [rsp + 0x20], rax; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x000000000044a46f: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000041810a: test eax, eax; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004517c1: test eax, ebp; idiv bh; inc esi; test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x000000000040bd1b: test eax, edi; idiv bh; call qword ptr [rax]; 
0x000000000040cfcb: test eax, edi; idiv bh; call qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x85c7; 
0x000000000046097a: test eax, edx; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004765e3: test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000045aeca: test ebp, eax; std; xlatb; ret 0xc0ff; 
0x00000000004782be: test ebp, ebp; jne 0x78298; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000473ad1: test ebp, ecx; fprem; dec dword ptr [rbp - 0x75]; or ecx, ebp; ret 0xfffa; 
0x000000000045ac20: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000041c439: test ebx, ebx; jne 0x1c39b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004677c8: test ebx, ebx; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000046dd10: test ebx, ebx; jne 0x6dd00; mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x0000000000478273: test ebx, ebx; jne 0x78260; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004783d3: test ebx, ebx; jne 0x783b8; pop rbx; ret; 
0x00000000004784e3: test ebx, ebx; jne 0x784cd; pop rbx; ret; 
0x00000000004789ac: test ebx, ebx; jne 0x78990; pop rbx; pop rbp; pop r12; ret; 
0x000000000046457a: test ebx, edi; dec dword ptr [rax + 0x39]; ret; 
0x000000000045e1c8: test ebx, edx; add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000041ece7: test ecx, 0x40000000; je 0x1ecc1; ret; 
0x00000000004393c4: test ecx, 0xfff; jne 0x393e0; mov eax, 9; syscall; 
0x000000000042b8d2: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000045b7d6: test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b69f: test ecx, ecx; jne 0x5b6aa; ret; 
0x00000000004588ca: test ecx, esp; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x0000000000465055: test edi, ebp; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000451734: test edi, edi; idiv bh; jmp qword ptr [rax]; 
0x0000000000439f31: test edi, edi; je 0x39f3a; test rsi, rsi; jne 0x39f40; ret; 
0x0000000000439f51: test edi, edi; je 0x39f5a; test rsi, rsi; jne 0x39f60; ret; 
0x0000000000447f00: test edi, edi; je 0x47edd; call 0x69b90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000041eb87: test edx, 0x40000000; je 0x1eb5f; ret; 
0x000000000041ebef: test edx, 0x40000000; je 0x1ebc9; ret; 
0x000000000041ec67: test edx, 0x40000000; je 0x1ec38; ret; 
0x000000000041ee27: test edx, 0x40000000; je 0x1edf8; ret; 
0x000000000041eea7: test edx, 0x40000000; je 0x1ee7f; ret; 
0x000000000041ef17: test edx, 0x40000000; je 0x1eee8; ret; 
0x0000000000436787: test edx, 0x40000000; je 0x3675f; ret; 
0x0000000000459ec7: test edx, 0x40000000; je 0x59e98; ret; 
0x000000000045c777: test edx, 0x40000000; je 0x5c74f; ret; 
0x0000000000417dab: test edx, edx; je 0x17d80; call rdx; 
0x0000000000430b92: test edx, edx; je 0x30b70; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000431092: test edx, edx; je 0x3109a; bsf eax, edx; ret; 
0x000000000043113b: test edx, edx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310da: test edx, edx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004356ea: test edx, edx; je 0x35710; bsf rax, rdx; ret; 
0x000000000043567a: test edx, edx; je 0x35720; bsf rax, rdx; ret; 
0x0000000000437b8a: test edx, edx; je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b1b: test edx, edx; je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000043c227: test edx, edx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000043c26d: test edx, edx; je 0x3c29b; mov rax, rdx; pop rbx; ret; 
0x000000000045d272: test edx, edx; je 0x5d27e; bsf eax, edx; shr rax, 2; ret; 
0x000000000045d31b: test edx, edx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2be: test edx, edx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000414711: test edx, edx; jne 0x14720; xor eax, eax; ret; 
0x00000000004157bf: test edx, edx; jne 0x157b0; ret; 
0x000000000043ab5d: test edx, edx; jne 0x3ab68; ret; 
0x0000000000456a6f: test edx, edx; jne 0x56a60; ret; 
0x000000000045ca6b: test edx, edx; jne 0x5ca60; ret; 
0x0000000000466764: test edx, edx; jne 0x6676a; call rax; 
0x0000000000466f2f: test edx, edx; jne 0x66f43; mov qword ptr [rbp - 0xb8], r10; call rax; 
0x000000000046763c: test edx, edx; jne 0x67642; call rax; 
0x000000000046b465: test edx, edx; jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046b629: test edx, edx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000046dc33: test edx, edx; jne 0x6dc20; ret; 
0x000000000046f2a6: test edx, edx; jne 0x6f2ad; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000041800f: test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x00000000004078f8: test edx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x000000000042b8c5: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000447ed4: test esi, esi; je 0x47ee0; cmp esi, 3; je 0x47ee0; pop rbx; ret; 
0x0000000000448cdb: test esi, esi; je 0x48ce1; call rsi; 
0x0000000000460486: test esi, esi; je 0x60490; mov eax, r8d; ret; 
0x000000000046b6bd: test esi, esi; je 0x6b6d0; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046bb28: test esi, esi; je 0x6bba0; mov eax, eax; ret; 
0x00000000004355e1: test esi, esi; jne 0x355e9; xor rax, rax; ret; 
0x0000000000437a71: test esi, esi; jne 0x37a79; xor rax, rax; ret; 
0x0000000000439f36: test esi, esi; jne 0x39f40; ret; 
0x0000000000439f56: test esi, esi; jne 0x39f60; ret; 
0x000000000044a454: test esi, esi; jne 0x4a460; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000004577d7: test esi, esi; jne 0x57820; lea rax, [r8 + rax*4]; mov qword ptr [rdx], rax; xor eax, eax; ret; 
0x000000000045f718: test esi, esi; jne 0x5f6bc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466e2f: test esi, esi; jne 0x66e35; call rax; 
0x000000000046b509: test esi, esi; jne 0x6b4fe; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x000000000046b4f4: test esi, esi; jne 0x6b520; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000045c7e8: test esi, esi; lea rdx, [rip + 0x144f]; lea rax, [rip + 0x1188]; cmovne rax, rdx; ret; 
0x000000000041ea88: test esi, esi; lea rdx, [rip + 0x592f]; lea rax, [rip + 0x57a8]; cmovne rax, rdx; ret; 
0x00000000004597a8: test esi, esi; lea rdx, [rip + 0xfcf]; lea rax, [rip + 0xd08]; cmovne rax, rdx; ret; 
0x0000000000466a44: test esp, ebp; adc eax, 0x8b480000; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000457c8f: test esp, ebx; add byte ptr [rax], al; add byte ptr [rbx - 0x78f0fe06], al; ret; 
0x000000000042b8df: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000040c74c: test esp, edi; idiv bh; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x00000000004677c7: test r11d, r11d; jne 0x677dc; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000042f7d2: test r8d, r8d; je 0x2f7d8; xchg edx, eax; sub eax, edx; ret; 
0x0000000000434d17: test r8d, r8d; je 0x34d1d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000418109: test r8d, r8d; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004393c3: test r9d, 0xfff; jne 0x393e0; mov eax, 9; syscall; 
0x000000000040100b: test rax, rax; je 0x1012; call rax; 
0x000000000040100b: test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000401582: test rax, rax; je 0x1590; mov edi, 0x4a64d8; jmp rax; 
0x00000000004015c4: test rax, rax; je 0x15d0; mov edi, 0x4a64d8; jmp rax; 
0x000000000041639f: test rax, rax; je 0x163b3; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000419875: test rax, rax; je 0x19840; add rsp, 0x18; ret; 
0x0000000000437ce7: test rax, rax; je 0x37d00; sub rsp, 8; call rax; 
0x0000000000439347: test rax, rax; je 0x3934d; ret; 
0x00000000004488fb: test rax, rax; je 0x48902; call rax; 
0x0000000000464508: test rax, rax; je 0x64500; xor eax, eax; ret; 
0x000000000046dc29: test rax, rax; je 0x6dc37; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6dc20; ret; 
0x0000000000475594: test rax, rax; je 0x7559e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000475f7b: test rax, rax; je 0x75f90; mov edi, 1; jmp rax; 
0x000000000047865b: test rax, rax; je 0x78662; call rax; 
0x000000000041633b: test rax, rax; jne 0x16330; ret; 
0x0000000000416e03: test rax, rax; jne 0x16df8; ret; 
0x00000000004388c4: test rax, rax; mov qword ptr [rsp + 0x20], rax; je 0x38c6e; mov rdi, qword ptr [rsp + 0x20]; mov eax, 0x4f; syscall; 
0x00000000004782bd: test rbp, rbp; jne 0x78298; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c438: test rbx, rbx; jne 0x1c39b; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046dd0f: test rbx, rbx; jne 0x6dd00; mov qword ptr [rip + 0x3e6e9], 0; pop rbx; ret; 
0x0000000000478272: test rbx, rbx; jne 0x78260; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004783d2: test rbx, rbx; jne 0x783b8; pop rbx; ret; 
0x00000000004784e2: test rbx, rbx; jne 0x784cd; pop rbx; ret; 
0x00000000004789ab: test rbx, rbx; jne 0x78990; pop rbx; pop rbp; pop r12; ret; 
0x0000000000439f30: test rdi, rdi; je 0x39f3a; test rsi, rsi; jne 0x39f40; ret; 
0x0000000000439f50: test rdi, rdi; je 0x39f5a; test rsi, rsi; jne 0x39f60; ret; 
0x0000000000447eff: test rdi, rdi; je 0x47edd; call 0x69b90; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000417daa: test rdx, rdx; je 0x17d80; call rdx; 
0x000000000043113a: test rdx, rdx; je 0x31150; bsf rax, rdx; ret; 
0x00000000004310d9: test rdx, rdx; je 0x31160; bsf rax, rdx; ret; 
0x00000000004356e9: test rdx, rdx; je 0x35710; bsf rax, rdx; ret; 
0x0000000000435679: test rdx, rdx; je 0x35720; bsf rax, rdx; ret; 
0x0000000000437b89: test rdx, rdx; je 0x37bb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000437b1a: test rdx, rdx; je 0x37bc0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000043c226: test rdx, rdx; je 0x3c238; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000043c26c: test rdx, rdx; je 0x3c29b; mov rax, rdx; pop rbx; ret; 
0x000000000045d31a: test rdx, rdx; je 0x5d330; bsf rax, rdx; shr rax, 2; ret; 
0x000000000045d2bd: test rdx, rdx; je 0x5d340; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000414710: test rdx, rdx; jne 0x14720; xor eax, eax; ret; 
0x00000000004157be: test rdx, rdx; jne 0x157b0; ret; 
0x0000000000456a6e: test rdx, rdx; jne 0x56a60; ret; 
0x000000000046b464: test rdx, rdx; jne 0x6b490; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046b628: test rdx, rdx; jne 0x6b640; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000046dc32: test rdx, rdx; jne 0x6dc20; ret; 
0x0000000000448cda: test rsi, rsi; je 0x48ce1; call rsi; 
0x0000000000460485: test rsi, rsi; je 0x60490; mov eax, r8d; ret; 
0x00000000004355e0: test rsi, rsi; jne 0x355e9; xor rax, rax; ret; 
0x0000000000437a70: test rsi, rsi; jne 0x37a79; xor rax, rax; ret; 
0x0000000000439f35: test rsi, rsi; jne 0x39f40; ret; 
0x0000000000439f55: test rsi, rsi; jne 0x39f60; ret; 
0x000000000045f717: test rsi, rsi; jne 0x5f6bc; pop rbx; pop rbp; pop r12; ret; 
0x000000000046b508: test rsi, rsi; jne 0x6b4fe; cmp cx, 0x7fff; jne 0x6b4f8; mov eax, 1; ret; 
0x000000000046b4f3: test rsi, rsi; jne 0x6b520; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000473437: test sil, sil; jns 0x733f2; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000440464: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000045b86c: tzcnt eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042428b: tzcnt eax, eax; add rax, rcx; ret; 
0x0000000000424263: tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042bb77: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042bd77: tzcnt eax, eax; add rax, rdi; xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000042bd19: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000423f80: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000423f90: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000423fa0: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045a667: tzcnt eax, eax; cmp edx, eax; jbe 0x5a675; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a92d: tzcnt eax, eax; cmp edx, eax; jbe 0x5a93b; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045db3f: tzcnt eax, eax; cmp edx, eax; jbe 0x5db4d; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045de0a: tzcnt eax, eax; cmp edx, eax; jbe 0x5de18; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004354fc: tzcnt eax, eax; cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354ca: tzcnt eax, eax; cmp esi, eax; jb 0x354db; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435548: tzcnt eax, eax; cmp esi, eax; jb 0x35594; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004355d3: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435020: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000042af77: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b3f8: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2b42c; add rax, rdi; ret; 
0x000000000045a120: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000437110: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000437100: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x00000000004370f0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x00000000004370d0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004377d0: tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x00000000004377c0: tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x00000000004353a0: tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x0000000000435390: tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x0000000000435380: tzcnt eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x0000000000435370: tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x00000000004377e0: tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000043794f: tzcnt eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004242a0: tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045a6c0: tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x00000000004242b0: tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004242c0: tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004242d0: tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045a990: tzcnt eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000045a9a0: tzcnt eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000045a973: tzcnt eax, eax; lea rax, [rdi + rax + 0xe0]; ret; 
0x00000000004243a0: tzcnt eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x0000000000424393: tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000045da20: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000045da30: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000045da40: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000045da50: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000045de70: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000045de80: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000045de56: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x000000000045d9b2: tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000045db90: tzcnt eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000045ae70: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045ae90: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b5b0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000045ae50: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000430f07: tzcnt eax, eax; ret; 
0x00000000004373b0: tzcnt eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000437097: tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000045ce5a: tzcnt eax, eax; shr eax, 2; xtest; jne 0x5ce6a; vzeroupper; ret; 
0x0000000000434de0: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000434dd0: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000434dc0: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000434db0: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000430c20: tzcnt eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000430c30: tzcnt eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000430c40: tzcnt eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000430c10: tzcnt eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000430f10: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f20: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f30: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f40: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000045cec0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000045a130: tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000045a1b0: tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000437280: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424060: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000437260: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424050: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000434fb0: tzcnt eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000434fa0: tzcnt eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435560: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435570: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004379e0: tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004379c0: tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000459fa0: tzcnt eax, eax; vzeroupper; cmp edx, eax; jle 0x59fbd; add rax, rdi; ret; 
0x0000000000430c05: tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430eba: tzcnt eax, eax; xtest; jne 0x30ec7; vzeroupper; ret; 
0x0000000000432193: tzcnt ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32179; xor eax, eax; ret; 
0x000000000042ce60: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042c3a2: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce71: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042c3c0: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce82: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c3d4: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ce50: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042c390: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000045a500: tzcnt esi, eax; add rdi, rsi; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x000000000045d9c0: tzcnt esi, eax; lea rdi, [rdi + rsi*4]; xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x0000000000431002: tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000431021: tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045a6a7: tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x0000000000424385: tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000045a0eb: tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004371f3: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000424037: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000004215f1: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000414e32: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000423564: vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000423560: vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000042072d: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000041f7e2: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000420731: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000041f7e6: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042fb70: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000424ac4: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb74: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000042073a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000423544: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000041f7f0: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000424ace: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb7e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000420736: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000423540: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000041f7ec: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000423805: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000424aca: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb7a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000423809: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000420719: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000042071d: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000041f72b: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000042fb90: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x00000000004206f9: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000424ae4: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb94: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000041fa2b: vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000041fa26: vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000420726: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000042070d: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000420707: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000041f966: vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x00000000004234e4: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000420702: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000041f821: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000041f9d7: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004234e9: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x00000000004236a9: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0x236bc; vzeroupper; ret; 
0x000000000041f9dc: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004234ee: vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x00000000004236ae: vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0x236bc; vzeroupper; ret; 
0x000000000041f9e1: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000424aee: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb9e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000042340c: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000423460: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000041f735: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041ff21: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x1ff30; vzeroupper; ret; 
0x000000000041f826: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000041fc64: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000041f899: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000041fc5e: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000041f82c: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000041f89f: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000041fc58: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000041f8a5: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000041fc52: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000041f8ab: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000042346f: vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x000000000042346a: vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000420722: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004234e0: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x00000000004206fe: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000041f81d: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000042345c: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000041f731: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041ff1d: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x1ff30; vzeroupper; ret; 
0x0000000000423412: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000424aea: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042fb9a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x00000000004237fb: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000041f95d: vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000041f958: vmovdqu ymmword ptr [rdx + 0x40], ymm6; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000041f9e6: vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000041f962: vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x00000000004237ff: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000423b86: vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000423b80: vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000420e85: vmovdqu64 ymm16, ymmword ptr [rsi]; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000045b7f0: vmovdqu64 ymm17, ymmword ptr [rsi + rdx + 0x60]; vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x5b80d; ret; 
0x0000000000420e8b: vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421bc2: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000421719: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x40]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000421975: vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000042196f: vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000423b76: vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000423b70: vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000423d5a: vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000423d61: vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000423d68: vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000042189e: vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000423d54: vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000421727: vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000421929: vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000421930: vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004217a8: vmovdqu64 ymmword ptr [rdi + 0x60], ymm19; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000421937: vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000423c9b: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000423c3d: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000420e99: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000042172e: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000421be2: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x00000000004217af: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000423ca4: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000421bda: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000421736: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x00000000004217b7: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000421bd2: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x00000000004217bf: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000421bca: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x00000000004217c7: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000423c45: vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000421721: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000423c95: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000420e93: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000421891: vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000042188a: vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000421883: vmovdqu64 ymmword ptr [rdx + 0x60], ymm21; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000042193e: vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000421898: vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000420db0: vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000421367: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000420ebb: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x80]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000421122: vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000423b28: vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000423b2f: vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000423b36: vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000423b3d: vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000421054: vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000420ec9: vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000420f58: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm19; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004210f1: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000042136f: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000420f77: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000423a5e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000423a00: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000420dbe: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000420ed0: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000421387: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000420f5f: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000423a67: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000042137f: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000420ed8: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000420f67: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000421377: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000420f6f: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000423a08: vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000420ec3: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000423a58: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000420db8: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000421047: vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x00000000004210f8: vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000042104e: vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000423cd5: vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423aa3: vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000423554: vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000423550: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000423814: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000423818: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000420a35: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a3c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000420a43: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000042068d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208dc: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004206de: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004206a2: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208d5: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004206d7: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000042069b: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004208ce: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000420694: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004206d0: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004237cd: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000420b90: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b97: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420b9e: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000420ba5: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004237e8: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004239aa: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b1: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004239b8: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000042390d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000423914: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042391b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004237ba: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237b3: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004237ac: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000410671: vpackuswb xmm1, xmm2, xmmword ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0xf]; 
0x0000000000430ef8: vpcmpeqb k0, ymm16, ymmword ptr [rdi]; kmovd eax, k0; test eax, eax; je 0x30f60; tzcnt eax, eax; ret; 
0x000000000045b14a: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b54a: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5b250; ret; 
0x000000000045afea: vpcmpeqb ymm1, ymm1, ymmword ptr [rdi + rdx - 0x20]; vpmovmskb eax, ymm1; inc eax; jne 0x5b040; vzeroupper; ret; 
0x000000000045afb6: vpcmpeqb ymm4, ymm4, ymmword ptr [rdx + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x5b004; vzeroupper; ret; 
0x000000000045ce98: vpcmpeqd k0, ymm16, ymmword ptr [rdi]; kmovd eax, k0; test eax, eax; je 0x5cf00; tzcnt eax, eax; ret; 
0x000000000045b59a: vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x5b5b0; ret; 
0x000000000045b7f8: vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x5b80d; ret; 
0x000000000045b14e: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5ae50; ret; 
0x000000000045b54e: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x5b250; ret; 
0x000000000045aff0: vpmovmskb eax, ymm1; inc eax; jne 0x5b040; vzeroupper; ret; 
0x0000000000430bfd: vpmovmskb eax, ymm1; test eax, eax; je 0x30c60; tzcnt eax, eax; vzeroupper; ret; 
0x000000000045afbb: vpmovmskb eax, ymm4; inc eax; jne 0x5b004; vzeroupper; ret; 
0x000000000045b7c5: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b68e: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x5b6aa; ret; 
0x000000000045b7cc: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b695: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x5b6aa; ret; 
0x000000000041ff30: vzeroall; ret; 
0x0000000000459fa4: vzeroupper; cmp edx, eax; jle 0x59fbd; add rax, rdi; ret; 
0x000000000045a25e: vzeroupper; cmp edx, eax; jle 0x5a27b; add rax, rdi; ret; 
0x000000000045d427: vzeroupper; cmp edx, eax; jle 0x5d43f; add rax, rdi; ret; 
0x000000000045d701: vzeroupper; cmp edx, eax; jle 0x5d71b; add rax, rdi; ret; 
0x0000000000435952: vzeroupper; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f73b: vzeroupper; ret; 
0x000000000045aad1: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000042ab21: wait; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000473126: wait; and edi, 0x20; je 0x7313c; movss xmm0, dword ptr [rip + 0x218c4]; divss xmm0, dword ptr [rip + 0x218c0]; ret; 
0x00000000004785b1: wait; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000462701: wait; ret; 
0x000000000042f5df: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434363: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f1cf: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000434453: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434273: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ecdb: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429cc3: xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f4eb: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004299f0: xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3f0: xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000401986: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000434cbb: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000042ef5f: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042f29f: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000434813: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042f5bb: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f68b: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000433fa3: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000045aad0: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000042f43f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004349f3: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434183: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042ec2f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042a280: xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042ac90: xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a9b0: xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x0000000000434bd3: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040ba76: xchg byte ptr [rcx - 0x76b7fffe], ch; ret; 
0x0000000000405f3e: xchg byte ptr [rcx - 0x7cb70001], dh; ret; 
0x000000000042f02f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000042f50f: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000434ae3: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ecff: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042eda1: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434425: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434515: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000415106: xchg byte ptr [rdx], ch; or dword ptr [rax], eax; cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x0000000000434335: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042f0ff: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000429bb5: xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045dfb5: xchg byte ptr [rsi], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000042a5b5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e85: xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042f36f: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434093: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000046e246: xchg cl, ah; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000042a2d5: xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042edc5: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ace5: xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000434245: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434065: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434155: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000433f75: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000456ff2: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x57000; ret; 
0x000000000040383d: xchg dword ptr [rax + 0x48fffff1], edx; lea ecx, [rip + 0x75917]; movsxd rdx, dword ptr [rcx + rdx*4]; add rdx, rcx; jmp rdx; 
0x000000000045ef2b: xchg dword ptr [rax - 0x77000000], esi; ret 0xc083; 
0x000000000044f698: xchg dword ptr [rax - 0x7d000000], esp; ret; 
0x000000000045da27: xchg dword ptr [rax], esp; ret; 
0x000000000045da26: xchg dword ptr [rax], r12d; ret; 
0x0000000000458c7b: xchg dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], cl; sar byte ptr [rax + 0xca], cl; syscall; 
0x000000000040665a: xchg dword ptr [rbp + 0x48ffffaa], esi; lea esi, [rip + 0x7334e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000420dab: xchg dword ptr [rbp + 1], ecx; add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000437a4e: xchg dword ptr [rbp + rdi*8 - 0xf760001], esi; ret; 
0x00000000004674a0: xchg dword ptr [rbx + 0x48fffffd], ebx; lea esi, [rip + 0x27fcc]; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x000000000040dcf0: xchg dword ptr [rbx - 0x76fffff1], edx; ret 0xc083; 
0x0000000000453d08: xchg dword ptr [rbx - 0x76fffff2], eax; ret 0xc083; 
0x0000000000440cad: xchg dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000423e03: xchg dword ptr [rcx + 0xf000000], eax; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000450cc2: xchg dword ptr [rcx + 4], ecx; add byte ptr [rax], al; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000454652: xchg dword ptr [rcx - 0x76fffffc], ebx; ret 0xc083; 
0x000000000040eca4: xchg dword ptr [rdi - 0x76fffffc], edx; ret 0xc083; 
0x000000000046508c: xchg dword ptr [rdi - 0x77000000], esp; ret 0xc083; 
0x000000000044af4a: xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x4af58; ret; 
0x0000000000438129: xchg dword ptr [rdx + 0x48000002], esp; lea edx, [rip + 0x449b7]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000466c68: xchg dword ptr [rdx], eax; add byte ptr [rdx + 0x63], cl; add al, 0xaf; add rax, rdi; jmp rax; 
0x000000000046b9b7: xchg dword ptr [rip + 0x40303], eax; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x000000000044acb7: xchg dword ptr [rip + 0x61523], eax; cmp eax, 1; jg 0x4ace8; xor eax, eax; add rsp, 8; ret; 
0x00000000004171dc: xchg dword ptr [rip + 0x909ae], eax; cmp eax, 1; jg 0x171f0; ret; 
0x0000000000415104: xchg dword ptr [rip + 0x92a86], eax; cmp eax, 1; jg 0x15140; add rsp, 8; ret; 
0x0000000000408b7b: xchg dword ptr [rip + 0x9eba7], edx; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000408b2a: xchg dword ptr [rip + 0x9ebf8], edx; cmp edx, 1; jg 0x8c28; mov esi, r13d; mov rdi, r8; call rax; 
0x0000000000406181: xchg dword ptr [rsi + 0x48ffffaf], ecx; lea esi, [rip + 0x7371f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000464965: xchg dword ptr [rsi - 0x76b70005], ecx; ret; 
0x00000000004496ec: xchg dword ptr [rsi], edx; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0xbe; add rcx, rsi; jmp rcx; 
0x0000000000411328: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000047575c: xchg ebp, eax; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000475d37: xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041810e: xchg ebp, eax; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004612f0: xchg ebp, eax; or byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000453ee9: xchg ebp, eax; ret 0x2244; 
0x000000000041ad33: xchg ebp, eax; ret 0x2948; 
0x000000000041c819: xchg ebp, eax; ret 0x294c; 
0x0000000000405e28: xchg ebp, eax; ret 0x3145; 
0x0000000000447261: xchg ebp, eax; ret 0x548d; 
0x000000000041c67b: xchg ebp, eax; ret 0x8341; 
0x000000000043c7cf: xchg ebp, eax; ret 0x8348; 
0x000000000043b9ea: xchg ebp, eax; ret 0x8548; 
0x000000000043cddf: xchg ebp, eax; ret 0x8d48; 
0x000000000045f60a: xchg ebp, eax; ret 0xc084; 
0x000000000041830e: xchg ebp, eax; ret 0xc231; 
0x0000000000405e64: xchg ebp, eax; ret 0xc2eb; 
0x0000000000471710: xchg ebp, eax; ret 0xc931; 
0x0000000000404e2f: xchg ebp, eax; ret 0xffff; 
0x000000000043fbfb: xchg ebp, eax; ret; 
0x000000000047200d: xchg ebp, eax; ror byte ptr [rcx + 0x39cfb05], 0; add rsp, 0x18; ret; 
0x000000000041472e: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x000000000045c829: xchg ebx, eax; jne 0x5c828; push rsi; ret 0x7420; 
0x00000000004255fc: xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042b44a: xchg ebx, eax; leave; bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042b41a: xchg ebx, eax; leave; bzhi ecx, ecx, eax; jne 0x2b42c; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000045b7d4: xchg ebx, eax; leave; test ecx, ecx; jne 0x5b6a4; ret; 
0x000000000045b69d: xchg ebx, eax; leave; test ecx, ecx; jne 0x5b6aa; ret; 
0x00000000004131f0: xchg ebx, eax; loope 0x131f1; jmp qword ptr [rsi + 0x66]; 
0x0000000000415d96: xchg ebx, eax; nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000044bd51: xchg ebx, eax; or al, 0; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000043c9f8: xchg ebx, eax; or byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x000000000042450f: xchg ebx, eax; ret 0xc085; 
0x0000000000424517: xchg ebx, eax; ret; 
0x0000000000424280: xchg ebx, eax; rol ah, 0xc2; jp 0x2427d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000424400: xchg ebx, eax; rol ah, 0xc2; jp 0x243fd; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000045b6c4: xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x000000000042c0ce: xchg ebx, eax; rol byte ptr [rbp + 0x622c75c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000042b56e: xchg ebx, eax; rol byte ptr [rbp + 0x623075c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000045a961: xchg ebx, eax; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000045de44: xchg ebx, eax; rol byte ptr [rbp - 0x3ad98a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x0000000000424507: xchg ebx, eax; rol byte ptr [rbp - 0x3adc8a40], 0xfb; xchg ebx, eax; ret 0xc085; 
0x000000000042425d: xchg ebx, eax; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000042bf72: xchg ebx, eax; rol byte ptr [rbp - 0xca78b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000045a644: xchg ebx, eax; rol ch, 0xf8; ja 0x5a5cf; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000045db1c: xchg ebx, eax; rol ch, 0xf8; ja 0x5daa7; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000045c0fd: xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000043101f: xchg ebx, eax; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435546: xchg ebx, eax; sal bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000042721f: xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000427537: xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042cf7f: xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000045de32: xchg ebx, eax; shr dword ptr [rip + 0xff], 0x75; sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r11b; ret 0xc500; 
0x000000000043c086: xchg ecx, eax; adc dword ptr [rax + rax], eax; mov eax, 0x15; syscall; 
0x0000000000404006: xchg ecx, eax; add rax, rcx; jmp rax; 
0x000000000040384c: xchg ecx, eax; add rdx, rcx; jmp rdx; 
0x000000000045c683: xchg ecx, eax; clc; add al, 0; ret; 
0x000000000042568f: xchg ecx, eax; insb byte ptr [rdi], dx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042aee1: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000420cd6: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000042990f: xchg ecx, eax; sub eax, edx; ret; 
0x000000000040b392: xchg ecx, ebp; add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000044a6f5: xchg edi, eax; call 0xffffffffc089a6fb; jne 0x4a708; add rsp, 8; ret; 
0x0000000000477db2: xchg edi, eax; clc; jmp qword ptr [rsi + 0x66]; 
0x00000000004106aa: xchg edi, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000043af81: xchg edi, eax; js 0x3af88; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000470625: xchg edi, eax; js 0x7062c; add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004106b1: xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x000000000044ff5d: xchg edi, eax; ret 5; 
0x000000000045e58b: xchg edi, eax; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000042aed7: xchg edx, eax; lea rcx, [rip + 0x54941]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000423cd3: xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000423aa1: xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040bf31: xchg edx, eax; ret 0x3948; 
0x000000000046a35a: xchg edx, eax; ret 0x8949; 
0x000000000046e2c5: xchg edx, eax; ret 0xce89; 
0x0000000000430b8c: xchg edx, eax; ret 0xf40; 
0x000000000042f7d7: xchg edx, eax; sub eax, edx; ret; 
0x000000000041e7e6: xchg esi, eax; add byte ptr cs:[rax], al; lea rax, [rip + 0x2e1f]; cmovne rax, rdx; ret; 
0x000000000040196e: xchg esi, eax; add rax, rsi; jmp rax; 
0x000000000040ee50: xchg esi, eax; call 0x1f10ee55; add al, bpl; ret; 
0x0000000000439906: xchg esi, eax; xor esi, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004451d5: xchg esp, eax; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004465c4: xchg esp, eax; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000402b78: xchg esp, eax; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3d], cl; ret; 
0x000000000046d53a: xchg esp, eax; imul eax, dword ptr [rdx], 0x69ade800; stc; jmp qword ptr [rsi + 0x66]; 
0x00000000004172db: xchg esp, eax; ret 0x2b48; 
0x0000000000438a87: xchg esp, eax; ret 0x3948; 
0x0000000000472e96: xchg esp, eax; ret 0x394d; 
0x000000000044e328: xchg esp, eax; ret 0x3de9; 
0x0000000000466c40: xchg esp, eax; ret 0x8566; 
0x000000000043cdbe: xchg esp, eax; ret 0x8d48; 
0x0000000000402025: xchg esp, eax; ret 0xca21; 
0x0000000000410482: xchg esp, eax; ret 0xd008; 
0x00000000004481bf: xchg esp, eax; ret 0xd108; 
0x000000000044e96a: xchg esp, eax; ret 0xd285; 
0x00000000004017f5: xchg esp, eax; ret; 
0x0000000000411fc0: xchg esp, eax; rol byte ptr [rax + rax*8 - 0x74b7628b], 0xb3; movabs al, byte ptr [0xe9204e8b48000000]; ret; 
0x0000000000466c5f: xchg esp, ebx; add eax, 0x8d480000; cmp eax, 0x28775; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000046b7a6: xend; xor eax, eax; ret; 
0x000000000043724f: xlatb; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f04: xlatb; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043735d: xlatb; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434fdd: xlatb; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004372f9: xlatb; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f89: xlatb; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045cae5: xlatb; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c25: xlatb; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000045cb05: xlatb; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c35: xlatb; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000045cb25: xlatb; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c45: xlatb; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000436713: xlatb; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000047567b: xlatb; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000044ade7: xlatb; cmp rax, 9; ja 0x4adc0; mov rax, rcx; ret; 
0x00000000004372aa: xlatb; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000434f3a: xlatb; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000045af90: xlatb; inc ecx; jne 0x5aec0; vzeroupper; ret; 
0x000000000045cac5: xlatb; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000430c15: xlatb; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000045ae45: xlatb; iretd; inc ecx; jne 0x5aec3; vzeroupper; ret; 
0x00000000004215e8: xlatb; jb 0x215ee; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046b6ca: xlatb; jmp rax; 
0x0000000000430f15: xlatb; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000430f25: xlatb; lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000430f35: xlatb; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000430f45: xlatb; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000435506: xlatb; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004354d4: xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043558d: xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000435552: xlatb; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004077cc: xlatb; mov byte ptr [rsi], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000045c406: xlatb; ret 0x518d; 
0x0000000000424026: xlatb; ret 0xc085; 
0x000000000045adb4: xlatb; ret 0xc0ff; 
0x000000000042b740: xlatb; ret 0xc148; 
0x00000000004310b4: xlatb; ret 0xf66; 
0x000000000045bcd2: xlatb; ret 0xfdc5; 
0x000000000045b12d: xlatb; ret 0xff2d; 
0x000000000042402e: xlatb; ret; 
0x000000000045c4ef: xlatb; retf 0xf66; xlatb; ret; 
0x00000000004246d1: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000045ace3: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045e1f3: xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000042b88e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000423f61: xlatb; rol dword ptr [rbp + 0xf4974c0], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045e1c3: xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045a0d2: xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042401e: xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000045acb3: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000430bff: xlatb; rol dword ptr [rbp - 0xca48b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000045bc9e: xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x000000000042b886: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000429626: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000429456: xlatb; sal bh, 1; ret 0xc000; 
0x0000000000429286: xlatb; sal bh, 1; ret 0xe000; 
0x00000000004290b6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000428ee6: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000428d16: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000428b46: xlatb; sal bh, 1; ret 0xfe00; 
0x0000000000428976: xlatb; sal bh, 1; ret 0xff00; 
0x00000000004287a6: xlatb; sal bh, 1; ret 0xff80; 
0x00000000004285d6: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000428406: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000428236: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000428066: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000427e96: xlatb; sal bh, 1; ret 0xfffc; 
0x0000000000427cc6: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000045aff2: xlatb; sar edi, 0xc0; jne 0x5b040; vzeroupper; ret; 
0x000000000045cec5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x000000000045ced5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x000000000045cee5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000045ceb5: xlatb; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000437922: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000437a0d: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x00000000004379b2: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000437963: xlatb; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000418b95: xlatb; sbb eax, dword ptr [rdx]; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x000000000042b882: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000045a09c: xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000045b94d: xlatb; shr dword ptr [rcx], 0xc8; jne 0x5b954; ret; 
0x0000000000435503: xlatb; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000040aa92: xor ah, byte ptr [rsi - 1]; dec dword ptr [rax + 0x29]; ret; 
0x0000000000403ca2: xor al, 0; add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x75841]; syscall; 
0x0000000000420e36: xor al, 0x16; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000420e3b: xor al, 0x17; ret; 
0x0000000000403c89: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000415e6f: xor al, 0x24; lea r15, [r12 + 1]; mov rdi, r14; call qword ptr [rbx + 0x18]; 
0x000000000040e308: xor al, 0x30; or dword ptr [rax], eax; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000419e7b: xor al, 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000041655b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000407c8b: xor al, 0x87; add rsi, rdi; jmp rsi; 
0x000000000046b47c: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x00000000004101ab: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000042402b: xor al, 0xc5; std; xlatb; ret; 
0x0000000000459090: xor al, 0xd4; add al, 0; add rsp, 8; ret; 
0x0000000000448cd8: xor al, 0xe0; test rsi, rsi; je 0x48ce1; call rsi; 
0x00000000004760f8: xor al, 0xfb; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000042b161: xor al, 2; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x0000000000466246: xor al, 3; add byte ptr [rax], al; or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x000000000042af7d: xor al, 7; jne 0x2af88; add rax, rdi; vzeroupper; ret; 
0x000000000042b0f2: xor al, 7; jne 0x2b129; add rax, rdi; vzeroupper; ret; 
0x000000000042b3fe: xor al, 7; jne 0x2b42c; add rax, rdi; ret; 
0x000000000046ba8a: xor al, byte ptr [rcx]; add byte ptr [rax], al; lea rax, [rip + 0xb]; cmove rax, rdx; ret; 
0x0000000000406820: xor al, byte ptr [rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406854: xor al, byte ptr fs:[rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000449d54: xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000439893: xor bh, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000004246eb: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x000000000045e1bf: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045acaf: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000422a10: xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041645a: xor byte ptr [r15], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004158ae: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000402d13: xor byte ptr [rax + 0x39], cl; ret 0x4f0f; 
0x0000000000438f05: xor byte ptr [rax + 0x39], cl; ret; 
0x00000000004422ff: xor byte ptr [rax - 0x75], cl; je 0x42328; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000443d09: xor byte ptr [rax - 0x75], cl; je 0x43d32; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000042539f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000043902f: xor byte ptr [rax - 0x77], cl; and al, 0x20; cmp esi, 9; je 0x39060; mov eax, 0x48; syscall; 
0x00000000004158af: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004685d6: xor byte ptr [rax - 0x77], cl; fmul qword ptr [rax - 0x75]; sbb al, 0x24; add rsp, 0x30; ret; 
0x000000000046b617: xor byte ptr [rax - 0x77], cl; or byte ptr [rax + 2], r15b; ret; 
0x00000000004725c9: xor byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000449552: xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000456b22: xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsp - 0x77], dh; ret 0xc883; 
0x00000000004403bf: xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000453bda: xor byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xc6; jmp rax; 
0x000000000046547c: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x64d70; add rsp, 0xd8; ret; 
0x00000000004019cc: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000408b77: xor byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rip + 0x9eba7], edx; cmp edx, 1; jg 0x8be0; call rax; 
0x0000000000456ffa: xor byte ptr [rax], al; je 0x57000; ret; 
0x00000000004164e8: xor byte ptr [rbp + 0x15], 0x5b; ret; 
0x000000000042b5ac: xor byte ptr [rbp + 0x4c], dh; ret; 
0x0000000000464780: xor byte ptr [rbp + 0x63], cl; ret; 
0x0000000000430691: xor byte ptr [rbp + rcx*4 + 0x1d], cl; idiv dword ptr [rsi + 0x63490004]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004255f1: xor byte ptr [rbp + rcx*4 + 0x1d], cl; sub ebp, dword ptr [rbp + 5]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004155df: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000040fea4: xor byte ptr [rbx + 0x767737f8], al; lea rcx, [rip + 0x6ad6b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000466245: xor byte ptr [rbx + rax], 0; add byte ptr [rax], cl; jne 0x66260; or byte ptr [rdi + 0x335], 0x80; xor eax, eax; ret; 
0x000000000045021d: xor byte ptr [rbx - 0x1f89f608], al; mov qword ptr [rdi], rdx; mov eax, ecx; ret; 
0x000000000040e06d: xor byte ptr [rbx - 0x79f0f608], al; imul ecx, dword ptr [rbx], 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esp, 0x8900000c; ret 0xc083; 
0x000000000043915f: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000457047: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000466253: xor byte ptr [rcx], 0xc0; ret; 
0x000000000041eea4: xor byte ptr [rcx], al; add bh, dh; ret 0; 
0x000000000040e2b1: xor byte ptr [rcx], cl; add byte ptr [rax - 0x75], cl; add al, 0xd0; jmp rax; 
0x00000000004220a9: xor byte ptr [rdi + rcx + 0x11], al; cmp r14b, al; ret; 
0x0000000000422a11: xor byte ptr [rdi + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041645b: xor byte ptr [rdi], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000421f8a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000042202e: xor byte ptr [rdi], cl; adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044fdeb: xor byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000464774: xor byte ptr [rdi], cl; test byte ptr [rbp + 0x31000000], al; test byte ptr [rcx - 0x7d], 0xc2; xor byte ptr [rbp + 0x63], cl; ret; 
0x000000000042b573: xor byte ptr [rdx - 0x4e], ah; and byte ptr [rsi], ah; ret; 
0x000000000043b969: xor byte ptr [rip - 0x412dcead], al; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x00000000004246ec: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000045e1c0: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045acb0: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000417ea2: xor byte ptr [rsi], al; add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000457db7: xor cl, 0x86; mov esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000004742aa: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046652e: xor cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000441884: xor cl, byte ptr [rax - 0x7d]; ret 0xeb01; 
0x00000000004754b0: xor cl, byte ptr [rax]; jne 0x14cb; mov rax, qword ptr [rax]; ret; 
0x0000000000417c96: xor dh, 0x80; syscall; 
0x0000000000418260: xor dh, 0x81; mov eax, 0xca; syscall; 
0x0000000000418117: xor dh, 0x81; syscall; 
0x0000000000417cf1: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000417cf1: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000458c79: xor dh, 0x87; xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000436aea: xor dh, byte ptr [rbx + rdi - 0x75]; adc byte ptr [r11 + 0x418901c0], al; adc byte ptr [rdi], cl; nop; ret; 
0x000000000046ff99: xor dl, dl; add byte ptr [rdi], r9b; adc dword ptr [rax + 0x2a0], eax; mov qword ptr [rax + 0x360], rdx; pop rbx; ret; 
0x000000000044ef4d: xor dword ptr [rax + 0x4800000b], 0xffffff8d; push rsi; add al, 0x83; ret; 
0x000000000043b616: xor dword ptr [rax], edx; jae 0x3b5c9; xor eax, eax; ret; 
0x000000000043b615: xor dword ptr [rax], r10d; jae 0x3b5c9; xor eax, eax; ret; 
0x0000000000458e2e: xor dword ptr [rbp + 0x31], eax; sar byte ptr [rsi + 0x80], cl; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000417be6: xor dword ptr [rbp - 0xb], esi; and eax, 0x39; cmp eax, 8; je 0x17bf2; ret; 
0x00000000004387e6: xor dword ptr [rcx + rcx*4 - 0x39], eax; mov qword ptr [rsp + 8], rax; call 0x57ae0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000047614c: xor dword ptr [rcx - 0x75], ecx; adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004069ca: xor dword ptr [rdi], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040fda6: xor dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000403c6e: xor dword ptr [rdx], ecx; add al, ch; ret 0xffd3; 
0x000000000045366d: xor dword ptr [rsi + 0xf], 0; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004674a7: xor eax, 0x27fcc; movsxd rax, dword ptr [rsi + r13*4]; add rax, rsi; jmp rax; 
0x000000000045583f: xor eax, 0x384a4; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000043d26c: xor eax, 0x400f3; lea rdi, [rip + 0x40208]; call 0x3ef0; nop dword ptr [rax]; lea rax, [rip + 0x689b9]; ret; 
0x0000000000453942: xor eax, 0x4e8d9; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417ea0: xor eax, 0x63063; mov eax, 0xe; syscall; 
0x00000000004088a5: xor eax, 0x71936; lea rdi, [rip + 0x7193c]; call 0x3ef0; xor eax, eax; ret; 
0x00000000004069c8: xor eax, 0x731f7; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040681e: xor eax, 0x73215; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004069fd: xor eax, 0x73246; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406853: xor eax, 0x73264; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406878: xor eax, 0x732c3; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406661: xor eax, 0x7334e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406110: xor eax, 0x7368f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406002: xor eax, 0x73695; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000040614c: xor eax, 0x736d7; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000406188: xor eax, 0x7371f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004061bd: xor eax, 0x7376e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000403d81: xor eax, 0x75742; syscall; 
0x0000000000403cb2: xor eax, 0x75841; syscall; 
0x0000000000401978: xor eax, 0x777a3; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000046624f: xor eax, 0x80000003; xor eax, eax; ret; 
0x000000000043a9b1: xor eax, 0x89000425; ret; 
0x000000000043c2f9: xor eax, 0x89480005; ret 0xff85; 
0x000000000041e890: xor eax, 0x8d480000; adc eax, 0x35a6; cmove rax, rdx; ret; 
0x0000000000407401: xor eax, dword ptr [rax]; add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000406663: xor eax, dword ptr [rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000408928: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000045860c: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000415077: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000472c51: xor eax, eax; add rsp, 0x38; ret; 
0x00000000004158b4: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c8e0: xor eax, eax; add rsp, 8; ret; 
0x000000000043a60a: xor eax, eax; and ecx, 2; jne 0x3a640; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000472005: xor eax, eax; cmp dword ptr [rsp + 0xc], 1; setne al; mov dword ptr [rip + 0x39cfb], eax; add rsp, 0x18; ret; 
0x000000000045a507: xor eax, eax; cmp edx, esi; cmovg rax, rdi; ret; 
0x00000000004390c2: xor eax, eax; cmp esi, 9; je 0x390f0; mov eax, 0x48; syscall; 
0x0000000000417b4b: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000043650a: xor eax, eax; lea r9, [rsp + 0x30]; call rbx; 
0x000000000044a475: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000045716b: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000043a612: xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000457d3d: xor eax, eax; mov eax, 0xca; syscall; 
0x000000000046b730: xor eax, eax; mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x6b778; xor eax, eax; ret; 
0x0000000000457cbb: xor eax, eax; mov edx, ebp; mov eax, 0xca; syscall; 
0x00000000004693fa: xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045eb1a: xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000043a36f: xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x0000000000457818: xor eax, eax; movups xmmword ptr [rdx + 8], xmm0; ret; 
0x000000000043f4c1: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041219b: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000402193: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000041827a: xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004018a6: xor eax, eax; pop rbx; ret; 
0x00000000004134ab: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x00000000004021a6: xor eax, eax; ret; 
0x000000000042ea5e: xor eax, eax; sub eax, ecx; ret; 
0x000000000042649c: xor eax, eax; sub eax, r8d; ret; 
0x0000000000425e11: xor eax, eax; sub eax, r8d; vzeroupper; ret; 
0x00000000004386f9: xor eax, eax; syscall; 
0x00000000004386f9: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x38760; ret; 
0x00000000004391d0: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x391e0; ret; 
0x0000000000401920: xor eax, eax; test ch, 0xf0; je 0x1901; movzx eax, cl; pop rbx; ret; 
0x000000000040198c: xor eax, eax; test dh, 0xf0; je 0x1901; movzx eax, dl; pop rbx; ret; 
0x000000000041800d: xor eax, eax; test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000042af88: xor eax, eax; vzeroupper; ret; 
0x000000000046b9b5: xor eax, eax; xchg dword ptr [rip + 0x40303], eax; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x00000000004362c0: xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000408726: xor eax, edx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x8708; ret; 
0x0000000000435a0b: xor eax, esp; loope 0x35a0a; xchg ebx, eax; ret; 
0x000000000042649b: xor eax, r8d; sub eax, r8d; ret; 
0x0000000000425e10: xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045a96e: xor ebp, eax; sti; xchg ebx, eax; ret; 
0x00000000004751f3: xor ebp, ebp; mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000046e413: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000439990: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000407ad1: xor ecx, dword ptr [rax + 0x39]; ret; 
0x000000000042b0f5: xor ecx, dword ptr [rax + 1]; clc; vzeroupper; ret; 
0x000000000043984a: xor ecx, dword ptr [rax - 0x75]; and al, 0x18; call rax; 
0x000000000046ac7e: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041a90c: xor ecx, ebp; imul edi, ecx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000042b15d: xor ecx, ecx; cmp sil, byte ptr [rdx + rax]; jne 0x2b129; add rax, rdx; vzeroupper; ret; 
0x0000000000401c8d: xor ecx, ecx; cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa0c2], rax; pop rbx; ret; 
0x00000000004362c2: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045c3c6: xor ecx, edx; and eax, ecx; je 0x5c3d2; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c40b: xor ecx, edx; and eax, ecx; je 0x5c3e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045c44b: xor ecx, edx; and eax, ecx; je 0x5c420; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045c533: xor ecx, edx; and eax, ecx; je 0x5c4e5; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c5d3: xor ecx, edx; and eax, ecx; je 0x5c595; bsr eax, eax; add rax, rdi; ret; 
0x000000000045c610: xor ecx, edx; and eax, ecx; je 0x5c61c; bsr eax, eax; add rax, rdi; ret; 
0x0000000000449d4b: xor edi, ebp; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; stc; xor bh, ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000472979: xor edi, edi; call 0x3c3d0; call rax; 
0x000000000045e8aa: xor edi, edi; mov eax, edi; ret; 
0x0000000000401aa8: xor edi, edi; mov eax, edx; syscall; 
0x000000000043c285: xor edi, edi; mov eax, esi; syscall; 
0x000000000043c2a9: xor edi, edi; mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000043923c: xor edi, edi; syscall; 
0x000000000043923c: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x39250; ret; 
0x0000000000457a4b: xor edi, esi; jmp qword ptr [rsi - 0x70]; 
0x0000000000477889: xor edx, dword ptr [rip - 0x76b70002]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047639d: xor edx, edx; add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000045ea51: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x000000000043c2bb: xor edx, edx; cmp rax, -0x1000; pop rbx; cmovbe rdx, rax; mov rax, rdx; ret; 
0x000000000044df7b: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000004362c4: xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000457dbc: xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000412722: xor edx, edx; mov eax, edx; ret; 
0x00000000004182aa: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458f37: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000418255: xor edx, edx; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041863f: xor edx, edx; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045891d: xor edx, edx; mov edx, 1; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417cf5: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000417cf5: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000417cd1: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd1: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c49: xor edx, edx; mov edx, 1; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000418614: xor edx, edx; mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041832d: xor edx, edx; mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000417c89: xor edx, edx; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000417c33: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046833b: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000457b22: xor edx, edx; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000043b96c: xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000458e30: xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000439233: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000046d0c1: xor edx, edx; mov qword ptr [rip + 0x377fe], r9; mov rax, r10; add rsp, 0x28; ret; 
0x000000000040888f: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000458075: xor edx, edx; mov rdi, rbx; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000458498: xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000041618b: xor edx, edx; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000417ee8: xor edx, edx; mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000453583: xor edx, edx; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454143: xor edx, edx; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000416162: xor edx, edx; pop rbx; jmp rax; 
0x0000000000418058: xor edx, edx; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000418111: xor edx, edx; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000458c7d: xor edx, edx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000458496: xor edx, edx; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000458265: xor edx, edx; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000472975: xor edx, edx; xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x000000000045c726: xor esi, 4; add byte ptr [rax], cl; lea rax, [rip + 0xb0e]; lea rdx, [rip + 0x8c7]; cmove rax, rdx; ret; 
0x00000000004582b1: xor esi, dword ptr [rsp + rdi - 0x77]; ret 0x53e9; 
0x0000000000439907: xor esi, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000046628e: xor esi, esi; call 0x66190; test eax, eax; jne 0x6629b; pop rbx; ret; 
0x0000000000408799: xor esi, esi; call 0x9940; add rsp, 8; ret; 
0x000000000043c081: xor esi, esi; lea rdi, [rip + 0x41191]; mov eax, 0x15; syscall; 
0x00000000004146be: xor esi, esi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000458267: xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000464828: xor esi, esi; pop rbx; mov rax, rsi; ret; 
0x0000000000472977: xor esi, esi; xor edi, edi; call 0x3c3d0; call rax; 
0x0000000000404024: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000045ea50: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x5ea88; mov eax, 0x101; syscall; 
0x00000000004182a9: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458f36: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000418254: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041863e: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045891c: xor r10d, r10d; mov edx, 1; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000417cf4: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000417cf4: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000417cd0: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000417cd0: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000458c48: xor r10d, r10d; mov edx, 1; mov esi, 1; mov eax, 0xca; syscall; 
0x0000000000418613: xor r10d, r10d; mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041832c: xor r10d, r10d; mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000417c88: xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000417c32: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046833a: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000457b21: xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000458e2f: xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000046d0c0: xor r10d, r10d; mov qword ptr [rip + 0x377fe], r9; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000458074: xor r10d, r10d; mov rdi, rbx; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000453582: xor r10d, r10d; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x4e890]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000454142: xor r10d, r10d; movzx edx, byte ptr [rsi + rax]; lea rax, [rip + 0x4dcd0]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000418110: xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000458c7c: xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000458495: xor r10d, r10d; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000458264: xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000404023: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000004751f2: xor r13d, r13d; mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000406662: xor r8, qword ptr [rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000046b9b4: xor r8, rax; xchg dword ptr [rip + 0x40303], eax; cmp eax, 1; jg 0x6b9f0; pop rbx; ret; 
0x00000000004069fe: xor r8b, byte ptr [rdi]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000436509: xor r8d, r8d; lea r9, [rsp + 0x30]; call rbx; 
0x000000000043a611: xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000457d3c: xor r8d, r8d; mov eax, 0xca; syscall; 
0x0000000000457cba: xor r8d, r8d; mov edx, ebp; mov eax, 0xca; syscall; 
0x00000000004362bf: xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000457db6: xor r9b, 0x86; mov esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000042b8a0: xor rax, rax; ret; 
0x0000000000408725: xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x8708; ret; 
0x00000000004146bd: xor rsi, rsi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [rbp + 0x48]; 
0x0000000000417c95: xor sil, 0x80; syscall; 
0x000000000041825f: xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418116: xor sil, 0x81; syscall; 
0x0000000000417cf0: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000417cf0: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000458c78: xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041ff27: xtest; jne 0x1ff30; vzeroupper; ret; 
0x00000000004236b3: xtest; jne 0x236bc; vzeroupper; ret; 
0x00000000004240cd: xtest; jne 0x240d6; vzeroupper; ret; 
0x0000000000424d7b: xtest; jne 0x24d84; vzeroupper; ret; 
0x0000000000426567: xtest; jne 0x26570; vzeroupper; ret; 
0x000000000042b1c4: xtest; jne 0x2b1cd; vzeroupper; ret; 
0x000000000042bd7e: xtest; jne 0x2bd87; vzeroupper; ret; 
0x000000000042c8fe: xtest; jne 0x2c907; vzeroupper; ret; 
0x000000000042fe28: xtest; jne 0x2fe31; vzeroupper; ret; 
0x0000000000430ebe: xtest; jne 0x30ec7; vzeroupper; ret; 
0x0000000000431899: xtest; jne 0x318a2; vzeroupper; ret; 
0x00000000004352e9: xtest; jne 0x352f2; vzeroupper; ret; 
0x000000000043772c: xtest; jne 0x37735; vzeroupper; ret; 
0x000000000045a238: xtest; jne 0x5a241; vzeroupper; ret; 
0x000000000045b25e: xtest; jne 0x5b267; vzeroupper; ret; 
0x000000000045be38: xtest; jne 0x5be41; vzeroupper; ret; 
0x000000000045ce61: xtest; jne 0x5ce6a; vzeroupper; ret; 
0x000000000045d6d8: xtest; jne 0x5d6e1; vzeroupper; ret; 

17521 gadgets found
